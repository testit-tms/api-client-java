/*
 * API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ru.testit.client;

import ru.testit.invoker.ApiCallback;
import ru.testit.invoker.ApiClient;
import ru.testit.invoker.ApiException;
import ru.testit.invoker.ApiResponse;
import ru.testit.invoker.Configuration;
import ru.testit.invoker.Pair;
import ru.testit.invoker.ProgressRequestBody;
import ru.testit.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import ru.testit.model.AutoTestAverageDurationModel;
import ru.testit.model.AutoTestModel;
import ru.testit.model.AutoTestPostModel;
import ru.testit.model.AutoTestPutModel;
import org.threeten.bp.OffsetDateTime;
import ru.testit.model.TestResultChronologyModel;
import ru.testit.model.TestResultHistoryReportModel;
import ru.testit.model.TestRunShortModel;
import java.util.UUID;
import ru.testit.model.WorkItemIdModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AutoTestsApi {
    private ApiClient apiClient;

    public AutoTestsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AutoTestsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createAutoTest
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAutoTestCall(AutoTestPostModel body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v2/autoTests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer or PrivateToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAutoTestValidateBeforeCall(AutoTestPostModel body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = createAutoTestCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create AutoTest
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest parameters (listed in the example) and runs method execution  &lt;br&gt;System creates autotest  &lt;br&gt;[Optional] If steps enumeration is set, system creates step items and relates them to autotest  &lt;br&gt;[Optional] If setup enumeration is set, system creates setup items and relates them to autotest  &lt;br&gt;[Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest  &lt;br&gt;[Optional] If label enumeration is set, system creates labels and relates them to autotest  &lt;br&gt;[Optional] If link enumeration is set, system creates links and relates them to autotest  &lt;br&gt;System returns autotest model (example listed in response parameters)
     * @param body  (optional)
     * @return AutoTestModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AutoTestModel createAutoTest(AutoTestPostModel body) throws ApiException {
        ApiResponse<AutoTestModel> resp = createAutoTestWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create AutoTest
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest parameters (listed in the example) and runs method execution  &lt;br&gt;System creates autotest  &lt;br&gt;[Optional] If steps enumeration is set, system creates step items and relates them to autotest  &lt;br&gt;[Optional] If setup enumeration is set, system creates setup items and relates them to autotest  &lt;br&gt;[Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest  &lt;br&gt;[Optional] If label enumeration is set, system creates labels and relates them to autotest  &lt;br&gt;[Optional] If link enumeration is set, system creates links and relates them to autotest  &lt;br&gt;System returns autotest model (example listed in response parameters)
     * @param body  (optional)
     * @return ApiResponse&lt;AutoTestModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AutoTestModel> createAutoTestWithHttpInfo(AutoTestPostModel body) throws ApiException {
        com.squareup.okhttp.Call call = createAutoTestValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<AutoTestModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create AutoTest (asynchronously)
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest parameters (listed in the example) and runs method execution  &lt;br&gt;System creates autotest  &lt;br&gt;[Optional] If steps enumeration is set, system creates step items and relates them to autotest  &lt;br&gt;[Optional] If setup enumeration is set, system creates setup items and relates them to autotest  &lt;br&gt;[Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest  &lt;br&gt;[Optional] If label enumeration is set, system creates labels and relates them to autotest  &lt;br&gt;[Optional] If link enumeration is set, system creates links and relates them to autotest  &lt;br&gt;System returns autotest model (example listed in response parameters)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAutoTestAsync(AutoTestPostModel body, final ApiCallback<AutoTestModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAutoTestValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AutoTestModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createMultiple
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createMultipleCall(List<AutoTestPostModel> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v2/autoTests/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer or PrivateToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createMultipleValidateBeforeCall(List<AutoTestPostModel> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = createMultipleCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create AutoTests multiple
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest parameters (listed in the example) and runs method execution  &lt;br&gt;System creates autotest  &lt;br&gt;[Optional] If steps enumeration is set, system creates step items and relates them to autotest  &lt;br&gt;[Optional] If setup enumeration is set, system creates setup items and relates them to autotest  &lt;br&gt;[Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest  &lt;br&gt;[Optional] If label enumeration is set, system creates labels and relates them to autotest  &lt;br&gt;[Optional] If link enumeration is set, system creates links and relates them to autotest  &lt;br&gt;System returns autotest model (example listed in response parameters)
     * @param body  (optional)
     * @return List&lt;AutoTestModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AutoTestModel> createMultiple(List<AutoTestPostModel> body) throws ApiException {
        ApiResponse<List<AutoTestModel>> resp = createMultipleWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create AutoTests multiple
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest parameters (listed in the example) and runs method execution  &lt;br&gt;System creates autotest  &lt;br&gt;[Optional] If steps enumeration is set, system creates step items and relates them to autotest  &lt;br&gt;[Optional] If setup enumeration is set, system creates setup items and relates them to autotest  &lt;br&gt;[Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest  &lt;br&gt;[Optional] If label enumeration is set, system creates labels and relates them to autotest  &lt;br&gt;[Optional] If link enumeration is set, system creates links and relates them to autotest  &lt;br&gt;System returns autotest model (example listed in response parameters)
     * @param body  (optional)
     * @return ApiResponse&lt;List&lt;AutoTestModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AutoTestModel>> createMultipleWithHttpInfo(List<AutoTestPostModel> body) throws ApiException {
        com.squareup.okhttp.Call call = createMultipleValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<List<AutoTestModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create AutoTests multiple (asynchronously)
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest parameters (listed in the example) and runs method execution  &lt;br&gt;System creates autotest  &lt;br&gt;[Optional] If steps enumeration is set, system creates step items and relates them to autotest  &lt;br&gt;[Optional] If setup enumeration is set, system creates setup items and relates them to autotest  &lt;br&gt;[Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest  &lt;br&gt;[Optional] If label enumeration is set, system creates labels and relates them to autotest  &lt;br&gt;[Optional] If link enumeration is set, system creates links and relates them to autotest  &lt;br&gt;System returns autotest model (example listed in response parameters)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createMultipleAsync(List<AutoTestPostModel> body, final ApiCallback<List<AutoTestModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createMultipleValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AutoTestModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteAutoTest
     * @param autoTestId Autotest internal (guid format) or global  (integer format) identifier \&quot; (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAutoTestCall(String autoTestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v2/autoTests/{autoTestId}"
            .replaceAll("\\{" + "autoTestId" + "\\}", apiClient.escapeString(autoTestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer or PrivateToken" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAutoTestValidateBeforeCall(String autoTestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'autoTestId' is set
        if (autoTestId == null) {
            throw new ApiException("Missing the required parameter 'autoTestId' when calling deleteAutoTest(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteAutoTestCall(autoTestId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete AutoTest by Id or GlobalId
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest internal (guid format) or global (integer format) identifier and runs method execution  &lt;br&gt;System finds the autotest by the identifier  &lt;br&gt;System deletes autotest and returns no content response
     * @param autoTestId Autotest internal (guid format) or global  (integer format) identifier \&quot; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAutoTest(String autoTestId) throws ApiException {
        deleteAutoTestWithHttpInfo(autoTestId);
    }

    /**
     * Delete AutoTest by Id or GlobalId
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest internal (guid format) or global (integer format) identifier and runs method execution  &lt;br&gt;System finds the autotest by the identifier  &lt;br&gt;System deletes autotest and returns no content response
     * @param autoTestId Autotest internal (guid format) or global  (integer format) identifier \&quot; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAutoTestWithHttpInfo(String autoTestId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAutoTestValidateBeforeCall(autoTestId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete AutoTest by Id or GlobalId (asynchronously)
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest internal (guid format) or global (integer format) identifier and runs method execution  &lt;br&gt;System finds the autotest by the identifier  &lt;br&gt;System deletes autotest and returns no content response
     * @param autoTestId Autotest internal (guid format) or global  (integer format) identifier \&quot; (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAutoTestAsync(String autoTestId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAutoTestValidateBeforeCall(autoTestId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteAutoTestLinkFromWorkItem
     * @param autoTestId autotest internal (guid format) or global  (integer format) identifier (required)
     * @param workItemId workItem internal (guid format) or global  (integer format) identifier (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAutoTestLinkFromWorkItemCall(String autoTestId, String workItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v2/autoTests/{autoTestId}/workItems"
            .replaceAll("\\{" + "autoTestId" + "\\}", apiClient.escapeString(autoTestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (workItemId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("workItemId", workItemId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer or PrivateToken" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAutoTestLinkFromWorkItemValidateBeforeCall(String autoTestId, String workItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'autoTestId' is set
        if (autoTestId == null) {
            throw new ApiException("Missing the required parameter 'autoTestId' when calling deleteAutoTestLinkFromWorkItem(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteAutoTestLinkFromWorkItemCall(autoTestId, workItemId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete AutoTest link from WorkItem by Id or GlobalId  (if workItemId is not specified, then remove all links WorkItems to AutoTest)
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest internal (guid format) or global (integer format) identifier  &lt;br&gt;[Optional] User sets workitem internal (guid format) or global (integer format) identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System finds the autotest by the autotest identifier  &lt;br&gt;                      [Optional] if workitem id is set by User, System finds the workitem by the workitem identifier and unlinks it                      from autotest.                    &lt;br&gt;[Optional] Otherwise, if workitem id is not specified, System unlinks all workitems linked to autotest.  &lt;br&gt;System returns no content response
     * @param autoTestId autotest internal (guid format) or global  (integer format) identifier (required)
     * @param workItemId workItem internal (guid format) or global  (integer format) identifier (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAutoTestLinkFromWorkItem(String autoTestId, String workItemId) throws ApiException {
        deleteAutoTestLinkFromWorkItemWithHttpInfo(autoTestId, workItemId);
    }

    /**
     * Delete AutoTest link from WorkItem by Id or GlobalId  (if workItemId is not specified, then remove all links WorkItems to AutoTest)
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest internal (guid format) or global (integer format) identifier  &lt;br&gt;[Optional] User sets workitem internal (guid format) or global (integer format) identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System finds the autotest by the autotest identifier  &lt;br&gt;                      [Optional] if workitem id is set by User, System finds the workitem by the workitem identifier and unlinks it                      from autotest.                    &lt;br&gt;[Optional] Otherwise, if workitem id is not specified, System unlinks all workitems linked to autotest.  &lt;br&gt;System returns no content response
     * @param autoTestId autotest internal (guid format) or global  (integer format) identifier (required)
     * @param workItemId workItem internal (guid format) or global  (integer format) identifier (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAutoTestLinkFromWorkItemWithHttpInfo(String autoTestId, String workItemId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAutoTestLinkFromWorkItemValidateBeforeCall(autoTestId, workItemId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete AutoTest link from WorkItem by Id or GlobalId  (if workItemId is not specified, then remove all links WorkItems to AutoTest) (asynchronously)
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest internal (guid format) or global (integer format) identifier  &lt;br&gt;[Optional] User sets workitem internal (guid format) or global (integer format) identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System finds the autotest by the autotest identifier  &lt;br&gt;                      [Optional] if workitem id is set by User, System finds the workitem by the workitem identifier and unlinks it                      from autotest.                    &lt;br&gt;[Optional] Otherwise, if workitem id is not specified, System unlinks all workitems linked to autotest.  &lt;br&gt;System returns no content response
     * @param autoTestId autotest internal (guid format) or global  (integer format) identifier (required)
     * @param workItemId workItem internal (guid format) or global  (integer format) identifier (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAutoTestLinkFromWorkItemAsync(String autoTestId, String workItemId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAutoTestLinkFromWorkItemValidateBeforeCall(autoTestId, workItemId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAllAutoTests
     * @param projectId Project internal identifier (optional)
     * @param externalId Autotest external identifier (optional)
     * @param globalId Autotest global identifier (optional)
     * @param namespace Name of abstract storage where autotest is located (optional)
     * @param isNamespaceNull Boolean flag which defines if search must include autotests with null  value Namespace attribute (optional, default to false)
     * @param classname Name of the class where autotest is located (optional)
     * @param isClassnameNull Boolean flag which defines if search must include autotests with null  value Classname attribute (optional, default to false)
     * @param isDeleted Boolean flag which defines if search must include deleted autotests (optional, default to false)
     * @param labels List of autotests labels to filter by (optional)
     * @param stabilityMinimal Minimal stability value to filter by (optional)
     * @param stabilityMaximal Maximal stability value to filter by (optional)
     * @param isFlaky [Optional] If flaky is set (optional)
     * @param includeSteps Boolean flag which defines if setup, steps and teardown fields must be included (optional, default to true)
     * @param includeLabels Boolean flag which defines if labels field must be included (optional, default to true)
     * @param  Amount of items to be skipped (offset) (optional)
     * @param  Amount of items to be taken (limit) (optional)
     * @param  SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)
     * @param  Property name for searching (optional)
     * @param  Value for searching (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllAutoTestsCall(UUID projectId, String externalId, Long globalId, String namespace, Boolean isNamespaceNull, String classname, Boolean isClassnameNull, Boolean isDeleted, List<String> labels, Integer stabilityMinimal, Integer stabilityMaximal, Boolean isFlaky, Boolean includeSteps, Boolean includeLabels,  ,  ,  ,  ,  , final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v2/autoTests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (projectId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectId", projectId));
        if (externalId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("externalId", externalId));
        if (globalId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("globalId", globalId));
        if (namespace != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Namespace", namespace));
        if (isNamespaceNull != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isNamespaceNull", isNamespaceNull));
        if (classname != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("classname", classname));
        if (isClassnameNull != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isClassnameNull", isClassnameNull));
        if (isDeleted != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isDeleted", isDeleted));
        if (labels != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "labels", labels));
        if (stabilityMinimal != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stabilityMinimal", stabilityMinimal));
        if (stabilityMaximal != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stabilityMaximal", stabilityMaximal));
        if (isFlaky != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isFlaky", isFlaky));
        if (includeSteps != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeSteps", includeSteps));
        if (includeLabels != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeLabels", includeLabels));
        if ( != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Skip", ));
        if ( != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Take", ));
        if ( != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("OrderBy", ));
        if ( != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("SearchField", ));
        if ( != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("SearchValue", ));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer or PrivateToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllAutoTestsValidateBeforeCall(UUID projectId, String externalId, Long globalId, String namespace, Boolean isNamespaceNull, String classname, Boolean isClassnameNull, Boolean isDeleted, List<String> labels, Integer stabilityMinimal, Integer stabilityMaximal, Boolean isFlaky, Boolean includeSteps, Boolean includeLabels,  ,  ,  ,  ,  , final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getAllAutoTestsCall(projectId, externalId, globalId, namespace, isNamespaceNull, classname, isClassnameNull, isDeleted, labels, stabilityMinimal, stabilityMaximal, isFlaky, includeSteps, includeLabels, , , , , , progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all AutoTests (if parameters are specified, then it&#x27;s filtered by them.)
     * &lt;br&gt;Use case  &lt;br&gt;[Optional] User sets search parameters (listed in request parameters) and runs method execution  &lt;br&gt;System returns all autotests, matching search criteria
     * @param projectId Project internal identifier (optional)
     * @param externalId Autotest external identifier (optional)
     * @param globalId Autotest global identifier (optional)
     * @param namespace Name of abstract storage where autotest is located (optional)
     * @param isNamespaceNull Boolean flag which defines if search must include autotests with null  value Namespace attribute (optional, default to false)
     * @param classname Name of the class where autotest is located (optional)
     * @param isClassnameNull Boolean flag which defines if search must include autotests with null  value Classname attribute (optional, default to false)
     * @param isDeleted Boolean flag which defines if search must include deleted autotests (optional, default to false)
     * @param labels List of autotests labels to filter by (optional)
     * @param stabilityMinimal Minimal stability value to filter by (optional)
     * @param stabilityMaximal Maximal stability value to filter by (optional)
     * @param isFlaky [Optional] If flaky is set (optional)
     * @param includeSteps Boolean flag which defines if setup, steps and teardown fields must be included (optional, default to true)
     * @param includeLabels Boolean flag which defines if labels field must be included (optional, default to true)
     * @param  Amount of items to be skipped (offset) (optional)
     * @param  Amount of items to be taken (limit) (optional)
     * @param  SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)
     * @param  Property name for searching (optional)
     * @param  Value for searching (optional)
     * @return List&lt;AutoTestModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AutoTestModel> getAllAutoTests(UUID projectId, String externalId, Long globalId, String namespace, Boolean isNamespaceNull, String classname, Boolean isClassnameNull, Boolean isDeleted, List<String> labels, Integer stabilityMinimal, Integer stabilityMaximal, Boolean isFlaky, Boolean includeSteps, Boolean includeLabels,  ,  ,  ,  ,  ) throws ApiException {
        ApiResponse<List<AutoTestModel>> resp = getAllAutoTestsWithHttpInfo(projectId, externalId, globalId, namespace, isNamespaceNull, classname, isClassnameNull, isDeleted, labels, stabilityMinimal, stabilityMaximal, isFlaky, includeSteps, includeLabels, , , , , );
        return resp.getData();
    }

    /**
     * Get all AutoTests (if parameters are specified, then it&#x27;s filtered by them.)
     * &lt;br&gt;Use case  &lt;br&gt;[Optional] User sets search parameters (listed in request parameters) and runs method execution  &lt;br&gt;System returns all autotests, matching search criteria
     * @param projectId Project internal identifier (optional)
     * @param externalId Autotest external identifier (optional)
     * @param globalId Autotest global identifier (optional)
     * @param namespace Name of abstract storage where autotest is located (optional)
     * @param isNamespaceNull Boolean flag which defines if search must include autotests with null  value Namespace attribute (optional, default to false)
     * @param classname Name of the class where autotest is located (optional)
     * @param isClassnameNull Boolean flag which defines if search must include autotests with null  value Classname attribute (optional, default to false)
     * @param isDeleted Boolean flag which defines if search must include deleted autotests (optional, default to false)
     * @param labels List of autotests labels to filter by (optional)
     * @param stabilityMinimal Minimal stability value to filter by (optional)
     * @param stabilityMaximal Maximal stability value to filter by (optional)
     * @param isFlaky [Optional] If flaky is set (optional)
     * @param includeSteps Boolean flag which defines if setup, steps and teardown fields must be included (optional, default to true)
     * @param includeLabels Boolean flag which defines if labels field must be included (optional, default to true)
     * @param  Amount of items to be skipped (offset) (optional)
     * @param  Amount of items to be taken (limit) (optional)
     * @param  SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)
     * @param  Property name for searching (optional)
     * @param  Value for searching (optional)
     * @return ApiResponse&lt;List&lt;AutoTestModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AutoTestModel>> getAllAutoTestsWithHttpInfo(UUID projectId, String externalId, Long globalId, String namespace, Boolean isNamespaceNull, String classname, Boolean isClassnameNull, Boolean isDeleted, List<String> labels, Integer stabilityMinimal, Integer stabilityMaximal, Boolean isFlaky, Boolean includeSteps, Boolean includeLabels,  ,  ,  ,  ,  ) throws ApiException {
        com.squareup.okhttp.Call call = getAllAutoTestsValidateBeforeCall(projectId, externalId, globalId, namespace, isNamespaceNull, classname, isClassnameNull, isDeleted, labels, stabilityMinimal, stabilityMaximal, isFlaky, includeSteps, includeLabels, , , , , , null, null);
        Type localVarReturnType = new TypeToken<List<AutoTestModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all AutoTests (if parameters are specified, then it&#x27;s filtered by them.) (asynchronously)
     * &lt;br&gt;Use case  &lt;br&gt;[Optional] User sets search parameters (listed in request parameters) and runs method execution  &lt;br&gt;System returns all autotests, matching search criteria
     * @param projectId Project internal identifier (optional)
     * @param externalId Autotest external identifier (optional)
     * @param globalId Autotest global identifier (optional)
     * @param namespace Name of abstract storage where autotest is located (optional)
     * @param isNamespaceNull Boolean flag which defines if search must include autotests with null  value Namespace attribute (optional, default to false)
     * @param classname Name of the class where autotest is located (optional)
     * @param isClassnameNull Boolean flag which defines if search must include autotests with null  value Classname attribute (optional, default to false)
     * @param isDeleted Boolean flag which defines if search must include deleted autotests (optional, default to false)
     * @param labels List of autotests labels to filter by (optional)
     * @param stabilityMinimal Minimal stability value to filter by (optional)
     * @param stabilityMaximal Maximal stability value to filter by (optional)
     * @param isFlaky [Optional] If flaky is set (optional)
     * @param includeSteps Boolean flag which defines if setup, steps and teardown fields must be included (optional, default to true)
     * @param includeLabels Boolean flag which defines if labels field must be included (optional, default to true)
     * @param  Amount of items to be skipped (offset) (optional)
     * @param  Amount of items to be taken (limit) (optional)
     * @param  SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)
     * @param  Property name for searching (optional)
     * @param  Value for searching (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllAutoTestsAsync(UUID projectId, String externalId, Long globalId, String namespace, Boolean isNamespaceNull, String classname, Boolean isClassnameNull, Boolean isDeleted, List<String> labels, Integer stabilityMinimal, Integer stabilityMaximal, Boolean isFlaky, Boolean includeSteps, Boolean includeLabels,  ,  ,  ,  ,  , final ApiCallback<List<AutoTestModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllAutoTestsValidateBeforeCall(projectId, externalId, globalId, namespace, isNamespaceNull, classname, isClassnameNull, isDeleted, labels, stabilityMinimal, stabilityMaximal, isFlaky, includeSteps, includeLabels, , , , , , progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AutoTestModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAutoTestAverageDuration
     * @param autoTestId autotest internal (guid format) or global  (integer format) identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAutoTestAverageDurationCall(String autoTestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v2/autoTests/{autoTestId}/averageDuration"
            .replaceAll("\\{" + "autoTestId" + "\\}", apiClient.escapeString(autoTestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer or PrivateToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAutoTestAverageDurationValidateBeforeCall(String autoTestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'autoTestId' is set
        if (autoTestId == null) {
            throw new ApiException("Missing the required parameter 'autoTestId' when calling getAutoTestAverageDuration(Async)");
        }
        
        com.squareup.okhttp.Call call = getAutoTestAverageDurationCall(autoTestId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get AutoTest average duration by Id or GlobalId
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest internal (guid format) or global (integer format) identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System calculates pass average duration and fail average duration of autotest from all related test results  &lt;br&gt;System returns pass average duration and fail average duration for autotest
     * @param autoTestId autotest internal (guid format) or global  (integer format) identifier (required)
     * @return AutoTestAverageDurationModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AutoTestAverageDurationModel getAutoTestAverageDuration(String autoTestId) throws ApiException {
        ApiResponse<AutoTestAverageDurationModel> resp = getAutoTestAverageDurationWithHttpInfo(autoTestId);
        return resp.getData();
    }

    /**
     * Get AutoTest average duration by Id or GlobalId
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest internal (guid format) or global (integer format) identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System calculates pass average duration and fail average duration of autotest from all related test results  &lt;br&gt;System returns pass average duration and fail average duration for autotest
     * @param autoTestId autotest internal (guid format) or global  (integer format) identifier (required)
     * @return ApiResponse&lt;AutoTestAverageDurationModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AutoTestAverageDurationModel> getAutoTestAverageDurationWithHttpInfo(String autoTestId) throws ApiException {
        com.squareup.okhttp.Call call = getAutoTestAverageDurationValidateBeforeCall(autoTestId, null, null);
        Type localVarReturnType = new TypeToken<AutoTestAverageDurationModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get AutoTest average duration by Id or GlobalId (asynchronously)
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest internal (guid format) or global (integer format) identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System calculates pass average duration and fail average duration of autotest from all related test results  &lt;br&gt;System returns pass average duration and fail average duration for autotest
     * @param autoTestId autotest internal (guid format) or global  (integer format) identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAutoTestAverageDurationAsync(String autoTestId, final ApiCallback<AutoTestAverageDurationModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAutoTestAverageDurationValidateBeforeCall(autoTestId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AutoTestAverageDurationModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAutoTestById
     * @param autoTestId Autotest internal identifier (guid format) or  global identifier (integer format) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAutoTestByIdCall(String autoTestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v2/autoTests/{autoTestId}"
            .replaceAll("\\{" + "autoTestId" + "\\}", apiClient.escapeString(autoTestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer or PrivateToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAutoTestByIdValidateBeforeCall(String autoTestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'autoTestId' is set
        if (autoTestId == null) {
            throw new ApiException("Missing the required parameter 'autoTestId' when calling getAutoTestById(Async)");
        }
        
        com.squareup.okhttp.Call call = getAutoTestByIdCall(autoTestId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get AutoTest by Id or GlobalId
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest internal or global identifier and runs method execution  &lt;br&gt;                      System returns autotest, which internal or global identifier equals the identifier value set in the previous                      action                  
     * @param autoTestId Autotest internal identifier (guid format) or  global identifier (integer format) (required)
     * @return AutoTestModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AutoTestModel getAutoTestById(String autoTestId) throws ApiException {
        ApiResponse<AutoTestModel> resp = getAutoTestByIdWithHttpInfo(autoTestId);
        return resp.getData();
    }

    /**
     * Get AutoTest by Id or GlobalId
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest internal or global identifier and runs method execution  &lt;br&gt;                      System returns autotest, which internal or global identifier equals the identifier value set in the previous                      action                  
     * @param autoTestId Autotest internal identifier (guid format) or  global identifier (integer format) (required)
     * @return ApiResponse&lt;AutoTestModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AutoTestModel> getAutoTestByIdWithHttpInfo(String autoTestId) throws ApiException {
        com.squareup.okhttp.Call call = getAutoTestByIdValidateBeforeCall(autoTestId, null, null);
        Type localVarReturnType = new TypeToken<AutoTestModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get AutoTest by Id or GlobalId (asynchronously)
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest internal or global identifier and runs method execution  &lt;br&gt;                      System returns autotest, which internal or global identifier equals the identifier value set in the previous                      action                  
     * @param autoTestId Autotest internal identifier (guid format) or  global identifier (integer format) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAutoTestByIdAsync(String autoTestId, final ApiCallback<AutoTestModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAutoTestByIdValidateBeforeCall(autoTestId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AutoTestModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAutoTestChronology
     * @param autoTestId autotest internal (guid format) or global  (integer format) identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAutoTestChronologyCall(String autoTestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v2/autoTests/{autoTestId}/chronology"
            .replaceAll("\\{" + "autoTestId" + "\\}", apiClient.escapeString(autoTestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer or PrivateToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAutoTestChronologyValidateBeforeCall(String autoTestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'autoTestId' is set
        if (autoTestId == null) {
            throw new ApiException("Missing the required parameter 'autoTestId' when calling getAutoTestChronology(Async)");
        }
        
        com.squareup.okhttp.Call call = getAutoTestChronologyCall(autoTestId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get AutoTest chronology by Id or GlobalId
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest internal (guid format) or global (integer format) identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search all test results related to autotest (with default limit equal 100)  &lt;br&gt;                      System orders the test results by CompletedOn property descending and then orders by CreatedDate property                      descending                    &lt;br&gt;System returns test result chronology for autotest
     * @param autoTestId autotest internal (guid format) or global  (integer format) identifier (required)
     * @return List&lt;TestResultChronologyModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TestResultChronologyModel> getAutoTestChronology(String autoTestId) throws ApiException {
        ApiResponse<List<TestResultChronologyModel>> resp = getAutoTestChronologyWithHttpInfo(autoTestId);
        return resp.getData();
    }

    /**
     * Get AutoTest chronology by Id or GlobalId
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest internal (guid format) or global (integer format) identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search all test results related to autotest (with default limit equal 100)  &lt;br&gt;                      System orders the test results by CompletedOn property descending and then orders by CreatedDate property                      descending                    &lt;br&gt;System returns test result chronology for autotest
     * @param autoTestId autotest internal (guid format) or global  (integer format) identifier (required)
     * @return ApiResponse&lt;List&lt;TestResultChronologyModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TestResultChronologyModel>> getAutoTestChronologyWithHttpInfo(String autoTestId) throws ApiException {
        com.squareup.okhttp.Call call = getAutoTestChronologyValidateBeforeCall(autoTestId, null, null);
        Type localVarReturnType = new TypeToken<List<TestResultChronologyModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get AutoTest chronology by Id or GlobalId (asynchronously)
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest internal (guid format) or global (integer format) identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search all test results related to autotest (with default limit equal 100)  &lt;br&gt;                      System orders the test results by CompletedOn property descending and then orders by CreatedDate property                      descending                    &lt;br&gt;System returns test result chronology for autotest
     * @param autoTestId autotest internal (guid format) or global  (integer format) identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAutoTestChronologyAsync(String autoTestId, final ApiCallback<List<TestResultChronologyModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAutoTestChronologyValidateBeforeCall(autoTestId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<TestResultChronologyModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestRuns
     * @param autoTestId autotest internal (guid format) or global  (integer format) identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestRunsCall(String autoTestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v2/autoTests/{autoTestId}/testRuns"
            .replaceAll("\\{" + "autoTestId" + "\\}", apiClient.escapeString(autoTestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer or PrivateToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestRunsValidateBeforeCall(String autoTestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'autoTestId' is set
        if (autoTestId == null) {
            throw new ApiException("Missing the required parameter 'autoTestId' when calling getTestRuns(Async)");
        }
        
        com.squareup.okhttp.Call call = getTestRunsCall(autoTestId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Stopped and completed TestRuns which contain AutoTest by Id or GlobalId
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest internal (guid format) or global (integer format) identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search for all test runs related to the autotest  &lt;br&gt;System returns the enumeration of test runs
     * @param autoTestId autotest internal (guid format) or global  (integer format) identifier (required)
     * @return List&lt;TestRunShortModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TestRunShortModel> getTestRuns(String autoTestId) throws ApiException {
        ApiResponse<List<TestRunShortModel>> resp = getTestRunsWithHttpInfo(autoTestId);
        return resp.getData();
    }

    /**
     * Stopped and completed TestRuns which contain AutoTest by Id or GlobalId
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest internal (guid format) or global (integer format) identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search for all test runs related to the autotest  &lt;br&gt;System returns the enumeration of test runs
     * @param autoTestId autotest internal (guid format) or global  (integer format) identifier (required)
     * @return ApiResponse&lt;List&lt;TestRunShortModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TestRunShortModel>> getTestRunsWithHttpInfo(String autoTestId) throws ApiException {
        com.squareup.okhttp.Call call = getTestRunsValidateBeforeCall(autoTestId, null, null);
        Type localVarReturnType = new TypeToken<List<TestRunShortModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Stopped and completed TestRuns which contain AutoTest by Id or GlobalId (asynchronously)
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest internal (guid format) or global (integer format) identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search for all test runs related to the autotest  &lt;br&gt;System returns the enumeration of test runs
     * @param autoTestId autotest internal (guid format) or global  (integer format) identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestRunsAsync(String autoTestId, final ApiCallback<List<TestRunShortModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestRunsValidateBeforeCall(autoTestId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<TestRunShortModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWorkItemResults
     * @param autoTestId autotest internal (guid format) or global  (integer format) identifier (required)
     * @param from  (optional)
     * @param to  (optional)
     * @param configurationIds  (optional)
     * @param testPlanIds  (optional)
     * @param userIds  (optional)
     * @param outcomes  (optional)
     * @param isAutomated  (optional)
     * @param testRunIds  (optional)
     * @param  Amount of items to be skipped (offset) (optional)
     * @param  Amount of items to be taken (limit) (optional)
     * @param  SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)
     * @param  Property name for searching (optional)
     * @param  Value for searching (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWorkItemResultsCall(String autoTestId, OffsetDateTime from, OffsetDateTime to, List<UUID> configurationIds, List<UUID> testPlanIds, List<UUID> userIds, List<String> outcomes, Boolean isAutomated, List<UUID> testRunIds,  ,  ,  ,  ,  , final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v2/autoTests/{autoTestId}/testResultHistory"
            .replaceAll("\\{" + "autoTestId" + "\\}", apiClient.escapeString(autoTestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("From", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("To", to));
        if (configurationIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ConfigurationIds", configurationIds));
        if (testPlanIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "TestPlanIds", testPlanIds));
        if (userIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "UserIds", userIds));
        if (outcomes != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "Outcomes", outcomes));
        if (isAutomated != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("IsAutomated", isAutomated));
        if (testRunIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "TestRunIds", testRunIds));
        if ( != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Skip", ));
        if ( != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Take", ));
        if ( != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("OrderBy", ));
        if ( != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("SearchField", ));
        if ( != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("SearchValue", ));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer or PrivateToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWorkItemResultsValidateBeforeCall(String autoTestId, OffsetDateTime from, OffsetDateTime to, List<UUID> configurationIds, List<UUID> testPlanIds, List<UUID> userIds, List<String> outcomes, Boolean isAutomated, List<UUID> testRunIds,  ,  ,  ,  ,  , final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'autoTestId' is set
        if (autoTestId == null) {
            throw new ApiException("Missing the required parameter 'autoTestId' when calling getWorkItemResults(Async)");
        }
        
        com.squareup.okhttp.Call call = getWorkItemResultsCall(autoTestId, from, to, configurationIds, testPlanIds, userIds, outcomes, isAutomated, testRunIds, , , , , , progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * History of TestResults for AutoTest by Id or GlobalId
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest internal (guid format) or global (integer format) identifier  &lt;br&gt;User sets getTestResultHistoryReportQuery (listed in the example)  &lt;br&gt;User runs method execution  &lt;br&gt;System search for test results using filters set by user in getTestResultHistoryReportQuery and autoTestId  &lt;br&gt;System returns the enumeration of test results
     * @param autoTestId autotest internal (guid format) or global  (integer format) identifier (required)
     * @param from  (optional)
     * @param to  (optional)
     * @param configurationIds  (optional)
     * @param testPlanIds  (optional)
     * @param userIds  (optional)
     * @param outcomes  (optional)
     * @param isAutomated  (optional)
     * @param testRunIds  (optional)
     * @param  Amount of items to be skipped (offset) (optional)
     * @param  Amount of items to be taken (limit) (optional)
     * @param  SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)
     * @param  Property name for searching (optional)
     * @param  Value for searching (optional)
     * @return List&lt;TestResultHistoryReportModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TestResultHistoryReportModel> getWorkItemResults(String autoTestId, OffsetDateTime from, OffsetDateTime to, List<UUID> configurationIds, List<UUID> testPlanIds, List<UUID> userIds, List<String> outcomes, Boolean isAutomated, List<UUID> testRunIds,  ,  ,  ,  ,  ) throws ApiException {
        ApiResponse<List<TestResultHistoryReportModel>> resp = getWorkItemResultsWithHttpInfo(autoTestId, from, to, configurationIds, testPlanIds, userIds, outcomes, isAutomated, testRunIds, , , , , );
        return resp.getData();
    }

    /**
     * History of TestResults for AutoTest by Id or GlobalId
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest internal (guid format) or global (integer format) identifier  &lt;br&gt;User sets getTestResultHistoryReportQuery (listed in the example)  &lt;br&gt;User runs method execution  &lt;br&gt;System search for test results using filters set by user in getTestResultHistoryReportQuery and autoTestId  &lt;br&gt;System returns the enumeration of test results
     * @param autoTestId autotest internal (guid format) or global  (integer format) identifier (required)
     * @param from  (optional)
     * @param to  (optional)
     * @param configurationIds  (optional)
     * @param testPlanIds  (optional)
     * @param userIds  (optional)
     * @param outcomes  (optional)
     * @param isAutomated  (optional)
     * @param testRunIds  (optional)
     * @param  Amount of items to be skipped (offset) (optional)
     * @param  Amount of items to be taken (limit) (optional)
     * @param  SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)
     * @param  Property name for searching (optional)
     * @param  Value for searching (optional)
     * @return ApiResponse&lt;List&lt;TestResultHistoryReportModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TestResultHistoryReportModel>> getWorkItemResultsWithHttpInfo(String autoTestId, OffsetDateTime from, OffsetDateTime to, List<UUID> configurationIds, List<UUID> testPlanIds, List<UUID> userIds, List<String> outcomes, Boolean isAutomated, List<UUID> testRunIds,  ,  ,  ,  ,  ) throws ApiException {
        com.squareup.okhttp.Call call = getWorkItemResultsValidateBeforeCall(autoTestId, from, to, configurationIds, testPlanIds, userIds, outcomes, isAutomated, testRunIds, , , , , , null, null);
        Type localVarReturnType = new TypeToken<List<TestResultHistoryReportModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * History of TestResults for AutoTest by Id or GlobalId (asynchronously)
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest internal (guid format) or global (integer format) identifier  &lt;br&gt;User sets getTestResultHistoryReportQuery (listed in the example)  &lt;br&gt;User runs method execution  &lt;br&gt;System search for test results using filters set by user in getTestResultHistoryReportQuery and autoTestId  &lt;br&gt;System returns the enumeration of test results
     * @param autoTestId autotest internal (guid format) or global  (integer format) identifier (required)
     * @param from  (optional)
     * @param to  (optional)
     * @param configurationIds  (optional)
     * @param testPlanIds  (optional)
     * @param userIds  (optional)
     * @param outcomes  (optional)
     * @param isAutomated  (optional)
     * @param testRunIds  (optional)
     * @param  Amount of items to be skipped (offset) (optional)
     * @param  Amount of items to be taken (limit) (optional)
     * @param  SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)
     * @param  Property name for searching (optional)
     * @param  Value for searching (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWorkItemResultsAsync(String autoTestId, OffsetDateTime from, OffsetDateTime to, List<UUID> configurationIds, List<UUID> testPlanIds, List<UUID> userIds, List<String> outcomes, Boolean isAutomated, List<UUID> testRunIds,  ,  ,  ,  ,  , final ApiCallback<List<TestResultHistoryReportModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWorkItemResultsValidateBeforeCall(autoTestId, from, to, configurationIds, testPlanIds, userIds, outcomes, isAutomated, testRunIds, , , , , , progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<TestResultHistoryReportModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWorkItemsLinkedToAutoTest
     * @param autoTestId Autotest internal (guid format) or global  (integer format) identifier (required)
     * @param isWorkItemDeleted Boolean flag which defines if search must include deleted worItems (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWorkItemsLinkedToAutoTestCall(String autoTestId, Boolean isWorkItemDeleted, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v2/autoTests/{autoTestId}/workItems"
            .replaceAll("\\{" + "autoTestId" + "\\}", apiClient.escapeString(autoTestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (isWorkItemDeleted != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isWorkItemDeleted", isWorkItemDeleted));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer or PrivateToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWorkItemsLinkedToAutoTestValidateBeforeCall(String autoTestId, Boolean isWorkItemDeleted, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'autoTestId' is set
        if (autoTestId == null) {
            throw new ApiException("Missing the required parameter 'autoTestId' when calling getWorkItemsLinkedToAutoTest(Async)");
        }
        
        com.squareup.okhttp.Call call = getWorkItemsLinkedToAutoTestCall(autoTestId, isWorkItemDeleted, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all WorkItems Ids linked to AutoTest by Id or GlobalId
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest internal (guid format) or global (integer format) identifier and runs method execution  &lt;br&gt;System finds the autotest by the identifier  &lt;br&gt;System finds all actual and not deleted WorkItems related to the found autotest  &lt;br&gt;System returns the enumeration of WorkItems
     * @param autoTestId Autotest internal (guid format) or global  (integer format) identifier (required)
     * @param isWorkItemDeleted Boolean flag which defines if search must include deleted worItems (optional, default to false)
     * @return List&lt;WorkItemIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<WorkItemIdModel> getWorkItemsLinkedToAutoTest(String autoTestId, Boolean isWorkItemDeleted) throws ApiException {
        ApiResponse<List<WorkItemIdModel>> resp = getWorkItemsLinkedToAutoTestWithHttpInfo(autoTestId, isWorkItemDeleted);
        return resp.getData();
    }

    /**
     * Get all WorkItems Ids linked to AutoTest by Id or GlobalId
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest internal (guid format) or global (integer format) identifier and runs method execution  &lt;br&gt;System finds the autotest by the identifier  &lt;br&gt;System finds all actual and not deleted WorkItems related to the found autotest  &lt;br&gt;System returns the enumeration of WorkItems
     * @param autoTestId Autotest internal (guid format) or global  (integer format) identifier (required)
     * @param isWorkItemDeleted Boolean flag which defines if search must include deleted worItems (optional, default to false)
     * @return ApiResponse&lt;List&lt;WorkItemIdModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<WorkItemIdModel>> getWorkItemsLinkedToAutoTestWithHttpInfo(String autoTestId, Boolean isWorkItemDeleted) throws ApiException {
        com.squareup.okhttp.Call call = getWorkItemsLinkedToAutoTestValidateBeforeCall(autoTestId, isWorkItemDeleted, null, null);
        Type localVarReturnType = new TypeToken<List<WorkItemIdModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all WorkItems Ids linked to AutoTest by Id or GlobalId (asynchronously)
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest internal (guid format) or global (integer format) identifier and runs method execution  &lt;br&gt;System finds the autotest by the identifier  &lt;br&gt;System finds all actual and not deleted WorkItems related to the found autotest  &lt;br&gt;System returns the enumeration of WorkItems
     * @param autoTestId Autotest internal (guid format) or global  (integer format) identifier (required)
     * @param isWorkItemDeleted Boolean flag which defines if search must include deleted worItems (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWorkItemsLinkedToAutoTestAsync(String autoTestId, Boolean isWorkItemDeleted, final ApiCallback<List<WorkItemIdModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWorkItemsLinkedToAutoTestValidateBeforeCall(autoTestId, isWorkItemDeleted, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<WorkItemIdModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for linkAutoTestToWorkItem
     * @param autoTestId Autotest internal (guid format) or global  (integer format) identifier (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call linkAutoTestToWorkItemCall(String autoTestId, WorkItemIdModel body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v2/autoTests/{autoTestId}/workItems"
            .replaceAll("\\{" + "autoTestId" + "\\}", apiClient.escapeString(autoTestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer or PrivateToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call linkAutoTestToWorkItemValidateBeforeCall(String autoTestId, WorkItemIdModel body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'autoTestId' is set
        if (autoTestId == null) {
            throw new ApiException("Missing the required parameter 'autoTestId' when calling linkAutoTestToWorkItem(Async)");
        }
        
        com.squareup.okhttp.Call call = linkAutoTestToWorkItemCall(autoTestId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Link AutoTest to WorkItem by Id or GlobalId
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest internal (guid format) or global (integer format) identifier  &lt;br&gt;User sets workitem internal (guid format) or global (integer format) identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System finds the autotest by the autotest identifier  &lt;br&gt;System finds the workitem by the workitem identifier  &lt;br&gt;System relates the workitem with the autotest and returns no content response
     * @param autoTestId Autotest internal (guid format) or global  (integer format) identifier (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void linkAutoTestToWorkItem(String autoTestId, WorkItemIdModel body) throws ApiException {
        linkAutoTestToWorkItemWithHttpInfo(autoTestId, body);
    }

    /**
     * Link AutoTest to WorkItem by Id or GlobalId
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest internal (guid format) or global (integer format) identifier  &lt;br&gt;User sets workitem internal (guid format) or global (integer format) identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System finds the autotest by the autotest identifier  &lt;br&gt;System finds the workitem by the workitem identifier  &lt;br&gt;System relates the workitem with the autotest and returns no content response
     * @param autoTestId Autotest internal (guid format) or global  (integer format) identifier (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> linkAutoTestToWorkItemWithHttpInfo(String autoTestId, WorkItemIdModel body) throws ApiException {
        com.squareup.okhttp.Call call = linkAutoTestToWorkItemValidateBeforeCall(autoTestId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Link AutoTest to WorkItem by Id or GlobalId (asynchronously)
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest internal (guid format) or global (integer format) identifier  &lt;br&gt;User sets workitem internal (guid format) or global (integer format) identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System finds the autotest by the autotest identifier  &lt;br&gt;System finds the workitem by the workitem identifier  &lt;br&gt;System relates the workitem with the autotest and returns no content response
     * @param autoTestId Autotest internal (guid format) or global  (integer format) identifier (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call linkAutoTestToWorkItemAsync(String autoTestId, WorkItemIdModel body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = linkAutoTestToWorkItemValidateBeforeCall(autoTestId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateAutoTest
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAutoTestCall(AutoTestPutModel body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v2/autoTests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer or PrivateToken" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAutoTestValidateBeforeCall(AutoTestPutModel body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = updateAutoTestCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update AutoTest
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest updated parameters values (listed in the example) and runs method execution  &lt;br&gt;System finds the autotest by the identifier  &lt;br&gt;System updates autotest parameters   &lt;br&gt;                      [Optional] If steps enumeration is set, system creates step items, relates them to autotest                      and deletes relations with current steps( if exist)                    &lt;br&gt;                      [Optional] If Setup enumeration is set, system creates setup items and relates them to autotest                      and deletes relations with current Setup items (if exist)                    &lt;br&gt;                      [Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest                      and deletes relations with current teardown items (if exist)                    &lt;br&gt;                      [Optional] If label enumeration is set, system creates labels and relates them to autotest                      and deletes relations with current Labels (if exist)                    &lt;br&gt;                      [Optional] If link enumeration is set, system creates links and relates them to autotest                      and deletes relations with current Links (if exist)                    &lt;br&gt;System updates autotest and returns no content response
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateAutoTest(AutoTestPutModel body) throws ApiException {
        updateAutoTestWithHttpInfo(body);
    }

    /**
     * Update AutoTest
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest updated parameters values (listed in the example) and runs method execution  &lt;br&gt;System finds the autotest by the identifier  &lt;br&gt;System updates autotest parameters   &lt;br&gt;                      [Optional] If steps enumeration is set, system creates step items, relates them to autotest                      and deletes relations with current steps( if exist)                    &lt;br&gt;                      [Optional] If Setup enumeration is set, system creates setup items and relates them to autotest                      and deletes relations with current Setup items (if exist)                    &lt;br&gt;                      [Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest                      and deletes relations with current teardown items (if exist)                    &lt;br&gt;                      [Optional] If label enumeration is set, system creates labels and relates them to autotest                      and deletes relations with current Labels (if exist)                    &lt;br&gt;                      [Optional] If link enumeration is set, system creates links and relates them to autotest                      and deletes relations with current Links (if exist)                    &lt;br&gt;System updates autotest and returns no content response
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateAutoTestWithHttpInfo(AutoTestPutModel body) throws ApiException {
        com.squareup.okhttp.Call call = updateAutoTestValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update AutoTest (asynchronously)
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest updated parameters values (listed in the example) and runs method execution  &lt;br&gt;System finds the autotest by the identifier  &lt;br&gt;System updates autotest parameters   &lt;br&gt;                      [Optional] If steps enumeration is set, system creates step items, relates them to autotest                      and deletes relations with current steps( if exist)                    &lt;br&gt;                      [Optional] If Setup enumeration is set, system creates setup items and relates them to autotest                      and deletes relations with current Setup items (if exist)                    &lt;br&gt;                      [Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest                      and deletes relations with current teardown items (if exist)                    &lt;br&gt;                      [Optional] If label enumeration is set, system creates labels and relates them to autotest                      and deletes relations with current Labels (if exist)                    &lt;br&gt;                      [Optional] If link enumeration is set, system creates links and relates them to autotest                      and deletes relations with current Links (if exist)                    &lt;br&gt;System updates autotest and returns no content response
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAutoTestAsync(AutoTestPutModel body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAutoTestValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateMultiple
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateMultipleCall(List<AutoTestPutModel> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v2/autoTests/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer or PrivateToken" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateMultipleValidateBeforeCall(List<AutoTestPutModel> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = updateMultipleCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update AutoTests multiple
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest updated parameters values (listed in the example) and runs method execution  &lt;br&gt;System finds the autotest by the identifier  &lt;br&gt;System updates autotest parameters   &lt;br&gt;                      [Optional] If steps enumeration is set, system creates step items, relates them to autotest                      and deletes relations with current steps( if exist)                    &lt;br&gt;                      [Optional] If Setup enumeration is set, system creates setup items and relates them to autotest                      and deletes relations with current Setup items (if exist)                    &lt;br&gt;                      [Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest                      and deletes relations with current teardown items (if exist)                    &lt;br&gt;                      [Optional] If label enumeration is set, system creates labels and relates them to autotest                      and deletes relations with current Labels (if exist)                    &lt;br&gt;                      [Optional] If link enumeration is set, system creates links and relates them to autotest                      and deletes relations with current Links (if exist)                    &lt;br&gt;System updates autotest and returns no content response
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateMultiple(List<AutoTestPutModel> body) throws ApiException {
        updateMultipleWithHttpInfo(body);
    }

    /**
     * Update AutoTests multiple
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest updated parameters values (listed in the example) and runs method execution  &lt;br&gt;System finds the autotest by the identifier  &lt;br&gt;System updates autotest parameters   &lt;br&gt;                      [Optional] If steps enumeration is set, system creates step items, relates them to autotest                      and deletes relations with current steps( if exist)                    &lt;br&gt;                      [Optional] If Setup enumeration is set, system creates setup items and relates them to autotest                      and deletes relations with current Setup items (if exist)                    &lt;br&gt;                      [Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest                      and deletes relations with current teardown items (if exist)                    &lt;br&gt;                      [Optional] If label enumeration is set, system creates labels and relates them to autotest                      and deletes relations with current Labels (if exist)                    &lt;br&gt;                      [Optional] If link enumeration is set, system creates links and relates them to autotest                      and deletes relations with current Links (if exist)                    &lt;br&gt;System updates autotest and returns no content response
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateMultipleWithHttpInfo(List<AutoTestPutModel> body) throws ApiException {
        com.squareup.okhttp.Call call = updateMultipleValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update AutoTests multiple (asynchronously)
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest updated parameters values (listed in the example) and runs method execution  &lt;br&gt;System finds the autotest by the identifier  &lt;br&gt;System updates autotest parameters   &lt;br&gt;                      [Optional] If steps enumeration is set, system creates step items, relates them to autotest                      and deletes relations with current steps( if exist)                    &lt;br&gt;                      [Optional] If Setup enumeration is set, system creates setup items and relates them to autotest                      and deletes relations with current Setup items (if exist)                    &lt;br&gt;                      [Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest                      and deletes relations with current teardown items (if exist)                    &lt;br&gt;                      [Optional] If label enumeration is set, system creates labels and relates them to autotest                      and deletes relations with current Labels (if exist)                    &lt;br&gt;                      [Optional] If link enumeration is set, system creates links and relates them to autotest                      and deletes relations with current Links (if exist)                    &lt;br&gt;System updates autotest and returns no content response
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateMultipleAsync(List<AutoTestPutModel> body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateMultipleValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
