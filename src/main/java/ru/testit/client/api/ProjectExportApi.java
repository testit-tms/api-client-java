/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.api;

import ru.testit.client.invoker.ApiCallback;
import ru.testit.client.invoker.ApiClient;
import ru.testit.client.invoker.ApiException;
import ru.testit.client.invoker.ApiResponse;
import ru.testit.client.invoker.Configuration;
import ru.testit.client.invoker.Pair;
import ru.testit.client.invoker.ProgressRequestBody;
import ru.testit.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import ru.testit.client.model.ExportProjectJsonRequest;
import ru.testit.client.model.ExportProjectWithTestPlansJsonRequest;
import java.io.File;
import ru.testit.client.model.ProblemDetails;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ProjectExportApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectExportApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectExportApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for export
     * @param projectId Specifies the ID of the project you want to export. (required)
     * @param includeAttachments Enables attachment export. (optional, default to false)
     * @param exportProjectJsonRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Update permission for project settings is required </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Root section was not found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call exportCall(String projectId, Boolean includeAttachments, ExportProjectJsonRequest exportProjectJsonRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = exportProjectJsonRequest;

        // create path and map variables
        String localVarPath = "/api/v2/projects/{projectId}/export"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeAttachments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeAttachments", includeAttachments));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer or PrivateToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportValidateBeforeCall(String projectId, Boolean includeAttachments, ExportProjectJsonRequest exportProjectJsonRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling export(Async)");
        }

        return exportCall(projectId, includeAttachments, exportProjectJsonRequest, _callback);

    }

    /**
     * Export project as JSON file
     * &lt;br&gt;This method exports the selected project or its part (sections, work items) to a &#x60;.json&#x60; file.  &lt;br&gt;In the request body, you can specify sections and test cases to be exported.  &lt;br&gt;Example of a request to export two sections and two test cases:  &lt;br&gt;    &#x60;&#x60;&#x60;              curl -X POST \&quot;http://{domain}.com/api/v2/projects/27a32ce6-d972-4ef8-bef5-51be4bf9e468/export\&quot; \\              -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: PrivateToken {token}\&quot; -H \&quot;Content-Type: application/json-patch+json\&quot; \\              -d \&quot;{\\\&quot;sectionIds\\\&quot;:[\\\&quot;3fa85f64-5717-4562-b3fc-2c963f66afa6\\\&quot;,\\\&quot;9fa85f64-5717-4562-b3fc-2c963f66a000\\\&quot;],\\\&quot;workItemIds\\\&quot;:[\\\&quot;3fa85f64-5717-4562-b3fc-2c963f66afa6\\\&quot;,\\\&quot;90085f64-5717-4562-b3fc-2c963f66a000\\\&quot;]}\&quot;              &#x60;&#x60;&#x60;    &lt;br&gt;In the response, you get:  &lt;br&gt;              - A &#x60;.zip&#x60; file with attachments and a.json file if you enable attachments export.&lt;br /&gt;              - A &#x60;.json&#x60; file with the project if you do not enable attachments export.              
     * @param projectId Specifies the ID of the project you want to export. (required)
     * @param includeAttachments Enables attachment export. (optional, default to false)
     * @param exportProjectJsonRequest  (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Update permission for project settings is required </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Root section was not found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public File export(String projectId, Boolean includeAttachments, ExportProjectJsonRequest exportProjectJsonRequest) throws ApiException {
        ApiResponse<File> localVarResp = exportWithHttpInfo(projectId, includeAttachments, exportProjectJsonRequest);
        return localVarResp.getData();
    }

    /**
     * Export project as JSON file
     * &lt;br&gt;This method exports the selected project or its part (sections, work items) to a &#x60;.json&#x60; file.  &lt;br&gt;In the request body, you can specify sections and test cases to be exported.  &lt;br&gt;Example of a request to export two sections and two test cases:  &lt;br&gt;    &#x60;&#x60;&#x60;              curl -X POST \&quot;http://{domain}.com/api/v2/projects/27a32ce6-d972-4ef8-bef5-51be4bf9e468/export\&quot; \\              -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: PrivateToken {token}\&quot; -H \&quot;Content-Type: application/json-patch+json\&quot; \\              -d \&quot;{\\\&quot;sectionIds\\\&quot;:[\\\&quot;3fa85f64-5717-4562-b3fc-2c963f66afa6\\\&quot;,\\\&quot;9fa85f64-5717-4562-b3fc-2c963f66a000\\\&quot;],\\\&quot;workItemIds\\\&quot;:[\\\&quot;3fa85f64-5717-4562-b3fc-2c963f66afa6\\\&quot;,\\\&quot;90085f64-5717-4562-b3fc-2c963f66a000\\\&quot;]}\&quot;              &#x60;&#x60;&#x60;    &lt;br&gt;In the response, you get:  &lt;br&gt;              - A &#x60;.zip&#x60; file with attachments and a.json file if you enable attachments export.&lt;br /&gt;              - A &#x60;.json&#x60; file with the project if you do not enable attachments export.              
     * @param projectId Specifies the ID of the project you want to export. (required)
     * @param includeAttachments Enables attachment export. (optional, default to false)
     * @param exportProjectJsonRequest  (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Update permission for project settings is required </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Root section was not found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<File> exportWithHttpInfo(String projectId, Boolean includeAttachments, ExportProjectJsonRequest exportProjectJsonRequest) throws ApiException {
        okhttp3.Call localVarCall = exportValidateBeforeCall(projectId, includeAttachments, exportProjectJsonRequest, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export project as JSON file (asynchronously)
     * &lt;br&gt;This method exports the selected project or its part (sections, work items) to a &#x60;.json&#x60; file.  &lt;br&gt;In the request body, you can specify sections and test cases to be exported.  &lt;br&gt;Example of a request to export two sections and two test cases:  &lt;br&gt;    &#x60;&#x60;&#x60;              curl -X POST \&quot;http://{domain}.com/api/v2/projects/27a32ce6-d972-4ef8-bef5-51be4bf9e468/export\&quot; \\              -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: PrivateToken {token}\&quot; -H \&quot;Content-Type: application/json-patch+json\&quot; \\              -d \&quot;{\\\&quot;sectionIds\\\&quot;:[\\\&quot;3fa85f64-5717-4562-b3fc-2c963f66afa6\\\&quot;,\\\&quot;9fa85f64-5717-4562-b3fc-2c963f66a000\\\&quot;],\\\&quot;workItemIds\\\&quot;:[\\\&quot;3fa85f64-5717-4562-b3fc-2c963f66afa6\\\&quot;,\\\&quot;90085f64-5717-4562-b3fc-2c963f66a000\\\&quot;]}\&quot;              &#x60;&#x60;&#x60;    &lt;br&gt;In the response, you get:  &lt;br&gt;              - A &#x60;.zip&#x60; file with attachments and a.json file if you enable attachments export.&lt;br /&gt;              - A &#x60;.json&#x60; file with the project if you do not enable attachments export.              
     * @param projectId Specifies the ID of the project you want to export. (required)
     * @param includeAttachments Enables attachment export. (optional, default to false)
     * @param exportProjectJsonRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Update permission for project settings is required </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Root section was not found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call exportAsync(String projectId, Boolean includeAttachments, ExportProjectJsonRequest exportProjectJsonRequest, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportValidateBeforeCall(projectId, includeAttachments, exportProjectJsonRequest, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportProjectJson
     * @param projectId Project internal (UUID) or global (integer) identifier (required)
     * @param timeZoneOffsetInMinutes  (optional)
     * @param exportProjectJsonRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Update permission for project settings is required </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportProjectJsonCall(String projectId, Long timeZoneOffsetInMinutes, ExportProjectJsonRequest exportProjectJsonRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = exportProjectJsonRequest;

        // create path and map variables
        String localVarPath = "/api/v2/projects/{projectId}/export/json"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeZoneOffsetInMinutes != null) {
            localVarHeaderParams.put("time-Zone-Offset-In-Minutes", localVarApiClient.parameterToString(timeZoneOffsetInMinutes));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer or PrivateToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportProjectJsonValidateBeforeCall(String projectId, Long timeZoneOffsetInMinutes, ExportProjectJsonRequest exportProjectJsonRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling exportProjectJson(Async)");
        }

        return exportProjectJsonCall(projectId, timeZoneOffsetInMinutes, exportProjectJsonRequest, _callback);

    }

    /**
     * Export project as JSON file in background job
     * 
     * @param projectId Project internal (UUID) or global (integer) identifier (required)
     * @param timeZoneOffsetInMinutes  (optional)
     * @param exportProjectJsonRequest  (optional)
     * @return UUID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Update permission for project settings is required </td><td>  -  </td></tr>
     </table>
     */
    public UUID exportProjectJson(String projectId, Long timeZoneOffsetInMinutes, ExportProjectJsonRequest exportProjectJsonRequest) throws ApiException {
        ApiResponse<UUID> localVarResp = exportProjectJsonWithHttpInfo(projectId, timeZoneOffsetInMinutes, exportProjectJsonRequest);
        return localVarResp.getData();
    }

    /**
     * Export project as JSON file in background job
     * 
     * @param projectId Project internal (UUID) or global (integer) identifier (required)
     * @param timeZoneOffsetInMinutes  (optional)
     * @param exportProjectJsonRequest  (optional)
     * @return ApiResponse&lt;UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Update permission for project settings is required </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UUID> exportProjectJsonWithHttpInfo(String projectId, Long timeZoneOffsetInMinutes, ExportProjectJsonRequest exportProjectJsonRequest) throws ApiException {
        okhttp3.Call localVarCall = exportProjectJsonValidateBeforeCall(projectId, timeZoneOffsetInMinutes, exportProjectJsonRequest, null);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export project as JSON file in background job (asynchronously)
     * 
     * @param projectId Project internal (UUID) or global (integer) identifier (required)
     * @param timeZoneOffsetInMinutes  (optional)
     * @param exportProjectJsonRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Update permission for project settings is required </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportProjectJsonAsync(String projectId, Long timeZoneOffsetInMinutes, ExportProjectJsonRequest exportProjectJsonRequest, final ApiCallback<UUID> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportProjectJsonValidateBeforeCall(projectId, timeZoneOffsetInMinutes, exportProjectJsonRequest, _callback);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportProjectWithTestPlansJson
     * @param projectId Project internal (UUID) or global (integer) identifier (required)
     * @param timeZoneOffsetInMinutes  (optional)
     * @param exportProjectWithTestPlansJsonRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Update permission for project settings is required </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportProjectWithTestPlansJsonCall(String projectId, Long timeZoneOffsetInMinutes, ExportProjectWithTestPlansJsonRequest exportProjectWithTestPlansJsonRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = exportProjectWithTestPlansJsonRequest;

        // create path and map variables
        String localVarPath = "/api/v2/projects/{projectId}/export/testPlans/json"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeZoneOffsetInMinutes != null) {
            localVarHeaderParams.put("time-Zone-Offset-In-Minutes", localVarApiClient.parameterToString(timeZoneOffsetInMinutes));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer or PrivateToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportProjectWithTestPlansJsonValidateBeforeCall(String projectId, Long timeZoneOffsetInMinutes, ExportProjectWithTestPlansJsonRequest exportProjectWithTestPlansJsonRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling exportProjectWithTestPlansJson(Async)");
        }

        return exportProjectWithTestPlansJsonCall(projectId, timeZoneOffsetInMinutes, exportProjectWithTestPlansJsonRequest, _callback);

    }

    /**
     * Export project as JSON file with test plans in background job
     * 
     * @param projectId Project internal (UUID) or global (integer) identifier (required)
     * @param timeZoneOffsetInMinutes  (optional)
     * @param exportProjectWithTestPlansJsonRequest  (optional)
     * @return UUID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Update permission for project settings is required </td><td>  -  </td></tr>
     </table>
     */
    public UUID exportProjectWithTestPlansJson(String projectId, Long timeZoneOffsetInMinutes, ExportProjectWithTestPlansJsonRequest exportProjectWithTestPlansJsonRequest) throws ApiException {
        ApiResponse<UUID> localVarResp = exportProjectWithTestPlansJsonWithHttpInfo(projectId, timeZoneOffsetInMinutes, exportProjectWithTestPlansJsonRequest);
        return localVarResp.getData();
    }

    /**
     * Export project as JSON file with test plans in background job
     * 
     * @param projectId Project internal (UUID) or global (integer) identifier (required)
     * @param timeZoneOffsetInMinutes  (optional)
     * @param exportProjectWithTestPlansJsonRequest  (optional)
     * @return ApiResponse&lt;UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Update permission for project settings is required </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UUID> exportProjectWithTestPlansJsonWithHttpInfo(String projectId, Long timeZoneOffsetInMinutes, ExportProjectWithTestPlansJsonRequest exportProjectWithTestPlansJsonRequest) throws ApiException {
        okhttp3.Call localVarCall = exportProjectWithTestPlansJsonValidateBeforeCall(projectId, timeZoneOffsetInMinutes, exportProjectWithTestPlansJsonRequest, null);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export project as JSON file with test plans in background job (asynchronously)
     * 
     * @param projectId Project internal (UUID) or global (integer) identifier (required)
     * @param timeZoneOffsetInMinutes  (optional)
     * @param exportProjectWithTestPlansJsonRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Update permission for project settings is required </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportProjectWithTestPlansJsonAsync(String projectId, Long timeZoneOffsetInMinutes, ExportProjectWithTestPlansJsonRequest exportProjectWithTestPlansJsonRequest, final ApiCallback<UUID> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportProjectWithTestPlansJsonValidateBeforeCall(projectId, timeZoneOffsetInMinutes, exportProjectWithTestPlansJsonRequest, _callback);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportProjectWithTestPlansZip
     * @param projectId Project internal (UUID) or global (integer) identifier (required)
     * @param timeZoneOffsetInMinutes  (optional)
     * @param exportProjectWithTestPlansJsonRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Update permission for project settings is required </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportProjectWithTestPlansZipCall(String projectId, Long timeZoneOffsetInMinutes, ExportProjectWithTestPlansJsonRequest exportProjectWithTestPlansJsonRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = exportProjectWithTestPlansJsonRequest;

        // create path and map variables
        String localVarPath = "/api/v2/projects/{projectId}/export/testPlans/zip"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeZoneOffsetInMinutes != null) {
            localVarHeaderParams.put("time-Zone-Offset-In-Minutes", localVarApiClient.parameterToString(timeZoneOffsetInMinutes));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer or PrivateToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportProjectWithTestPlansZipValidateBeforeCall(String projectId, Long timeZoneOffsetInMinutes, ExportProjectWithTestPlansJsonRequest exportProjectWithTestPlansJsonRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling exportProjectWithTestPlansZip(Async)");
        }

        return exportProjectWithTestPlansZipCall(projectId, timeZoneOffsetInMinutes, exportProjectWithTestPlansJsonRequest, _callback);

    }

    /**
     * Export project as Zip file with test plans in background job
     * 
     * @param projectId Project internal (UUID) or global (integer) identifier (required)
     * @param timeZoneOffsetInMinutes  (optional)
     * @param exportProjectWithTestPlansJsonRequest  (optional)
     * @return UUID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Update permission for project settings is required </td><td>  -  </td></tr>
     </table>
     */
    public UUID exportProjectWithTestPlansZip(String projectId, Long timeZoneOffsetInMinutes, ExportProjectWithTestPlansJsonRequest exportProjectWithTestPlansJsonRequest) throws ApiException {
        ApiResponse<UUID> localVarResp = exportProjectWithTestPlansZipWithHttpInfo(projectId, timeZoneOffsetInMinutes, exportProjectWithTestPlansJsonRequest);
        return localVarResp.getData();
    }

    /**
     * Export project as Zip file with test plans in background job
     * 
     * @param projectId Project internal (UUID) or global (integer) identifier (required)
     * @param timeZoneOffsetInMinutes  (optional)
     * @param exportProjectWithTestPlansJsonRequest  (optional)
     * @return ApiResponse&lt;UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Update permission for project settings is required </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UUID> exportProjectWithTestPlansZipWithHttpInfo(String projectId, Long timeZoneOffsetInMinutes, ExportProjectWithTestPlansJsonRequest exportProjectWithTestPlansJsonRequest) throws ApiException {
        okhttp3.Call localVarCall = exportProjectWithTestPlansZipValidateBeforeCall(projectId, timeZoneOffsetInMinutes, exportProjectWithTestPlansJsonRequest, null);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export project as Zip file with test plans in background job (asynchronously)
     * 
     * @param projectId Project internal (UUID) or global (integer) identifier (required)
     * @param timeZoneOffsetInMinutes  (optional)
     * @param exportProjectWithTestPlansJsonRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Update permission for project settings is required </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportProjectWithTestPlansZipAsync(String projectId, Long timeZoneOffsetInMinutes, ExportProjectWithTestPlansJsonRequest exportProjectWithTestPlansJsonRequest, final ApiCallback<UUID> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportProjectWithTestPlansZipValidateBeforeCall(projectId, timeZoneOffsetInMinutes, exportProjectWithTestPlansJsonRequest, _callback);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportProjectZip
     * @param projectId Project internal (UUID) or global (integer) identifier (required)
     * @param timeZoneOffsetInMinutes  (optional)
     * @param exportProjectJsonRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Update permission for project settings is required </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportProjectZipCall(String projectId, Long timeZoneOffsetInMinutes, ExportProjectJsonRequest exportProjectJsonRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = exportProjectJsonRequest;

        // create path and map variables
        String localVarPath = "/api/v2/projects/{projectId}/export/zip"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeZoneOffsetInMinutes != null) {
            localVarHeaderParams.put("time-Zone-Offset-In-Minutes", localVarApiClient.parameterToString(timeZoneOffsetInMinutes));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer or PrivateToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportProjectZipValidateBeforeCall(String projectId, Long timeZoneOffsetInMinutes, ExportProjectJsonRequest exportProjectJsonRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling exportProjectZip(Async)");
        }

        return exportProjectZipCall(projectId, timeZoneOffsetInMinutes, exportProjectJsonRequest, _callback);

    }

    /**
     * Export project as Zip file in background job
     * 
     * @param projectId Project internal (UUID) or global (integer) identifier (required)
     * @param timeZoneOffsetInMinutes  (optional)
     * @param exportProjectJsonRequest  (optional)
     * @return UUID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Update permission for project settings is required </td><td>  -  </td></tr>
     </table>
     */
    public UUID exportProjectZip(String projectId, Long timeZoneOffsetInMinutes, ExportProjectJsonRequest exportProjectJsonRequest) throws ApiException {
        ApiResponse<UUID> localVarResp = exportProjectZipWithHttpInfo(projectId, timeZoneOffsetInMinutes, exportProjectJsonRequest);
        return localVarResp.getData();
    }

    /**
     * Export project as Zip file in background job
     * 
     * @param projectId Project internal (UUID) or global (integer) identifier (required)
     * @param timeZoneOffsetInMinutes  (optional)
     * @param exportProjectJsonRequest  (optional)
     * @return ApiResponse&lt;UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Update permission for project settings is required </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UUID> exportProjectZipWithHttpInfo(String projectId, Long timeZoneOffsetInMinutes, ExportProjectJsonRequest exportProjectJsonRequest) throws ApiException {
        okhttp3.Call localVarCall = exportProjectZipValidateBeforeCall(projectId, timeZoneOffsetInMinutes, exportProjectJsonRequest, null);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export project as Zip file in background job (asynchronously)
     * 
     * @param projectId Project internal (UUID) or global (integer) identifier (required)
     * @param timeZoneOffsetInMinutes  (optional)
     * @param exportProjectJsonRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Update permission for project settings is required </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportProjectZipAsync(String projectId, Long timeZoneOffsetInMinutes, ExportProjectJsonRequest exportProjectJsonRequest, final ApiCallback<UUID> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportProjectZipValidateBeforeCall(projectId, timeZoneOffsetInMinutes, exportProjectJsonRequest, _callback);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
