/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.api;

import ru.testit.client.invoker.ApiCallback;
import ru.testit.client.invoker.ApiClient;
import ru.testit.client.invoker.ApiException;
import ru.testit.client.invoker.ApiResponse;
import ru.testit.client.invoker.Configuration;
import ru.testit.client.invoker.Pair;
import ru.testit.client.invoker.ProgressRequestBody;
import ru.testit.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import ru.testit.client.model.ProblemDetails;
import ru.testit.client.model.SearchWebhooksQueryModel;
import java.util.UUID;
import ru.testit.client.model.WebHookEventType;
import ru.testit.client.model.WebHookModel;
import ru.testit.client.model.WebHookPostModel;
import ru.testit.client.model.WebHookTestModel;
import ru.testit.client.model.WebhookResponse;
import ru.testit.client.model.WebhookVariablesType;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WebhooksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WebhooksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WebhooksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiV2WebhooksGet
     * @param projectId Project unique ID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Read permission for requested project is required </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2WebhooksGetCall(UUID projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/webhooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (projectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectId", projectId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer or PrivateToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2WebhooksGetValidateBeforeCall(UUID projectId, final ApiCallback _callback) throws ApiException {
        return apiV2WebhooksGetCall(projectId, _callback);

    }

    /**
     * Get all webhooks
     * 
     * @param projectId Project unique ID (optional)
     * @return List&lt;WebHookModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Read permission for requested project is required </td><td>  -  </td></tr>
     </table>
     */
    public List<WebHookModel> apiV2WebhooksGet(UUID projectId) throws ApiException {
        ApiResponse<List<WebHookModel>> localVarResp = apiV2WebhooksGetWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * Get all webhooks
     * 
     * @param projectId Project unique ID (optional)
     * @return ApiResponse&lt;List&lt;WebHookModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Read permission for requested project is required </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WebHookModel>> apiV2WebhooksGetWithHttpInfo(UUID projectId) throws ApiException {
        okhttp3.Call localVarCall = apiV2WebhooksGetValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<List<WebHookModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all webhooks (asynchronously)
     * 
     * @param projectId Project unique ID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Read permission for requested project is required </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2WebhooksGetAsync(UUID projectId, final ApiCallback<List<WebHookModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2WebhooksGetValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<List<WebHookModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2WebhooksIdDelete
     * @param id Webhook unique ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Delete permission for webhooks is required </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2WebhooksIdDeleteCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/webhooks/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer or PrivateToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2WebhooksIdDeleteValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV2WebhooksIdDelete(Async)");
        }

        return apiV2WebhooksIdDeleteCall(id, _callback);

    }

    /**
     * Delete webhook by ID
     * 
     * @param id Webhook unique ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Delete permission for webhooks is required </td><td>  -  </td></tr>
     </table>
     */
    public void apiV2WebhooksIdDelete(UUID id) throws ApiException {
        apiV2WebhooksIdDeleteWithHttpInfo(id);
    }

    /**
     * Delete webhook by ID
     * 
     * @param id Webhook unique ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Delete permission for webhooks is required </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV2WebhooksIdDeleteWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = apiV2WebhooksIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete webhook by ID (asynchronously)
     * 
     * @param id Webhook unique ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Delete permission for webhooks is required </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2WebhooksIdDeleteAsync(UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2WebhooksIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2WebhooksIdGet
     * @param id Webhook unique ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Update permission for webhooks is required </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2WebhooksIdGetCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/webhooks/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer or PrivateToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2WebhooksIdGetValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV2WebhooksIdGet(Async)");
        }

        return apiV2WebhooksIdGetCall(id, _callback);

    }

    /**
     * Get webhook by ID
     * 
     * @param id Webhook unique ID (required)
     * @return WebHookModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Update permission for webhooks is required </td><td>  -  </td></tr>
     </table>
     */
    public WebHookModel apiV2WebhooksIdGet(UUID id) throws ApiException {
        ApiResponse<WebHookModel> localVarResp = apiV2WebhooksIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get webhook by ID
     * 
     * @param id Webhook unique ID (required)
     * @return ApiResponse&lt;WebHookModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Update permission for webhooks is required </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebHookModel> apiV2WebhooksIdGetWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = apiV2WebhooksIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<WebHookModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get webhook by ID (asynchronously)
     * 
     * @param id Webhook unique ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Update permission for webhooks is required </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2WebhooksIdGetAsync(UUID id, final ApiCallback<WebHookModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2WebhooksIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<WebHookModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2WebhooksIdPut
     * @param id Webhook unique ID (required)
     * @param webHookPostModel  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Update permission for webhooks is required </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2WebhooksIdPutCall(UUID id, WebHookPostModel webHookPostModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webHookPostModel;

        // create path and map variables
        String localVarPath = "/api/v2/webhooks/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer or PrivateToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2WebhooksIdPutValidateBeforeCall(UUID id, WebHookPostModel webHookPostModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV2WebhooksIdPut(Async)");
        }

        return apiV2WebhooksIdPutCall(id, webHookPostModel, _callback);

    }

    /**
     * Edit webhook by ID
     * 
     * @param id Webhook unique ID (required)
     * @param webHookPostModel  (optional)
     * @return WebHookModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Update permission for webhooks is required </td><td>  -  </td></tr>
     </table>
     */
    public WebHookModel apiV2WebhooksIdPut(UUID id, WebHookPostModel webHookPostModel) throws ApiException {
        ApiResponse<WebHookModel> localVarResp = apiV2WebhooksIdPutWithHttpInfo(id, webHookPostModel);
        return localVarResp.getData();
    }

    /**
     * Edit webhook by ID
     * 
     * @param id Webhook unique ID (required)
     * @param webHookPostModel  (optional)
     * @return ApiResponse&lt;WebHookModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Update permission for webhooks is required </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebHookModel> apiV2WebhooksIdPutWithHttpInfo(UUID id, WebHookPostModel webHookPostModel) throws ApiException {
        okhttp3.Call localVarCall = apiV2WebhooksIdPutValidateBeforeCall(id, webHookPostModel, null);
        Type localVarReturnType = new TypeToken<WebHookModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit webhook by ID (asynchronously)
     * 
     * @param id Webhook unique ID (required)
     * @param webHookPostModel  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Update permission for webhooks is required </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2WebhooksIdPutAsync(UUID id, WebHookPostModel webHookPostModel, final ApiCallback<WebHookModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2WebhooksIdPutValidateBeforeCall(id, webHookPostModel, _callback);
        Type localVarReturnType = new TypeToken<WebHookModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2WebhooksPost
     * @param webHookPostModel  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Update permission for webhooks is required </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2WebhooksPostCall(WebHookPostModel webHookPostModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webHookPostModel;

        // create path and map variables
        String localVarPath = "/api/v2/webhooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer or PrivateToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2WebhooksPostValidateBeforeCall(WebHookPostModel webHookPostModel, final ApiCallback _callback) throws ApiException {
        return apiV2WebhooksPostCall(webHookPostModel, _callback);

    }

    /**
     * Create webhook
     * 
     * @param webHookPostModel  (optional)
     * @return WebHookModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Update permission for webhooks is required </td><td>  -  </td></tr>
     </table>
     */
    public WebHookModel apiV2WebhooksPost(WebHookPostModel webHookPostModel) throws ApiException {
        ApiResponse<WebHookModel> localVarResp = apiV2WebhooksPostWithHttpInfo(webHookPostModel);
        return localVarResp.getData();
    }

    /**
     * Create webhook
     * 
     * @param webHookPostModel  (optional)
     * @return ApiResponse&lt;WebHookModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Update permission for webhooks is required </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebHookModel> apiV2WebhooksPostWithHttpInfo(WebHookPostModel webHookPostModel) throws ApiException {
        okhttp3.Call localVarCall = apiV2WebhooksPostValidateBeforeCall(webHookPostModel, null);
        Type localVarReturnType = new TypeToken<WebHookModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create webhook (asynchronously)
     * 
     * @param webHookPostModel  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Update permission for webhooks is required </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2WebhooksPostAsync(WebHookPostModel webHookPostModel, final ApiCallback<WebHookModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2WebhooksPostValidateBeforeCall(webHookPostModel, _callback);
        Type localVarReturnType = new TypeToken<WebHookModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2WebhooksSearchPost
     * @param skip Amount of items to be skipped (offset) (optional)
     * @param take Amount of items to be taken (limit) (optional)
     * @param orderBy SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)
     * @param searchField Property name for searching (optional)
     * @param searchValue Value for searching (optional)
     * @param searchWebhooksQueryModel  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Pagination-Skip - Skipped amount of items <br>  * Pagination-Take - Taken items <br>  * Pagination-Pages - Expected number of pages <br>  * Pagination-Total-Items - Total count of items <br>  </td></tr>
        <tr><td> 403 </td><td> Read permission for all requested projects is required </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2WebhooksSearchPostCall(Integer skip, Integer take, String orderBy, String searchField, String searchValue, SearchWebhooksQueryModel searchWebhooksQueryModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchWebhooksQueryModel;

        // create path and map variables
        String localVarPath = "/api/v2/webhooks/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Skip", skip));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Take", take));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OrderBy", orderBy));
        }

        if (searchField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SearchField", searchField));
        }

        if (searchValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SearchValue", searchValue));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer or PrivateToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2WebhooksSearchPostValidateBeforeCall(Integer skip, Integer take, String orderBy, String searchField, String searchValue, SearchWebhooksQueryModel searchWebhooksQueryModel, final ApiCallback _callback) throws ApiException {
        return apiV2WebhooksSearchPostCall(skip, take, orderBy, searchField, searchValue, searchWebhooksQueryModel, _callback);

    }

    /**
     * Search for webhooks
     * 
     * @param skip Amount of items to be skipped (offset) (optional)
     * @param take Amount of items to be taken (limit) (optional)
     * @param orderBy SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)
     * @param searchField Property name for searching (optional)
     * @param searchValue Value for searching (optional)
     * @param searchWebhooksQueryModel  (optional)
     * @return List&lt;WebHookModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Pagination-Skip - Skipped amount of items <br>  * Pagination-Take - Taken items <br>  * Pagination-Pages - Expected number of pages <br>  * Pagination-Total-Items - Total count of items <br>  </td></tr>
        <tr><td> 403 </td><td> Read permission for all requested projects is required </td><td>  -  </td></tr>
     </table>
     */
    public List<WebHookModel> apiV2WebhooksSearchPost(Integer skip, Integer take, String orderBy, String searchField, String searchValue, SearchWebhooksQueryModel searchWebhooksQueryModel) throws ApiException {
        ApiResponse<List<WebHookModel>> localVarResp = apiV2WebhooksSearchPostWithHttpInfo(skip, take, orderBy, searchField, searchValue, searchWebhooksQueryModel);
        return localVarResp.getData();
    }

    /**
     * Search for webhooks
     * 
     * @param skip Amount of items to be skipped (offset) (optional)
     * @param take Amount of items to be taken (limit) (optional)
     * @param orderBy SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)
     * @param searchField Property name for searching (optional)
     * @param searchValue Value for searching (optional)
     * @param searchWebhooksQueryModel  (optional)
     * @return ApiResponse&lt;List&lt;WebHookModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Pagination-Skip - Skipped amount of items <br>  * Pagination-Take - Taken items <br>  * Pagination-Pages - Expected number of pages <br>  * Pagination-Total-Items - Total count of items <br>  </td></tr>
        <tr><td> 403 </td><td> Read permission for all requested projects is required </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WebHookModel>> apiV2WebhooksSearchPostWithHttpInfo(Integer skip, Integer take, String orderBy, String searchField, String searchValue, SearchWebhooksQueryModel searchWebhooksQueryModel) throws ApiException {
        okhttp3.Call localVarCall = apiV2WebhooksSearchPostValidateBeforeCall(skip, take, orderBy, searchField, searchValue, searchWebhooksQueryModel, null);
        Type localVarReturnType = new TypeToken<List<WebHookModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for webhooks (asynchronously)
     * 
     * @param skip Amount of items to be skipped (offset) (optional)
     * @param take Amount of items to be taken (limit) (optional)
     * @param orderBy SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)
     * @param searchField Property name for searching (optional)
     * @param searchValue Value for searching (optional)
     * @param searchWebhooksQueryModel  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Pagination-Skip - Skipped amount of items <br>  * Pagination-Take - Taken items <br>  * Pagination-Pages - Expected number of pages <br>  * Pagination-Total-Items - Total count of items <br>  </td></tr>
        <tr><td> 403 </td><td> Read permission for all requested projects is required </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2WebhooksSearchPostAsync(Integer skip, Integer take, String orderBy, String searchField, String searchValue, SearchWebhooksQueryModel searchWebhooksQueryModel, final ApiCallback<List<WebHookModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2WebhooksSearchPostValidateBeforeCall(skip, take, orderBy, searchField, searchValue, searchWebhooksQueryModel, _callback);
        Type localVarReturnType = new TypeToken<List<WebHookModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2WebhooksSpecialVariablesGet
     * @param eventType Webhook event type (optional)
     * @param variablesType  (optional, default to VariablesForUrl)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2WebhooksSpecialVariablesGetCall(WebHookEventType eventType, WebhookVariablesType variablesType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/webhooks/specialVariables";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eventType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventType", eventType));
        }

        if (variablesType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("variablesType", variablesType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer or PrivateToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2WebhooksSpecialVariablesGetValidateBeforeCall(WebHookEventType eventType, WebhookVariablesType variablesType, final ApiCallback _callback) throws ApiException {
        return apiV2WebhooksSpecialVariablesGetCall(eventType, variablesType, _callback);

    }

    /**
     * Get special variables for webhook event type
     * 
     * @param eventType Webhook event type (optional)
     * @param variablesType  (optional, default to VariablesForUrl)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<String> apiV2WebhooksSpecialVariablesGet(WebHookEventType eventType, WebhookVariablesType variablesType) throws ApiException {
        ApiResponse<List<String>> localVarResp = apiV2WebhooksSpecialVariablesGetWithHttpInfo(eventType, variablesType);
        return localVarResp.getData();
    }

    /**
     * Get special variables for webhook event type
     * 
     * @param eventType Webhook event type (optional)
     * @param variablesType  (optional, default to VariablesForUrl)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> apiV2WebhooksSpecialVariablesGetWithHttpInfo(WebHookEventType eventType, WebhookVariablesType variablesType) throws ApiException {
        okhttp3.Call localVarCall = apiV2WebhooksSpecialVariablesGetValidateBeforeCall(eventType, variablesType, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get special variables for webhook event type (asynchronously)
     * 
     * @param eventType Webhook event type (optional)
     * @param variablesType  (optional, default to VariablesForUrl)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2WebhooksSpecialVariablesGetAsync(WebHookEventType eventType, WebhookVariablesType variablesType, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2WebhooksSpecialVariablesGetValidateBeforeCall(eventType, variablesType, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2WebhooksTestPost
     * @param webHookTestModel  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Update permission for webhooks is required </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2WebhooksTestPostCall(WebHookTestModel webHookTestModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webHookTestModel;

        // create path and map variables
        String localVarPath = "/api/v2/webhooks/test";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer or PrivateToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2WebhooksTestPostValidateBeforeCall(WebHookTestModel webHookTestModel, final ApiCallback _callback) throws ApiException {
        return apiV2WebhooksTestPostCall(webHookTestModel, _callback);

    }

    /**
     * Test webhook&#39;s url
     * 
     * @param webHookTestModel  (optional)
     * @return WebhookResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Update permission for webhooks is required </td><td>  -  </td></tr>
     </table>
     */
    public WebhookResponse apiV2WebhooksTestPost(WebHookTestModel webHookTestModel) throws ApiException {
        ApiResponse<WebhookResponse> localVarResp = apiV2WebhooksTestPostWithHttpInfo(webHookTestModel);
        return localVarResp.getData();
    }

    /**
     * Test webhook&#39;s url
     * 
     * @param webHookTestModel  (optional)
     * @return ApiResponse&lt;WebhookResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Update permission for webhooks is required </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebhookResponse> apiV2WebhooksTestPostWithHttpInfo(WebHookTestModel webHookTestModel) throws ApiException {
        okhttp3.Call localVarCall = apiV2WebhooksTestPostValidateBeforeCall(webHookTestModel, null);
        Type localVarReturnType = new TypeToken<WebhookResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Test webhook&#39;s url (asynchronously)
     * 
     * @param webHookTestModel  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Update permission for webhooks is required </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2WebhooksTestPostAsync(WebHookTestModel webHookTestModel, final ApiCallback<WebhookResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2WebhooksTestPostValidateBeforeCall(webHookTestModel, _callback);
        Type localVarReturnType = new TypeToken<WebhookResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
