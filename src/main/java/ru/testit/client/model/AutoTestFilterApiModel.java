/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import ru.testit.client.model.AutotestResultOutcome;
import ru.testit.client.model.DateTimeRangeSelectorModel;
import ru.testit.client.model.Int64RangeSelectorModel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import ru.testit.client.invoker.JSON;

/**
 * AutoTestFilterApiModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class AutoTestFilterApiModel {
  public static final String SERIALIZED_NAME_PROJECT_IDS = "projectIds";
  @SerializedName(SERIALIZED_NAME_PROJECT_IDS)
  @javax.annotation.Nullable
  private Set<UUID> projectIds;

  public static final String SERIALIZED_NAME_EXTERNAL_IDS = "externalIds";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_IDS)
  @javax.annotation.Nullable
  private Set<String> externalIds;

  public static final String SERIALIZED_NAME_GLOBAL_IDS = "globalIds";
  @SerializedName(SERIALIZED_NAME_GLOBAL_IDS)
  @javax.annotation.Nullable
  private Set<Long> globalIds;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_IS_FLAKY = "isFlaky";
  @SerializedName(SERIALIZED_NAME_IS_FLAKY)
  @javax.annotation.Nullable
  private Boolean isFlaky;

  public static final String SERIALIZED_NAME_MUST_BE_APPROVED = "mustBeApproved";
  @SerializedName(SERIALIZED_NAME_MUST_BE_APPROVED)
  @javax.annotation.Nullable
  private Boolean mustBeApproved;

  public static final String SERIALIZED_NAME_STABILITY_PERCENTAGE = "stabilityPercentage";
  @SerializedName(SERIALIZED_NAME_STABILITY_PERCENTAGE)
  @javax.annotation.Nullable
  private Int64RangeSelectorModel stabilityPercentage;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  @javax.annotation.Nullable
  private DateTimeRangeSelectorModel createdDate;

  public static final String SERIALIZED_NAME_CREATED_BY_IDS = "createdByIds";
  @SerializedName(SERIALIZED_NAME_CREATED_BY_IDS)
  @javax.annotation.Nullable
  private Set<UUID> createdByIds;

  public static final String SERIALIZED_NAME_MODIFIED_DATE = "modifiedDate";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE)
  @javax.annotation.Nullable
  private DateTimeRangeSelectorModel modifiedDate;

  public static final String SERIALIZED_NAME_MODIFIED_BY_IDS = "modifiedByIds";
  @SerializedName(SERIALIZED_NAME_MODIFIED_BY_IDS)
  @javax.annotation.Nullable
  private Set<UUID> modifiedByIds;

  public static final String SERIALIZED_NAME_IS_DELETED = "isDeleted";
  @SerializedName(SERIALIZED_NAME_IS_DELETED)
  @javax.annotation.Nullable
  private Boolean isDeleted;

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  @javax.annotation.Nullable
  private String namespace;

  public static final String SERIALIZED_NAME_IS_EMPTY_NAMESPACE = "isEmptyNamespace";
  @SerializedName(SERIALIZED_NAME_IS_EMPTY_NAMESPACE)
  @javax.annotation.Nullable
  private Boolean isEmptyNamespace;

  public static final String SERIALIZED_NAME_CLASS_NAME = "className";
  @SerializedName(SERIALIZED_NAME_CLASS_NAME)
  @javax.annotation.Nullable
  private String className;

  public static final String SERIALIZED_NAME_IS_EMPTY_CLASS_NAME = "isEmptyClassName";
  @SerializedName(SERIALIZED_NAME_IS_EMPTY_CLASS_NAME)
  @javax.annotation.Nullable
  private Boolean isEmptyClassName;

  public static final String SERIALIZED_NAME_LAST_TEST_RESULT_OUTCOME = "lastTestResultOutcome";
  @SerializedName(SERIALIZED_NAME_LAST_TEST_RESULT_OUTCOME)
  @javax.annotation.Nullable
  private AutotestResultOutcome lastTestResultOutcome;

  public static final String SERIALIZED_NAME_LAST_TEST_RESULT_STATUS_CODE = "lastTestResultStatusCode";
  @SerializedName(SERIALIZED_NAME_LAST_TEST_RESULT_STATUS_CODE)
  @javax.annotation.Nullable
  private String lastTestResultStatusCode;

  public static final String SERIALIZED_NAME_EXTERNAL_KEY = "externalKey";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_KEY)
  @javax.annotation.Nullable
  private String externalKey;

  public static final String SERIALIZED_NAME_LAST_TEST_RESULT_CONFIGURATION_IDS = "lastTestResultConfigurationIds";
  @SerializedName(SERIALIZED_NAME_LAST_TEST_RESULT_CONFIGURATION_IDS)
  @javax.annotation.Nullable
  private Set<UUID> lastTestResultConfigurationIds;

  public AutoTestFilterApiModel() {
  }

  public AutoTestFilterApiModel projectIds(@javax.annotation.Nullable Set<UUID> projectIds) {
    this.projectIds = projectIds;
    return this;
  }

  public AutoTestFilterApiModel addProjectIdsItem(UUID projectIdsItem) {
    if (this.projectIds == null) {
      this.projectIds = new LinkedHashSet<>();
    }
    this.projectIds.add(projectIdsItem);
    return this;
  }

  /**
   * Specifies an autotest projects IDs to search for
   * @return projectIds
   */
  @javax.annotation.Nullable
  public Set<UUID> getProjectIds() {
    return projectIds;
  }

  public void setProjectIds(@javax.annotation.Nullable Set<UUID> projectIds) {
    this.projectIds = projectIds;
  }


  public AutoTestFilterApiModel externalIds(@javax.annotation.Nullable Set<String> externalIds) {
    this.externalIds = externalIds;
    return this;
  }

  public AutoTestFilterApiModel addExternalIdsItem(String externalIdsItem) {
    if (this.externalIds == null) {
      this.externalIds = new LinkedHashSet<>();
    }
    this.externalIds.add(externalIdsItem);
    return this;
  }

  /**
   * Specifies an autotest external IDs to search for
   * @return externalIds
   */
  @javax.annotation.Nullable
  public Set<String> getExternalIds() {
    return externalIds;
  }

  public void setExternalIds(@javax.annotation.Nullable Set<String> externalIds) {
    this.externalIds = externalIds;
  }


  public AutoTestFilterApiModel globalIds(@javax.annotation.Nullable Set<Long> globalIds) {
    this.globalIds = globalIds;
    return this;
  }

  public AutoTestFilterApiModel addGlobalIdsItem(Long globalIdsItem) {
    if (this.globalIds == null) {
      this.globalIds = new LinkedHashSet<>();
    }
    this.globalIds.add(globalIdsItem);
    return this;
  }

  /**
   * Specifies an autotest global IDs to search for
   * @return globalIds
   */
  @javax.annotation.Nullable
  public Set<Long> getGlobalIds() {
    return globalIds;
  }

  public void setGlobalIds(@javax.annotation.Nullable Set<Long> globalIds) {
    this.globalIds = globalIds;
  }


  public AutoTestFilterApiModel name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Specifies an autotest name to search for
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public AutoTestFilterApiModel isFlaky(@javax.annotation.Nullable Boolean isFlaky) {
    this.isFlaky = isFlaky;
    return this;
  }

  /**
   * Specifies an autotest flaky status to search for
   * @return isFlaky
   */
  @javax.annotation.Nullable
  public Boolean getIsFlaky() {
    return isFlaky;
  }

  public void setIsFlaky(@javax.annotation.Nullable Boolean isFlaky) {
    this.isFlaky = isFlaky;
  }


  public AutoTestFilterApiModel mustBeApproved(@javax.annotation.Nullable Boolean mustBeApproved) {
    this.mustBeApproved = mustBeApproved;
    return this;
  }

  /**
   * Specifies an autotest unapproved changes status to search for
   * @return mustBeApproved
   */
  @javax.annotation.Nullable
  public Boolean getMustBeApproved() {
    return mustBeApproved;
  }

  public void setMustBeApproved(@javax.annotation.Nullable Boolean mustBeApproved) {
    this.mustBeApproved = mustBeApproved;
  }


  public AutoTestFilterApiModel stabilityPercentage(@javax.annotation.Nullable Int64RangeSelectorModel stabilityPercentage) {
    this.stabilityPercentage = stabilityPercentage;
    return this;
  }

  /**
   * Specifies an autotest range of stability percentage to search for
   * @return stabilityPercentage
   */
  @javax.annotation.Nullable
  public Int64RangeSelectorModel getStabilityPercentage() {
    return stabilityPercentage;
  }

  public void setStabilityPercentage(@javax.annotation.Nullable Int64RangeSelectorModel stabilityPercentage) {
    this.stabilityPercentage = stabilityPercentage;
  }


  public AutoTestFilterApiModel createdDate(@javax.annotation.Nullable DateTimeRangeSelectorModel createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Specifies an autotest range of creation date to search for
   * @return createdDate
   */
  @javax.annotation.Nullable
  public DateTimeRangeSelectorModel getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(@javax.annotation.Nullable DateTimeRangeSelectorModel createdDate) {
    this.createdDate = createdDate;
  }


  public AutoTestFilterApiModel createdByIds(@javax.annotation.Nullable Set<UUID> createdByIds) {
    this.createdByIds = createdByIds;
    return this;
  }

  public AutoTestFilterApiModel addCreatedByIdsItem(UUID createdByIdsItem) {
    if (this.createdByIds == null) {
      this.createdByIds = new LinkedHashSet<>();
    }
    this.createdByIds.add(createdByIdsItem);
    return this;
  }

  /**
   * Specifies an autotest creator IDs to search for
   * @return createdByIds
   */
  @javax.annotation.Nullable
  public Set<UUID> getCreatedByIds() {
    return createdByIds;
  }

  public void setCreatedByIds(@javax.annotation.Nullable Set<UUID> createdByIds) {
    this.createdByIds = createdByIds;
  }


  public AutoTestFilterApiModel modifiedDate(@javax.annotation.Nullable DateTimeRangeSelectorModel modifiedDate) {
    this.modifiedDate = modifiedDate;
    return this;
  }

  /**
   * Specifies an autotest range of last modification date to search for
   * @return modifiedDate
   */
  @javax.annotation.Nullable
  public DateTimeRangeSelectorModel getModifiedDate() {
    return modifiedDate;
  }

  public void setModifiedDate(@javax.annotation.Nullable DateTimeRangeSelectorModel modifiedDate) {
    this.modifiedDate = modifiedDate;
  }


  public AutoTestFilterApiModel modifiedByIds(@javax.annotation.Nullable Set<UUID> modifiedByIds) {
    this.modifiedByIds = modifiedByIds;
    return this;
  }

  public AutoTestFilterApiModel addModifiedByIdsItem(UUID modifiedByIdsItem) {
    if (this.modifiedByIds == null) {
      this.modifiedByIds = new LinkedHashSet<>();
    }
    this.modifiedByIds.add(modifiedByIdsItem);
    return this;
  }

  /**
   * Specifies an autotest last editor IDs to search for
   * @return modifiedByIds
   */
  @javax.annotation.Nullable
  public Set<UUID> getModifiedByIds() {
    return modifiedByIds;
  }

  public void setModifiedByIds(@javax.annotation.Nullable Set<UUID> modifiedByIds) {
    this.modifiedByIds = modifiedByIds;
  }


  public AutoTestFilterApiModel isDeleted(@javax.annotation.Nullable Boolean isDeleted) {
    this.isDeleted = isDeleted;
    return this;
  }

  /**
   * Specifies an autotest deleted status to search for
   * @return isDeleted
   */
  @javax.annotation.Nullable
  public Boolean getIsDeleted() {
    return isDeleted;
  }

  public void setIsDeleted(@javax.annotation.Nullable Boolean isDeleted) {
    this.isDeleted = isDeleted;
  }


  public AutoTestFilterApiModel namespace(@javax.annotation.Nullable String namespace) {
    this.namespace = namespace;
    return this;
  }

  /**
   * Specifies an autotest namespace to search for
   * @return namespace
   */
  @javax.annotation.Nullable
  public String getNamespace() {
    return namespace;
  }

  public void setNamespace(@javax.annotation.Nullable String namespace) {
    this.namespace = namespace;
  }


  public AutoTestFilterApiModel isEmptyNamespace(@javax.annotation.Nullable Boolean isEmptyNamespace) {
    this.isEmptyNamespace = isEmptyNamespace;
    return this;
  }

  /**
   * Specifies an autotest namespace name presence status to search for
   * @return isEmptyNamespace
   */
  @javax.annotation.Nullable
  public Boolean getIsEmptyNamespace() {
    return isEmptyNamespace;
  }

  public void setIsEmptyNamespace(@javax.annotation.Nullable Boolean isEmptyNamespace) {
    this.isEmptyNamespace = isEmptyNamespace;
  }


  public AutoTestFilterApiModel className(@javax.annotation.Nullable String className) {
    this.className = className;
    return this;
  }

  /**
   * Specifies an autotest class name to search for
   * @return className
   */
  @javax.annotation.Nullable
  public String getClassName() {
    return className;
  }

  public void setClassName(@javax.annotation.Nullable String className) {
    this.className = className;
  }


  public AutoTestFilterApiModel isEmptyClassName(@javax.annotation.Nullable Boolean isEmptyClassName) {
    this.isEmptyClassName = isEmptyClassName;
    return this;
  }

  /**
   * Specifies an autotest class name presence status to search for
   * @return isEmptyClassName
   */
  @javax.annotation.Nullable
  public Boolean getIsEmptyClassName() {
    return isEmptyClassName;
  }

  public void setIsEmptyClassName(@javax.annotation.Nullable Boolean isEmptyClassName) {
    this.isEmptyClassName = isEmptyClassName;
  }


  public AutoTestFilterApiModel lastTestResultOutcome(@javax.annotation.Nullable AutotestResultOutcome lastTestResultOutcome) {
    this.lastTestResultOutcome = lastTestResultOutcome;
    return this;
  }

  /**
   * Specifies an autotest outcome of the last test result to search for
   * @return lastTestResultOutcome
   */
  @javax.annotation.Nullable
  public AutotestResultOutcome getLastTestResultOutcome() {
    return lastTestResultOutcome;
  }

  public void setLastTestResultOutcome(@javax.annotation.Nullable AutotestResultOutcome lastTestResultOutcome) {
    this.lastTestResultOutcome = lastTestResultOutcome;
  }


  public AutoTestFilterApiModel lastTestResultStatusCode(@javax.annotation.Nullable String lastTestResultStatusCode) {
    this.lastTestResultStatusCode = lastTestResultStatusCode;
    return this;
  }

  /**
   * Specifies an autotest status code of the last test result to search for
   * @return lastTestResultStatusCode
   */
  @javax.annotation.Nullable
  public String getLastTestResultStatusCode() {
    return lastTestResultStatusCode;
  }

  public void setLastTestResultStatusCode(@javax.annotation.Nullable String lastTestResultStatusCode) {
    this.lastTestResultStatusCode = lastTestResultStatusCode;
  }


  public AutoTestFilterApiModel externalKey(@javax.annotation.Nullable String externalKey) {
    this.externalKey = externalKey;
    return this;
  }

  /**
   * Specifies an autotest external key to search for
   * @return externalKey
   */
  @javax.annotation.Nullable
  public String getExternalKey() {
    return externalKey;
  }

  public void setExternalKey(@javax.annotation.Nullable String externalKey) {
    this.externalKey = externalKey;
  }


  public AutoTestFilterApiModel lastTestResultConfigurationIds(@javax.annotation.Nullable Set<UUID> lastTestResultConfigurationIds) {
    this.lastTestResultConfigurationIds = lastTestResultConfigurationIds;
    return this;
  }

  public AutoTestFilterApiModel addLastTestResultConfigurationIdsItem(UUID lastTestResultConfigurationIdsItem) {
    if (this.lastTestResultConfigurationIds == null) {
      this.lastTestResultConfigurationIds = new LinkedHashSet<>();
    }
    this.lastTestResultConfigurationIds.add(lastTestResultConfigurationIdsItem);
    return this;
  }

  /**
   * Specifies an autotest configuration IDs of the last test result to search for
   * @return lastTestResultConfigurationIds
   */
  @javax.annotation.Nullable
  public Set<UUID> getLastTestResultConfigurationIds() {
    return lastTestResultConfigurationIds;
  }

  public void setLastTestResultConfigurationIds(@javax.annotation.Nullable Set<UUID> lastTestResultConfigurationIds) {
    this.lastTestResultConfigurationIds = lastTestResultConfigurationIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutoTestFilterApiModel autoTestFilterApiModel = (AutoTestFilterApiModel) o;
    return Objects.equals(this.projectIds, autoTestFilterApiModel.projectIds) &&
        Objects.equals(this.externalIds, autoTestFilterApiModel.externalIds) &&
        Objects.equals(this.globalIds, autoTestFilterApiModel.globalIds) &&
        Objects.equals(this.name, autoTestFilterApiModel.name) &&
        Objects.equals(this.isFlaky, autoTestFilterApiModel.isFlaky) &&
        Objects.equals(this.mustBeApproved, autoTestFilterApiModel.mustBeApproved) &&
        Objects.equals(this.stabilityPercentage, autoTestFilterApiModel.stabilityPercentage) &&
        Objects.equals(this.createdDate, autoTestFilterApiModel.createdDate) &&
        Objects.equals(this.createdByIds, autoTestFilterApiModel.createdByIds) &&
        Objects.equals(this.modifiedDate, autoTestFilterApiModel.modifiedDate) &&
        Objects.equals(this.modifiedByIds, autoTestFilterApiModel.modifiedByIds) &&
        Objects.equals(this.isDeleted, autoTestFilterApiModel.isDeleted) &&
        Objects.equals(this.namespace, autoTestFilterApiModel.namespace) &&
        Objects.equals(this.isEmptyNamespace, autoTestFilterApiModel.isEmptyNamespace) &&
        Objects.equals(this.className, autoTestFilterApiModel.className) &&
        Objects.equals(this.isEmptyClassName, autoTestFilterApiModel.isEmptyClassName) &&
        Objects.equals(this.lastTestResultOutcome, autoTestFilterApiModel.lastTestResultOutcome) &&
        Objects.equals(this.lastTestResultStatusCode, autoTestFilterApiModel.lastTestResultStatusCode) &&
        Objects.equals(this.externalKey, autoTestFilterApiModel.externalKey) &&
        Objects.equals(this.lastTestResultConfigurationIds, autoTestFilterApiModel.lastTestResultConfigurationIds);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(projectIds, externalIds, globalIds, name, isFlaky, mustBeApproved, stabilityPercentage, createdDate, createdByIds, modifiedDate, modifiedByIds, isDeleted, namespace, isEmptyNamespace, className, isEmptyClassName, lastTestResultOutcome, lastTestResultStatusCode, externalKey, lastTestResultConfigurationIds);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutoTestFilterApiModel {\n");
    sb.append("    projectIds: ").append(toIndentedString(projectIds)).append("\n");
    sb.append("    externalIds: ").append(toIndentedString(externalIds)).append("\n");
    sb.append("    globalIds: ").append(toIndentedString(globalIds)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    isFlaky: ").append(toIndentedString(isFlaky)).append("\n");
    sb.append("    mustBeApproved: ").append(toIndentedString(mustBeApproved)).append("\n");
    sb.append("    stabilityPercentage: ").append(toIndentedString(stabilityPercentage)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    createdByIds: ").append(toIndentedString(createdByIds)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("    modifiedByIds: ").append(toIndentedString(modifiedByIds)).append("\n");
    sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    isEmptyNamespace: ").append(toIndentedString(isEmptyNamespace)).append("\n");
    sb.append("    className: ").append(toIndentedString(className)).append("\n");
    sb.append("    isEmptyClassName: ").append(toIndentedString(isEmptyClassName)).append("\n");
    sb.append("    lastTestResultOutcome: ").append(toIndentedString(lastTestResultOutcome)).append("\n");
    sb.append("    lastTestResultStatusCode: ").append(toIndentedString(lastTestResultStatusCode)).append("\n");
    sb.append("    externalKey: ").append(toIndentedString(externalKey)).append("\n");
    sb.append("    lastTestResultConfigurationIds: ").append(toIndentedString(lastTestResultConfigurationIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("projectIds");
    openapiFields.add("externalIds");
    openapiFields.add("globalIds");
    openapiFields.add("name");
    openapiFields.add("isFlaky");
    openapiFields.add("mustBeApproved");
    openapiFields.add("stabilityPercentage");
    openapiFields.add("createdDate");
    openapiFields.add("createdByIds");
    openapiFields.add("modifiedDate");
    openapiFields.add("modifiedByIds");
    openapiFields.add("isDeleted");
    openapiFields.add("namespace");
    openapiFields.add("isEmptyNamespace");
    openapiFields.add("className");
    openapiFields.add("isEmptyClassName");
    openapiFields.add("lastTestResultOutcome");
    openapiFields.add("lastTestResultStatusCode");
    openapiFields.add("externalKey");
    openapiFields.add("lastTestResultConfigurationIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AutoTestFilterApiModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AutoTestFilterApiModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AutoTestFilterApiModel is not found in the empty JSON string", AutoTestFilterApiModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AutoTestFilterApiModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AutoTestFilterApiModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("projectIds") != null && !jsonObj.get("projectIds").isJsonNull() && !jsonObj.get("projectIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectIds` to be an array in the JSON string but got `%s`", jsonObj.get("projectIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("externalIds") != null && !jsonObj.get("externalIds").isJsonNull() && !jsonObj.get("externalIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalIds` to be an array in the JSON string but got `%s`", jsonObj.get("externalIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("globalIds") != null && !jsonObj.get("globalIds").isJsonNull() && !jsonObj.get("globalIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `globalIds` to be an array in the JSON string but got `%s`", jsonObj.get("globalIds").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `stabilityPercentage`
      if (jsonObj.get("stabilityPercentage") != null && !jsonObj.get("stabilityPercentage").isJsonNull()) {
        Int64RangeSelectorModel.validateJsonElement(jsonObj.get("stabilityPercentage"));
      }
      // validate the optional field `createdDate`
      if (jsonObj.get("createdDate") != null && !jsonObj.get("createdDate").isJsonNull()) {
        DateTimeRangeSelectorModel.validateJsonElement(jsonObj.get("createdDate"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("createdByIds") != null && !jsonObj.get("createdByIds").isJsonNull() && !jsonObj.get("createdByIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdByIds` to be an array in the JSON string but got `%s`", jsonObj.get("createdByIds").toString()));
      }
      // validate the optional field `modifiedDate`
      if (jsonObj.get("modifiedDate") != null && !jsonObj.get("modifiedDate").isJsonNull()) {
        DateTimeRangeSelectorModel.validateJsonElement(jsonObj.get("modifiedDate"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("modifiedByIds") != null && !jsonObj.get("modifiedByIds").isJsonNull() && !jsonObj.get("modifiedByIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedByIds` to be an array in the JSON string but got `%s`", jsonObj.get("modifiedByIds").toString()));
      }
      if ((jsonObj.get("namespace") != null && !jsonObj.get("namespace").isJsonNull()) && !jsonObj.get("namespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespace").toString()));
      }
      if ((jsonObj.get("className") != null && !jsonObj.get("className").isJsonNull()) && !jsonObj.get("className").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `className` to be a primitive type in the JSON string but got `%s`", jsonObj.get("className").toString()));
      }
      // validate the optional field `lastTestResultOutcome`
      if (jsonObj.get("lastTestResultOutcome") != null && !jsonObj.get("lastTestResultOutcome").isJsonNull()) {
        AutotestResultOutcome.validateJsonElement(jsonObj.get("lastTestResultOutcome"));
      }
      if ((jsonObj.get("lastTestResultStatusCode") != null && !jsonObj.get("lastTestResultStatusCode").isJsonNull()) && !jsonObj.get("lastTestResultStatusCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastTestResultStatusCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastTestResultStatusCode").toString()));
      }
      if ((jsonObj.get("externalKey") != null && !jsonObj.get("externalKey").isJsonNull()) && !jsonObj.get("externalKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalKey").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("lastTestResultConfigurationIds") != null && !jsonObj.get("lastTestResultConfigurationIds").isJsonNull() && !jsonObj.get("lastTestResultConfigurationIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastTestResultConfigurationIds` to be an array in the JSON string but got `%s`", jsonObj.get("lastTestResultConfigurationIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AutoTestFilterApiModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AutoTestFilterApiModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AutoTestFilterApiModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AutoTestFilterApiModel.class));

       return (TypeAdapter<T>) new TypeAdapter<AutoTestFilterApiModel>() {
           @Override
           public void write(JsonWriter out, AutoTestFilterApiModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AutoTestFilterApiModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AutoTestFilterApiModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AutoTestFilterApiModel
   * @throws IOException if the JSON string is invalid with respect to AutoTestFilterApiModel
   */
  public static AutoTestFilterApiModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AutoTestFilterApiModel.class);
  }

  /**
   * Convert an instance of AutoTestFilterApiModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

