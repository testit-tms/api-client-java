/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import ru.testit.client.model.AutotestResultOutcome;
import ru.testit.client.model.RerunTestResultApiResult;
import ru.testit.client.model.TestStatusApiResult;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import ru.testit.client.invoker.JSON;

/**
 * AutoTestResultHistoryApiResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0")
public class AutoTestResultHistoryApiResult {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_TEST_PLAN_ID = "testPlanId";
  @SerializedName(SERIALIZED_NAME_TEST_PLAN_ID)
  private UUID testPlanId;

  public static final String SERIALIZED_NAME_TEST_PLAN_GLOBAL_ID = "testPlanGlobalId";
  @SerializedName(SERIALIZED_NAME_TEST_PLAN_GLOBAL_ID)
  private Long testPlanGlobalId;

  public static final String SERIALIZED_NAME_TEST_PLAN_NAME = "testPlanName";
  @SerializedName(SERIALIZED_NAME_TEST_PLAN_NAME)
  private String testPlanName;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Long duration;

  public static final String SERIALIZED_NAME_TEST_RUN_ID = "testRunId";
  @SerializedName(SERIALIZED_NAME_TEST_RUN_ID)
  private UUID testRunId;

  public static final String SERIALIZED_NAME_TEST_RUN_NAME = "testRunName";
  @SerializedName(SERIALIZED_NAME_TEST_RUN_NAME)
  private String testRunName;

  public static final String SERIALIZED_NAME_CONFIGURATION_ID = "configurationId";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_ID)
  private UUID configurationId;

  public static final String SERIALIZED_NAME_CONFIGURATION_NAME = "configurationName";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_NAME)
  private String configurationName;

  public static final String SERIALIZED_NAME_OUTCOME = "outcome";
  @SerializedName(SERIALIZED_NAME_OUTCOME)
  private AutotestResultOutcome outcome;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private TestStatusApiResult status;

  public static final String SERIALIZED_NAME_LAUNCH_SOURCE = "launchSource";
  @SerializedName(SERIALIZED_NAME_LAUNCH_SOURCE)
  private String launchSource;

  public static final String SERIALIZED_NAME_RERUN_COUNT = "rerunCount";
  @SerializedName(SERIALIZED_NAME_RERUN_COUNT)
  private Integer rerunCount;

  public static final String SERIALIZED_NAME_RERUN_TEST_RESULTS = "rerunTestResults";
  @SerializedName(SERIALIZED_NAME_RERUN_TEST_RESULTS)
  private List<RerunTestResultApiResult> rerunTestResults = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_CREATED_BY_ID = "createdById";
  @SerializedName(SERIALIZED_NAME_CREATED_BY_ID)
  private UUID createdById;

  public static final String SERIALIZED_NAME_CREATED_BY_NAME = "createdByName";
  @SerializedName(SERIALIZED_NAME_CREATED_BY_NAME)
  private String createdByName;

  public static final String SERIALIZED_NAME_MODIFIED_DATE = "modifiedDate";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE)
  private OffsetDateTime modifiedDate;

  public static final String SERIALIZED_NAME_MODIFIED_BY_ID = "modifiedById";
  @SerializedName(SERIALIZED_NAME_MODIFIED_BY_ID)
  private UUID modifiedById;

  public AutoTestResultHistoryApiResult() {
  }

  public AutoTestResultHistoryApiResult id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public AutoTestResultHistoryApiResult testPlanId(UUID testPlanId) {
    this.testPlanId = testPlanId;
    return this;
  }

  /**
   * Get testPlanId
   * @return testPlanId
   */
  @javax.annotation.Nullable
  public UUID getTestPlanId() {
    return testPlanId;
  }

  public void setTestPlanId(UUID testPlanId) {
    this.testPlanId = testPlanId;
  }


  public AutoTestResultHistoryApiResult testPlanGlobalId(Long testPlanGlobalId) {
    this.testPlanGlobalId = testPlanGlobalId;
    return this;
  }

  /**
   * Get testPlanGlobalId
   * @return testPlanGlobalId
   */
  @javax.annotation.Nullable
  public Long getTestPlanGlobalId() {
    return testPlanGlobalId;
  }

  public void setTestPlanGlobalId(Long testPlanGlobalId) {
    this.testPlanGlobalId = testPlanGlobalId;
  }


  public AutoTestResultHistoryApiResult testPlanName(String testPlanName) {
    this.testPlanName = testPlanName;
    return this;
  }

  /**
   * Get testPlanName
   * @return testPlanName
   */
  @javax.annotation.Nullable
  public String getTestPlanName() {
    return testPlanName;
  }

  public void setTestPlanName(String testPlanName) {
    this.testPlanName = testPlanName;
  }


  public AutoTestResultHistoryApiResult duration(Long duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Get duration
   * @return duration
   */
  @javax.annotation.Nullable
  public Long getDuration() {
    return duration;
  }

  public void setDuration(Long duration) {
    this.duration = duration;
  }


  public AutoTestResultHistoryApiResult testRunId(UUID testRunId) {
    this.testRunId = testRunId;
    return this;
  }

  /**
   * Get testRunId
   * @return testRunId
   */
  @javax.annotation.Nonnull
  public UUID getTestRunId() {
    return testRunId;
  }

  public void setTestRunId(UUID testRunId) {
    this.testRunId = testRunId;
  }


  public AutoTestResultHistoryApiResult testRunName(String testRunName) {
    this.testRunName = testRunName;
    return this;
  }

  /**
   * Get testRunName
   * @return testRunName
   */
  @javax.annotation.Nullable
  public String getTestRunName() {
    return testRunName;
  }

  public void setTestRunName(String testRunName) {
    this.testRunName = testRunName;
  }


  public AutoTestResultHistoryApiResult configurationId(UUID configurationId) {
    this.configurationId = configurationId;
    return this;
  }

  /**
   * Get configurationId
   * @return configurationId
   */
  @javax.annotation.Nonnull
  public UUID getConfigurationId() {
    return configurationId;
  }

  public void setConfigurationId(UUID configurationId) {
    this.configurationId = configurationId;
  }


  public AutoTestResultHistoryApiResult configurationName(String configurationName) {
    this.configurationName = configurationName;
    return this;
  }

  /**
   * Get configurationName
   * @return configurationName
   */
  @javax.annotation.Nonnull
  public String getConfigurationName() {
    return configurationName;
  }

  public void setConfigurationName(String configurationName) {
    this.configurationName = configurationName;
  }


  public AutoTestResultHistoryApiResult outcome(AutotestResultOutcome outcome) {
    this.outcome = outcome;
    return this;
  }

  /**
   * Get outcome
   * @return outcome
   */
  @javax.annotation.Nonnull
  public AutotestResultOutcome getOutcome() {
    return outcome;
  }

  public void setOutcome(AutotestResultOutcome outcome) {
    this.outcome = outcome;
  }


  public AutoTestResultHistoryApiResult status(TestStatusApiResult status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public TestStatusApiResult getStatus() {
    return status;
  }

  public void setStatus(TestStatusApiResult status) {
    this.status = status;
  }


  public AutoTestResultHistoryApiResult launchSource(String launchSource) {
    this.launchSource = launchSource;
    return this;
  }

  /**
   * Get launchSource
   * @return launchSource
   */
  @javax.annotation.Nullable
  public String getLaunchSource() {
    return launchSource;
  }

  public void setLaunchSource(String launchSource) {
    this.launchSource = launchSource;
  }


  public AutoTestResultHistoryApiResult rerunCount(Integer rerunCount) {
    this.rerunCount = rerunCount;
    return this;
  }

  /**
   * Get rerunCount
   * @return rerunCount
   */
  @javax.annotation.Nonnull
  public Integer getRerunCount() {
    return rerunCount;
  }

  public void setRerunCount(Integer rerunCount) {
    this.rerunCount = rerunCount;
  }


  public AutoTestResultHistoryApiResult rerunTestResults(List<RerunTestResultApiResult> rerunTestResults) {
    this.rerunTestResults = rerunTestResults;
    return this;
  }

  public AutoTestResultHistoryApiResult addRerunTestResultsItem(RerunTestResultApiResult rerunTestResultsItem) {
    if (this.rerunTestResults == null) {
      this.rerunTestResults = new ArrayList<>();
    }
    this.rerunTestResults.add(rerunTestResultsItem);
    return this;
  }

  /**
   * Get rerunTestResults
   * @return rerunTestResults
   */
  @javax.annotation.Nonnull
  public List<RerunTestResultApiResult> getRerunTestResults() {
    return rerunTestResults;
  }

  public void setRerunTestResults(List<RerunTestResultApiResult> rerunTestResults) {
    this.rerunTestResults = rerunTestResults;
  }


  public AutoTestResultHistoryApiResult createdDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Get createdDate
   * @return createdDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public AutoTestResultHistoryApiResult createdById(UUID createdById) {
    this.createdById = createdById;
    return this;
  }

  /**
   * Get createdById
   * @return createdById
   */
  @javax.annotation.Nonnull
  public UUID getCreatedById() {
    return createdById;
  }

  public void setCreatedById(UUID createdById) {
    this.createdById = createdById;
  }


  public AutoTestResultHistoryApiResult createdByName(String createdByName) {
    this.createdByName = createdByName;
    return this;
  }

  /**
   * Get createdByName
   * @return createdByName
   */
  @javax.annotation.Nullable
  public String getCreatedByName() {
    return createdByName;
  }

  public void setCreatedByName(String createdByName) {
    this.createdByName = createdByName;
  }


  public AutoTestResultHistoryApiResult modifiedDate(OffsetDateTime modifiedDate) {
    this.modifiedDate = modifiedDate;
    return this;
  }

  /**
   * Get modifiedDate
   * @return modifiedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedDate() {
    return modifiedDate;
  }

  public void setModifiedDate(OffsetDateTime modifiedDate) {
    this.modifiedDate = modifiedDate;
  }


  public AutoTestResultHistoryApiResult modifiedById(UUID modifiedById) {
    this.modifiedById = modifiedById;
    return this;
  }

  /**
   * Get modifiedById
   * @return modifiedById
   */
  @javax.annotation.Nullable
  public UUID getModifiedById() {
    return modifiedById;
  }

  public void setModifiedById(UUID modifiedById) {
    this.modifiedById = modifiedById;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutoTestResultHistoryApiResult autoTestResultHistoryApiResult = (AutoTestResultHistoryApiResult) o;
    return Objects.equals(this.id, autoTestResultHistoryApiResult.id) &&
        Objects.equals(this.testPlanId, autoTestResultHistoryApiResult.testPlanId) &&
        Objects.equals(this.testPlanGlobalId, autoTestResultHistoryApiResult.testPlanGlobalId) &&
        Objects.equals(this.testPlanName, autoTestResultHistoryApiResult.testPlanName) &&
        Objects.equals(this.duration, autoTestResultHistoryApiResult.duration) &&
        Objects.equals(this.testRunId, autoTestResultHistoryApiResult.testRunId) &&
        Objects.equals(this.testRunName, autoTestResultHistoryApiResult.testRunName) &&
        Objects.equals(this.configurationId, autoTestResultHistoryApiResult.configurationId) &&
        Objects.equals(this.configurationName, autoTestResultHistoryApiResult.configurationName) &&
        Objects.equals(this.outcome, autoTestResultHistoryApiResult.outcome) &&
        Objects.equals(this.status, autoTestResultHistoryApiResult.status) &&
        Objects.equals(this.launchSource, autoTestResultHistoryApiResult.launchSource) &&
        Objects.equals(this.rerunCount, autoTestResultHistoryApiResult.rerunCount) &&
        Objects.equals(this.rerunTestResults, autoTestResultHistoryApiResult.rerunTestResults) &&
        Objects.equals(this.createdDate, autoTestResultHistoryApiResult.createdDate) &&
        Objects.equals(this.createdById, autoTestResultHistoryApiResult.createdById) &&
        Objects.equals(this.createdByName, autoTestResultHistoryApiResult.createdByName) &&
        Objects.equals(this.modifiedDate, autoTestResultHistoryApiResult.modifiedDate) &&
        Objects.equals(this.modifiedById, autoTestResultHistoryApiResult.modifiedById);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, testPlanId, testPlanGlobalId, testPlanName, duration, testRunId, testRunName, configurationId, configurationName, outcome, status, launchSource, rerunCount, rerunTestResults, createdDate, createdById, createdByName, modifiedDate, modifiedById);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutoTestResultHistoryApiResult {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    testPlanId: ").append(toIndentedString(testPlanId)).append("\n");
    sb.append("    testPlanGlobalId: ").append(toIndentedString(testPlanGlobalId)).append("\n");
    sb.append("    testPlanName: ").append(toIndentedString(testPlanName)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    testRunId: ").append(toIndentedString(testRunId)).append("\n");
    sb.append("    testRunName: ").append(toIndentedString(testRunName)).append("\n");
    sb.append("    configurationId: ").append(toIndentedString(configurationId)).append("\n");
    sb.append("    configurationName: ").append(toIndentedString(configurationName)).append("\n");
    sb.append("    outcome: ").append(toIndentedString(outcome)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    launchSource: ").append(toIndentedString(launchSource)).append("\n");
    sb.append("    rerunCount: ").append(toIndentedString(rerunCount)).append("\n");
    sb.append("    rerunTestResults: ").append(toIndentedString(rerunTestResults)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    createdById: ").append(toIndentedString(createdById)).append("\n");
    sb.append("    createdByName: ").append(toIndentedString(createdByName)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("    modifiedById: ").append(toIndentedString(modifiedById)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("testPlanId");
    openapiFields.add("testPlanGlobalId");
    openapiFields.add("testPlanName");
    openapiFields.add("duration");
    openapiFields.add("testRunId");
    openapiFields.add("testRunName");
    openapiFields.add("configurationId");
    openapiFields.add("configurationName");
    openapiFields.add("outcome");
    openapiFields.add("status");
    openapiFields.add("launchSource");
    openapiFields.add("rerunCount");
    openapiFields.add("rerunTestResults");
    openapiFields.add("createdDate");
    openapiFields.add("createdById");
    openapiFields.add("createdByName");
    openapiFields.add("modifiedDate");
    openapiFields.add("modifiedById");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("testRunId");
    openapiRequiredFields.add("configurationId");
    openapiRequiredFields.add("configurationName");
    openapiRequiredFields.add("outcome");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("rerunCount");
    openapiRequiredFields.add("rerunTestResults");
    openapiRequiredFields.add("createdDate");
    openapiRequiredFields.add("createdById");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AutoTestResultHistoryApiResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AutoTestResultHistoryApiResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AutoTestResultHistoryApiResult is not found in the empty JSON string", AutoTestResultHistoryApiResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AutoTestResultHistoryApiResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AutoTestResultHistoryApiResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AutoTestResultHistoryApiResult.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("testPlanId") != null && !jsonObj.get("testPlanId").isJsonNull()) && !jsonObj.get("testPlanId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testPlanId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testPlanId").toString()));
      }
      if ((jsonObj.get("testPlanName") != null && !jsonObj.get("testPlanName").isJsonNull()) && !jsonObj.get("testPlanName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testPlanName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testPlanName").toString()));
      }
      if (!jsonObj.get("testRunId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testRunId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testRunId").toString()));
      }
      if ((jsonObj.get("testRunName") != null && !jsonObj.get("testRunName").isJsonNull()) && !jsonObj.get("testRunName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testRunName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testRunName").toString()));
      }
      if (!jsonObj.get("configurationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configurationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configurationId").toString()));
      }
      if (!jsonObj.get("configurationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configurationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configurationName").toString()));
      }
      // validate the required field `outcome`
      AutotestResultOutcome.validateJsonElement(jsonObj.get("outcome"));
      // validate the required field `status`
      TestStatusApiResult.validateJsonElement(jsonObj.get("status"));
      if ((jsonObj.get("launchSource") != null && !jsonObj.get("launchSource").isJsonNull()) && !jsonObj.get("launchSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `launchSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("launchSource").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("rerunTestResults").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rerunTestResults` to be an array in the JSON string but got `%s`", jsonObj.get("rerunTestResults").toString()));
      }

      JsonArray jsonArrayrerunTestResults = jsonObj.getAsJsonArray("rerunTestResults");
      // validate the required field `rerunTestResults` (array)
      for (int i = 0; i < jsonArrayrerunTestResults.size(); i++) {
        RerunTestResultApiResult.validateJsonElement(jsonArrayrerunTestResults.get(i));
      };
      if (!jsonObj.get("createdById").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdById` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdById").toString()));
      }
      if ((jsonObj.get("createdByName") != null && !jsonObj.get("createdByName").isJsonNull()) && !jsonObj.get("createdByName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdByName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdByName").toString()));
      }
      if ((jsonObj.get("modifiedById") != null && !jsonObj.get("modifiedById").isJsonNull()) && !jsonObj.get("modifiedById").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedById` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modifiedById").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AutoTestResultHistoryApiResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AutoTestResultHistoryApiResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AutoTestResultHistoryApiResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AutoTestResultHistoryApiResult.class));

       return (TypeAdapter<T>) new TypeAdapter<AutoTestResultHistoryApiResult>() {
           @Override
           public void write(JsonWriter out, AutoTestResultHistoryApiResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AutoTestResultHistoryApiResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AutoTestResultHistoryApiResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AutoTestResultHistoryApiResult
   * @throws IOException if the JSON string is invalid with respect to AutoTestResultHistoryApiResult
   */
  public static AutoTestResultHistoryApiResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AutoTestResultHistoryApiResult.class);
  }

  /**
   * Convert an instance of AutoTestResultHistoryApiResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

