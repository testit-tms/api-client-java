/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import ru.testit.client.model.AttachmentPutModel;
import ru.testit.client.model.AttachmentPutModelAutoTestStepResultsModel;
import ru.testit.client.model.AvailableTestResultOutcome;
import ru.testit.client.model.FailureCategoryModel;
import ru.testit.client.model.LinkPostModel;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import ru.testit.client.invoker.JSON;


/**
 * AutoTestResultsForTestRunModel
 */
@JsonPropertyOrder({
  AutoTestResultsForTestRunModel.JSON_PROPERTY_CONFIGURATION_ID,
  AutoTestResultsForTestRunModel.JSON_PROPERTY_LINKS,
  AutoTestResultsForTestRunModel.JSON_PROPERTY_FAILURE_REASON_NAMES,
  AutoTestResultsForTestRunModel.JSON_PROPERTY_AUTO_TEST_EXTERNAL_ID,
  AutoTestResultsForTestRunModel.JSON_PROPERTY_OUTCOME,
  AutoTestResultsForTestRunModel.JSON_PROPERTY_MESSAGE,
  AutoTestResultsForTestRunModel.JSON_PROPERTY_TRACES,
  AutoTestResultsForTestRunModel.JSON_PROPERTY_STARTED_ON,
  AutoTestResultsForTestRunModel.JSON_PROPERTY_COMPLETED_ON,
  AutoTestResultsForTestRunModel.JSON_PROPERTY_DURATION,
  AutoTestResultsForTestRunModel.JSON_PROPERTY_ATTACHMENTS,
  AutoTestResultsForTestRunModel.JSON_PROPERTY_PARAMETERS,
  AutoTestResultsForTestRunModel.JSON_PROPERTY_PROPERTIES,
  AutoTestResultsForTestRunModel.JSON_PROPERTY_STEP_RESULTS,
  AutoTestResultsForTestRunModel.JSON_PROPERTY_SETUP_RESULTS,
  AutoTestResultsForTestRunModel.JSON_PROPERTY_TEARDOWN_RESULTS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AutoTestResultsForTestRunModel {
  public static final String JSON_PROPERTY_CONFIGURATION_ID = "configurationId";
  private UUID configurationId;

  public static final String JSON_PROPERTY_LINKS = "links";
  private JsonNullable<List<LinkPostModel>> links = JsonNullable.<List<LinkPostModel>>undefined();

  public static final String JSON_PROPERTY_FAILURE_REASON_NAMES = "failureReasonNames";
  private JsonNullable<List<FailureCategoryModel>> failureReasonNames = JsonNullable.<List<FailureCategoryModel>>undefined();

  public static final String JSON_PROPERTY_AUTO_TEST_EXTERNAL_ID = "autoTestExternalId";
  private String autoTestExternalId;

  public static final String JSON_PROPERTY_OUTCOME = "outcome";
  private AvailableTestResultOutcome outcome;

  public static final String JSON_PROPERTY_MESSAGE = "message";
  private JsonNullable<String> message = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_TRACES = "traces";
  private JsonNullable<String> traces = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_STARTED_ON = "startedOn";
  private JsonNullable<OffsetDateTime> startedOn = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_COMPLETED_ON = "completedOn";
  private JsonNullable<OffsetDateTime> completedOn = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_DURATION = "duration";
  private JsonNullable<Long> duration = JsonNullable.<Long>undefined();

  public static final String JSON_PROPERTY_ATTACHMENTS = "attachments";
  private JsonNullable<List<AttachmentPutModel>> attachments = JsonNullable.<List<AttachmentPutModel>>undefined();

  public static final String JSON_PROPERTY_PARAMETERS = "parameters";
  private JsonNullable<Map<String, String>> parameters = JsonNullable.<Map<String, String>>undefined();

  public static final String JSON_PROPERTY_PROPERTIES = "properties";
  private JsonNullable<Map<String, String>> properties = JsonNullable.<Map<String, String>>undefined();

  public static final String JSON_PROPERTY_STEP_RESULTS = "stepResults";
  private JsonNullable<List<AttachmentPutModelAutoTestStepResultsModel>> stepResults = JsonNullable.<List<AttachmentPutModelAutoTestStepResultsModel>>undefined();

  public static final String JSON_PROPERTY_SETUP_RESULTS = "setupResults";
  private JsonNullable<List<AttachmentPutModelAutoTestStepResultsModel>> setupResults = JsonNullable.<List<AttachmentPutModelAutoTestStepResultsModel>>undefined();

  public static final String JSON_PROPERTY_TEARDOWN_RESULTS = "teardownResults";
  private JsonNullable<List<AttachmentPutModelAutoTestStepResultsModel>> teardownResults = JsonNullable.<List<AttachmentPutModelAutoTestStepResultsModel>>undefined();

  public AutoTestResultsForTestRunModel() { 
  }

  public AutoTestResultsForTestRunModel configurationId(UUID configurationId) {
    this.configurationId = configurationId;
    return this;
  }

   /**
   * Specifies the GUID of the autotest configuration, which was specified when the test run was created.
   * @return configurationId
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CONFIGURATION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getConfigurationId() {
    return configurationId;
  }


  @JsonProperty(JSON_PROPERTY_CONFIGURATION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConfigurationId(UUID configurationId) {
    this.configurationId = configurationId;
  }


  public AutoTestResultsForTestRunModel links(List<LinkPostModel> links) {
    this.links = JsonNullable.<List<LinkPostModel>>of(links);
    return this;
  }

  public AutoTestResultsForTestRunModel addLinksItem(LinkPostModel linksItem) {
    if (this.links == null || !this.links.isPresent()) {
      this.links = JsonNullable.<List<LinkPostModel>>of(new ArrayList<>());
    }
    try {
      this.links.get().add(linksItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Specifies the links in the autotest.
   * @return links
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<LinkPostModel> getLinks() {
        return links.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<LinkPostModel>> getLinks_JsonNullable() {
    return links;
  }
  
  @JsonProperty(JSON_PROPERTY_LINKS)
  public void setLinks_JsonNullable(JsonNullable<List<LinkPostModel>> links) {
    this.links = links;
  }

  public void setLinks(List<LinkPostModel> links) {
    this.links = JsonNullable.<List<LinkPostModel>>of(links);
  }


  public AutoTestResultsForTestRunModel failureReasonNames(List<FailureCategoryModel> failureReasonNames) {
    this.failureReasonNames = JsonNullable.<List<FailureCategoryModel>>of(failureReasonNames);
    return this;
  }

  public AutoTestResultsForTestRunModel addFailureReasonNamesItem(FailureCategoryModel failureReasonNamesItem) {
    if (this.failureReasonNames == null || !this.failureReasonNames.isPresent()) {
      this.failureReasonNames = JsonNullable.<List<FailureCategoryModel>>of(new ArrayList<>());
    }
    try {
      this.failureReasonNames.get().add(failureReasonNamesItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Specifies the cause of autotest failure.
   * @return failureReasonNames
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<FailureCategoryModel> getFailureReasonNames() {
        return failureReasonNames.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FAILURE_REASON_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<FailureCategoryModel>> getFailureReasonNames_JsonNullable() {
    return failureReasonNames;
  }
  
  @JsonProperty(JSON_PROPERTY_FAILURE_REASON_NAMES)
  public void setFailureReasonNames_JsonNullable(JsonNullable<List<FailureCategoryModel>> failureReasonNames) {
    this.failureReasonNames = failureReasonNames;
  }

  public void setFailureReasonNames(List<FailureCategoryModel> failureReasonNames) {
    this.failureReasonNames = JsonNullable.<List<FailureCategoryModel>>of(failureReasonNames);
  }


  public AutoTestResultsForTestRunModel autoTestExternalId(String autoTestExternalId) {
    this.autoTestExternalId = autoTestExternalId;
    return this;
  }

   /**
   * Specifies the external ID of the autotest, which was specified when the test run was created.
   * @return autoTestExternalId
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AUTO_TEST_EXTERNAL_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAutoTestExternalId() {
    return autoTestExternalId;
  }


  @JsonProperty(JSON_PROPERTY_AUTO_TEST_EXTERNAL_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAutoTestExternalId(String autoTestExternalId) {
    this.autoTestExternalId = autoTestExternalId;
  }


  public AutoTestResultsForTestRunModel outcome(AvailableTestResultOutcome outcome) {
    this.outcome = outcome;
    return this;
  }

   /**
   * Get outcome
   * @return outcome
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_OUTCOME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public AvailableTestResultOutcome getOutcome() {
    return outcome;
  }


  @JsonProperty(JSON_PROPERTY_OUTCOME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOutcome(AvailableTestResultOutcome outcome) {
    this.outcome = outcome;
  }


  public AutoTestResultsForTestRunModel message(String message) {
    this.message = JsonNullable.<String>of(message);
    return this;
  }

   /**
   * A comment for the result.
   * @return message
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getMessage() {
        return message.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getMessage_JsonNullable() {
    return message;
  }
  
  @JsonProperty(JSON_PROPERTY_MESSAGE)
  public void setMessage_JsonNullable(JsonNullable<String> message) {
    this.message = message;
  }

  public void setMessage(String message) {
    this.message = JsonNullable.<String>of(message);
  }


  public AutoTestResultsForTestRunModel traces(String traces) {
    this.traces = JsonNullable.<String>of(traces);
    return this;
  }

   /**
   * An extended comment or a stack trace.
   * @return traces
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getTraces() {
        return traces.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TRACES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getTraces_JsonNullable() {
    return traces;
  }
  
  @JsonProperty(JSON_PROPERTY_TRACES)
  public void setTraces_JsonNullable(JsonNullable<String> traces) {
    this.traces = traces;
  }

  public void setTraces(String traces) {
    this.traces = JsonNullable.<String>of(traces);
  }


  public AutoTestResultsForTestRunModel startedOn(OffsetDateTime startedOn) {
    this.startedOn = JsonNullable.<OffsetDateTime>of(startedOn);
    return this;
  }

   /**
   * Test run start date.
   * @return startedOn
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public OffsetDateTime getStartedOn() {
        return startedOn.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_STARTED_ON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getStartedOn_JsonNullable() {
    return startedOn;
  }
  
  @JsonProperty(JSON_PROPERTY_STARTED_ON)
  public void setStartedOn_JsonNullable(JsonNullable<OffsetDateTime> startedOn) {
    this.startedOn = startedOn;
  }

  public void setStartedOn(OffsetDateTime startedOn) {
    this.startedOn = JsonNullable.<OffsetDateTime>of(startedOn);
  }


  public AutoTestResultsForTestRunModel completedOn(OffsetDateTime completedOn) {
    this.completedOn = JsonNullable.<OffsetDateTime>of(completedOn);
    return this;
  }

   /**
   * Test run end date.
   * @return completedOn
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public OffsetDateTime getCompletedOn() {
        return completedOn.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_COMPLETED_ON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getCompletedOn_JsonNullable() {
    return completedOn;
  }
  
  @JsonProperty(JSON_PROPERTY_COMPLETED_ON)
  public void setCompletedOn_JsonNullable(JsonNullable<OffsetDateTime> completedOn) {
    this.completedOn = completedOn;
  }

  public void setCompletedOn(OffsetDateTime completedOn) {
    this.completedOn = JsonNullable.<OffsetDateTime>of(completedOn);
  }


  public AutoTestResultsForTestRunModel duration(Long duration) {
    this.duration = JsonNullable.<Long>of(duration);
    return this;
  }

   /**
   * Expected or actual duration of the test run execution in milliseconds.
   * minimum: 0
   * maximum: 43200000000
   * @return duration
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Long getDuration() {
        return duration.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Long> getDuration_JsonNullable() {
    return duration;
  }
  
  @JsonProperty(JSON_PROPERTY_DURATION)
  public void setDuration_JsonNullable(JsonNullable<Long> duration) {
    this.duration = duration;
  }

  public void setDuration(Long duration) {
    this.duration = JsonNullable.<Long>of(duration);
  }


  public AutoTestResultsForTestRunModel attachments(List<AttachmentPutModel> attachments) {
    this.attachments = JsonNullable.<List<AttachmentPutModel>>of(attachments);
    return this;
  }

  public AutoTestResultsForTestRunModel addAttachmentsItem(AttachmentPutModel attachmentsItem) {
    if (this.attachments == null || !this.attachments.isPresent()) {
      this.attachments = JsonNullable.<List<AttachmentPutModel>>of(new ArrayList<>());
    }
    try {
      this.attachments.get().add(attachmentsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Specifies an attachment GUID. Multiple values can be sent.
   * @return attachments
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<AttachmentPutModel> getAttachments() {
        return attachments.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ATTACHMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<AttachmentPutModel>> getAttachments_JsonNullable() {
    return attachments;
  }
  
  @JsonProperty(JSON_PROPERTY_ATTACHMENTS)
  public void setAttachments_JsonNullable(JsonNullable<List<AttachmentPutModel>> attachments) {
    this.attachments = attachments;
  }

  public void setAttachments(List<AttachmentPutModel> attachments) {
    this.attachments = JsonNullable.<List<AttachmentPutModel>>of(attachments);
  }


  public AutoTestResultsForTestRunModel parameters(Map<String, String> parameters) {
    this.parameters = JsonNullable.<Map<String, String>>of(parameters);
    return this;
  }

  public AutoTestResultsForTestRunModel putParametersItem(String key, String parametersItem) {
    if (this.parameters == null || !this.parameters.isPresent()) {
      this.parameters = JsonNullable.<Map<String, String>>of(new HashMap<>());
    }
    try {
      this.parameters.get().put(key, parametersItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * \&quot;&lt;b&gt;parameter&lt;/b&gt;\&quot;: \&quot;&lt;b&gt;value&lt;/b&gt;\&quot; pair with arbitrary custom parameters. Multiple parameters can be sent.
   * @return parameters
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Map<String, String> getParameters() {
        return parameters.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PARAMETERS)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Map<String, String>> getParameters_JsonNullable() {
    return parameters;
  }
  
  @JsonProperty(JSON_PROPERTY_PARAMETERS)
  public void setParameters_JsonNullable(JsonNullable<Map<String, String>> parameters) {
    this.parameters = parameters;
  }

  public void setParameters(Map<String, String> parameters) {
    this.parameters = JsonNullable.<Map<String, String>>of(parameters);
  }


  public AutoTestResultsForTestRunModel properties(Map<String, String> properties) {
    this.properties = JsonNullable.<Map<String, String>>of(properties);
    return this;
  }

  public AutoTestResultsForTestRunModel putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null || !this.properties.isPresent()) {
      this.properties = JsonNullable.<Map<String, String>>of(new HashMap<>());
    }
    try {
      this.properties.get().put(key, propertiesItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * \&quot;&lt;b&gt;property&lt;/b&gt;\&quot;: \&quot;&lt;b&gt;value&lt;/b&gt;\&quot; pair with arbitrary custom properties. Multiple properties can be sent.
   * @return properties
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Map<String, String> getProperties() {
        return properties.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Map<String, String>> getProperties_JsonNullable() {
    return properties;
  }
  
  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  public void setProperties_JsonNullable(JsonNullable<Map<String, String>> properties) {
    this.properties = properties;
  }

  public void setProperties(Map<String, String> properties) {
    this.properties = JsonNullable.<Map<String, String>>of(properties);
  }


  public AutoTestResultsForTestRunModel stepResults(List<AttachmentPutModelAutoTestStepResultsModel> stepResults) {
    this.stepResults = JsonNullable.<List<AttachmentPutModelAutoTestStepResultsModel>>of(stepResults);
    return this;
  }

  public AutoTestResultsForTestRunModel addStepResultsItem(AttachmentPutModelAutoTestStepResultsModel stepResultsItem) {
    if (this.stepResults == null || !this.stepResults.isPresent()) {
      this.stepResults = JsonNullable.<List<AttachmentPutModelAutoTestStepResultsModel>>of(new ArrayList<>());
    }
    try {
      this.stepResults.get().add(stepResultsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Specifies the results of individual steps.
   * @return stepResults
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<AttachmentPutModelAutoTestStepResultsModel> getStepResults() {
        return stepResults.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_STEP_RESULTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<AttachmentPutModelAutoTestStepResultsModel>> getStepResults_JsonNullable() {
    return stepResults;
  }
  
  @JsonProperty(JSON_PROPERTY_STEP_RESULTS)
  public void setStepResults_JsonNullable(JsonNullable<List<AttachmentPutModelAutoTestStepResultsModel>> stepResults) {
    this.stepResults = stepResults;
  }

  public void setStepResults(List<AttachmentPutModelAutoTestStepResultsModel> stepResults) {
    this.stepResults = JsonNullable.<List<AttachmentPutModelAutoTestStepResultsModel>>of(stepResults);
  }


  public AutoTestResultsForTestRunModel setupResults(List<AttachmentPutModelAutoTestStepResultsModel> setupResults) {
    this.setupResults = JsonNullable.<List<AttachmentPutModelAutoTestStepResultsModel>>of(setupResults);
    return this;
  }

  public AutoTestResultsForTestRunModel addSetupResultsItem(AttachmentPutModelAutoTestStepResultsModel setupResultsItem) {
    if (this.setupResults == null || !this.setupResults.isPresent()) {
      this.setupResults = JsonNullable.<List<AttachmentPutModelAutoTestStepResultsModel>>of(new ArrayList<>());
    }
    try {
      this.setupResults.get().add(setupResultsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Specifies the results of setup steps. For information on supported values, see the &#x60;stepResults&#x60; parameter above.
   * @return setupResults
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<AttachmentPutModelAutoTestStepResultsModel> getSetupResults() {
        return setupResults.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SETUP_RESULTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<AttachmentPutModelAutoTestStepResultsModel>> getSetupResults_JsonNullable() {
    return setupResults;
  }
  
  @JsonProperty(JSON_PROPERTY_SETUP_RESULTS)
  public void setSetupResults_JsonNullable(JsonNullable<List<AttachmentPutModelAutoTestStepResultsModel>> setupResults) {
    this.setupResults = setupResults;
  }

  public void setSetupResults(List<AttachmentPutModelAutoTestStepResultsModel> setupResults) {
    this.setupResults = JsonNullable.<List<AttachmentPutModelAutoTestStepResultsModel>>of(setupResults);
  }


  public AutoTestResultsForTestRunModel teardownResults(List<AttachmentPutModelAutoTestStepResultsModel> teardownResults) {
    this.teardownResults = JsonNullable.<List<AttachmentPutModelAutoTestStepResultsModel>>of(teardownResults);
    return this;
  }

  public AutoTestResultsForTestRunModel addTeardownResultsItem(AttachmentPutModelAutoTestStepResultsModel teardownResultsItem) {
    if (this.teardownResults == null || !this.teardownResults.isPresent()) {
      this.teardownResults = JsonNullable.<List<AttachmentPutModelAutoTestStepResultsModel>>of(new ArrayList<>());
    }
    try {
      this.teardownResults.get().add(teardownResultsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Specifies the results of the teardown steps. For information on supported values, see the &#x60;stepResults&#x60; parameter above.
   * @return teardownResults
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<AttachmentPutModelAutoTestStepResultsModel> getTeardownResults() {
        return teardownResults.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TEARDOWN_RESULTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<AttachmentPutModelAutoTestStepResultsModel>> getTeardownResults_JsonNullable() {
    return teardownResults;
  }
  
  @JsonProperty(JSON_PROPERTY_TEARDOWN_RESULTS)
  public void setTeardownResults_JsonNullable(JsonNullable<List<AttachmentPutModelAutoTestStepResultsModel>> teardownResults) {
    this.teardownResults = teardownResults;
  }

  public void setTeardownResults(List<AttachmentPutModelAutoTestStepResultsModel> teardownResults) {
    this.teardownResults = JsonNullable.<List<AttachmentPutModelAutoTestStepResultsModel>>of(teardownResults);
  }


  /**
   * Return true if this AutoTestResultsForTestRunModel object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutoTestResultsForTestRunModel autoTestResultsForTestRunModel = (AutoTestResultsForTestRunModel) o;
    return Objects.equals(this.configurationId, autoTestResultsForTestRunModel.configurationId) &&
        equalsNullable(this.links, autoTestResultsForTestRunModel.links) &&
        equalsNullable(this.failureReasonNames, autoTestResultsForTestRunModel.failureReasonNames) &&
        Objects.equals(this.autoTestExternalId, autoTestResultsForTestRunModel.autoTestExternalId) &&
        Objects.equals(this.outcome, autoTestResultsForTestRunModel.outcome) &&
        equalsNullable(this.message, autoTestResultsForTestRunModel.message) &&
        equalsNullable(this.traces, autoTestResultsForTestRunModel.traces) &&
        equalsNullable(this.startedOn, autoTestResultsForTestRunModel.startedOn) &&
        equalsNullable(this.completedOn, autoTestResultsForTestRunModel.completedOn) &&
        equalsNullable(this.duration, autoTestResultsForTestRunModel.duration) &&
        equalsNullable(this.attachments, autoTestResultsForTestRunModel.attachments) &&
        equalsNullable(this.parameters, autoTestResultsForTestRunModel.parameters) &&
        equalsNullable(this.properties, autoTestResultsForTestRunModel.properties) &&
        equalsNullable(this.stepResults, autoTestResultsForTestRunModel.stepResults) &&
        equalsNullable(this.setupResults, autoTestResultsForTestRunModel.setupResults) &&
        equalsNullable(this.teardownResults, autoTestResultsForTestRunModel.teardownResults);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(configurationId, hashCodeNullable(links), hashCodeNullable(failureReasonNames), autoTestExternalId, outcome, hashCodeNullable(message), hashCodeNullable(traces), hashCodeNullable(startedOn), hashCodeNullable(completedOn), hashCodeNullable(duration), hashCodeNullable(attachments), hashCodeNullable(parameters), hashCodeNullable(properties), hashCodeNullable(stepResults), hashCodeNullable(setupResults), hashCodeNullable(teardownResults));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutoTestResultsForTestRunModel {\n");
    sb.append("    configurationId: ").append(toIndentedString(configurationId)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    failureReasonNames: ").append(toIndentedString(failureReasonNames)).append("\n");
    sb.append("    autoTestExternalId: ").append(toIndentedString(autoTestExternalId)).append("\n");
    sb.append("    outcome: ").append(toIndentedString(outcome)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    traces: ").append(toIndentedString(traces)).append("\n");
    sb.append("    startedOn: ").append(toIndentedString(startedOn)).append("\n");
    sb.append("    completedOn: ").append(toIndentedString(completedOn)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    stepResults: ").append(toIndentedString(stepResults)).append("\n");
    sb.append("    setupResults: ").append(toIndentedString(setupResults)).append("\n");
    sb.append("    teardownResults: ").append(toIndentedString(teardownResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

