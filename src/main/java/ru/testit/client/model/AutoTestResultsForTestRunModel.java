/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import ru.testit.client.model.AttachmentPutModel;
import ru.testit.client.model.AttachmentPutModelAutoTestStepResultsModel;
import ru.testit.client.model.AvailableTestResultOutcome;
import ru.testit.client.model.FailureCategoryModel;
import ru.testit.client.model.LinkPostModel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import ru.testit.client.invoker.JSON;

/**
 * AutoTestResultsForTestRunModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class AutoTestResultsForTestRunModel {
  public static final String SERIALIZED_NAME_CONFIGURATION_ID = "configurationId";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_ID)
  @javax.annotation.Nonnull
  private UUID configurationId;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  @javax.annotation.Nullable
  private List<LinkPostModel> links;

  public static final String SERIALIZED_NAME_FAILURE_REASON_NAMES = "failureReasonNames";
  @SerializedName(SERIALIZED_NAME_FAILURE_REASON_NAMES)
  @javax.annotation.Nullable
  private List<FailureCategoryModel> failureReasonNames;

  public static final String SERIALIZED_NAME_AUTO_TEST_EXTERNAL_ID = "autoTestExternalId";
  @SerializedName(SERIALIZED_NAME_AUTO_TEST_EXTERNAL_ID)
  @javax.annotation.Nonnull
  private String autoTestExternalId;

  public static final String SERIALIZED_NAME_OUTCOME = "outcome";
  @SerializedName(SERIALIZED_NAME_OUTCOME)
  @javax.annotation.Nonnull
  private AvailableTestResultOutcome outcome;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  @javax.annotation.Nullable
  private String message;

  public static final String SERIALIZED_NAME_TRACES = "traces";
  @SerializedName(SERIALIZED_NAME_TRACES)
  @javax.annotation.Nullable
  private String traces;

  public static final String SERIALIZED_NAME_STARTED_ON = "startedOn";
  @SerializedName(SERIALIZED_NAME_STARTED_ON)
  @javax.annotation.Nullable
  private OffsetDateTime startedOn;

  public static final String SERIALIZED_NAME_COMPLETED_ON = "completedOn";
  @SerializedName(SERIALIZED_NAME_COMPLETED_ON)
  @javax.annotation.Nullable
  private OffsetDateTime completedOn;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  @javax.annotation.Nullable
  private Long duration;

  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  @javax.annotation.Nullable
  private List<AttachmentPutModel> attachments;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  @javax.annotation.Nullable
  private Map<String, String> parameters;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  @javax.annotation.Nullable
  private Map<String, String> properties;

  public static final String SERIALIZED_NAME_STEP_RESULTS = "stepResults";
  @SerializedName(SERIALIZED_NAME_STEP_RESULTS)
  @javax.annotation.Nullable
  private List<AttachmentPutModelAutoTestStepResultsModel> stepResults;

  public static final String SERIALIZED_NAME_SETUP_RESULTS = "setupResults";
  @SerializedName(SERIALIZED_NAME_SETUP_RESULTS)
  @javax.annotation.Nullable
  private List<AttachmentPutModelAutoTestStepResultsModel> setupResults;

  public static final String SERIALIZED_NAME_TEARDOWN_RESULTS = "teardownResults";
  @SerializedName(SERIALIZED_NAME_TEARDOWN_RESULTS)
  @javax.annotation.Nullable
  private List<AttachmentPutModelAutoTestStepResultsModel> teardownResults;

  public AutoTestResultsForTestRunModel() {
  }

  public AutoTestResultsForTestRunModel configurationId(@javax.annotation.Nonnull UUID configurationId) {
    this.configurationId = configurationId;
    return this;
  }

  /**
   * Specifies the GUID of the autotest configuration, which was specified when the test run was created.
   * @return configurationId
   */
  @javax.annotation.Nonnull
  public UUID getConfigurationId() {
    return configurationId;
  }

  public void setConfigurationId(@javax.annotation.Nonnull UUID configurationId) {
    this.configurationId = configurationId;
  }


  public AutoTestResultsForTestRunModel links(@javax.annotation.Nullable List<LinkPostModel> links) {
    this.links = links;
    return this;
  }

  public AutoTestResultsForTestRunModel addLinksItem(LinkPostModel linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

  /**
   * Specifies the links in the autotest.
   * @return links
   */
  @javax.annotation.Nullable
  public List<LinkPostModel> getLinks() {
    return links;
  }

  public void setLinks(@javax.annotation.Nullable List<LinkPostModel> links) {
    this.links = links;
  }


  public AutoTestResultsForTestRunModel failureReasonNames(@javax.annotation.Nullable List<FailureCategoryModel> failureReasonNames) {
    this.failureReasonNames = failureReasonNames;
    return this;
  }

  public AutoTestResultsForTestRunModel addFailureReasonNamesItem(FailureCategoryModel failureReasonNamesItem) {
    if (this.failureReasonNames == null) {
      this.failureReasonNames = new ArrayList<>();
    }
    this.failureReasonNames.add(failureReasonNamesItem);
    return this;
  }

  /**
   * Specifies the cause of autotest failure.
   * @return failureReasonNames
   */
  @javax.annotation.Nullable
  public List<FailureCategoryModel> getFailureReasonNames() {
    return failureReasonNames;
  }

  public void setFailureReasonNames(@javax.annotation.Nullable List<FailureCategoryModel> failureReasonNames) {
    this.failureReasonNames = failureReasonNames;
  }


  public AutoTestResultsForTestRunModel autoTestExternalId(@javax.annotation.Nonnull String autoTestExternalId) {
    this.autoTestExternalId = autoTestExternalId;
    return this;
  }

  /**
   * Specifies the external ID of the autotest, which was specified when the test run was created.
   * @return autoTestExternalId
   */
  @javax.annotation.Nonnull
  public String getAutoTestExternalId() {
    return autoTestExternalId;
  }

  public void setAutoTestExternalId(@javax.annotation.Nonnull String autoTestExternalId) {
    this.autoTestExternalId = autoTestExternalId;
  }


  public AutoTestResultsForTestRunModel outcome(@javax.annotation.Nonnull AvailableTestResultOutcome outcome) {
    this.outcome = outcome;
    return this;
  }

  /**
   * Specifies the result of the autotest execution.
   * @return outcome
   */
  @javax.annotation.Nonnull
  public AvailableTestResultOutcome getOutcome() {
    return outcome;
  }

  public void setOutcome(@javax.annotation.Nonnull AvailableTestResultOutcome outcome) {
    this.outcome = outcome;
  }


  public AutoTestResultsForTestRunModel message(@javax.annotation.Nullable String message) {
    this.message = message;
    return this;
  }

  /**
   * A comment for the result.
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(@javax.annotation.Nullable String message) {
    this.message = message;
  }


  public AutoTestResultsForTestRunModel traces(@javax.annotation.Nullable String traces) {
    this.traces = traces;
    return this;
  }

  /**
   * An extended comment or a stack trace.
   * @return traces
   */
  @javax.annotation.Nullable
  public String getTraces() {
    return traces;
  }

  public void setTraces(@javax.annotation.Nullable String traces) {
    this.traces = traces;
  }


  public AutoTestResultsForTestRunModel startedOn(@javax.annotation.Nullable OffsetDateTime startedOn) {
    this.startedOn = startedOn;
    return this;
  }

  /**
   * Test run start date.
   * @return startedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartedOn() {
    return startedOn;
  }

  public void setStartedOn(@javax.annotation.Nullable OffsetDateTime startedOn) {
    this.startedOn = startedOn;
  }


  public AutoTestResultsForTestRunModel completedOn(@javax.annotation.Nullable OffsetDateTime completedOn) {
    this.completedOn = completedOn;
    return this;
  }

  /**
   * Test run end date.
   * @return completedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCompletedOn() {
    return completedOn;
  }

  public void setCompletedOn(@javax.annotation.Nullable OffsetDateTime completedOn) {
    this.completedOn = completedOn;
  }


  public AutoTestResultsForTestRunModel duration(@javax.annotation.Nullable Long duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Expected or actual duration of the test run execution in milliseconds.
   * minimum: 0
   * maximum: 43200000000
   * @return duration
   */
  @javax.annotation.Nullable
  public Long getDuration() {
    return duration;
  }

  public void setDuration(@javax.annotation.Nullable Long duration) {
    this.duration = duration;
  }


  public AutoTestResultsForTestRunModel attachments(@javax.annotation.Nullable List<AttachmentPutModel> attachments) {
    this.attachments = attachments;
    return this;
  }

  public AutoTestResultsForTestRunModel addAttachmentsItem(AttachmentPutModel attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * Specifies an attachment GUID. Multiple values can be sent.
   * @return attachments
   */
  @javax.annotation.Nullable
  public List<AttachmentPutModel> getAttachments() {
    return attachments;
  }

  public void setAttachments(@javax.annotation.Nullable List<AttachmentPutModel> attachments) {
    this.attachments = attachments;
  }


  public AutoTestResultsForTestRunModel parameters(@javax.annotation.Nullable Map<String, String> parameters) {
    this.parameters = parameters;
    return this;
  }

  public AutoTestResultsForTestRunModel putParametersItem(String key, String parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

  /**
   * \&quot;&lt;b&gt;parameter&lt;/b&gt;\&quot;: \&quot;&lt;b&gt;value&lt;/b&gt;\&quot; pair with arbitrary custom parameters. Multiple parameters can be sent.
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map<String, String> getParameters() {
    return parameters;
  }

  public void setParameters(@javax.annotation.Nullable Map<String, String> parameters) {
    this.parameters = parameters;
  }


  public AutoTestResultsForTestRunModel properties(@javax.annotation.Nullable Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public AutoTestResultsForTestRunModel putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * \&quot;&lt;b&gt;property&lt;/b&gt;\&quot;: \&quot;&lt;b&gt;value&lt;/b&gt;\&quot; pair with arbitrary custom properties. Multiple properties can be sent.
   * @return properties
   */
  @javax.annotation.Nullable
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(@javax.annotation.Nullable Map<String, String> properties) {
    this.properties = properties;
  }


  public AutoTestResultsForTestRunModel stepResults(@javax.annotation.Nullable List<AttachmentPutModelAutoTestStepResultsModel> stepResults) {
    this.stepResults = stepResults;
    return this;
  }

  public AutoTestResultsForTestRunModel addStepResultsItem(AttachmentPutModelAutoTestStepResultsModel stepResultsItem) {
    if (this.stepResults == null) {
      this.stepResults = new ArrayList<>();
    }
    this.stepResults.add(stepResultsItem);
    return this;
  }

  /**
   * Specifies the results of individual steps.
   * @return stepResults
   */
  @javax.annotation.Nullable
  public List<AttachmentPutModelAutoTestStepResultsModel> getStepResults() {
    return stepResults;
  }

  public void setStepResults(@javax.annotation.Nullable List<AttachmentPutModelAutoTestStepResultsModel> stepResults) {
    this.stepResults = stepResults;
  }


  public AutoTestResultsForTestRunModel setupResults(@javax.annotation.Nullable List<AttachmentPutModelAutoTestStepResultsModel> setupResults) {
    this.setupResults = setupResults;
    return this;
  }

  public AutoTestResultsForTestRunModel addSetupResultsItem(AttachmentPutModelAutoTestStepResultsModel setupResultsItem) {
    if (this.setupResults == null) {
      this.setupResults = new ArrayList<>();
    }
    this.setupResults.add(setupResultsItem);
    return this;
  }

  /**
   * Specifies the results of setup steps. For information on supported values, see the &#x60;stepResults&#x60; parameter above.
   * @return setupResults
   */
  @javax.annotation.Nullable
  public List<AttachmentPutModelAutoTestStepResultsModel> getSetupResults() {
    return setupResults;
  }

  public void setSetupResults(@javax.annotation.Nullable List<AttachmentPutModelAutoTestStepResultsModel> setupResults) {
    this.setupResults = setupResults;
  }


  public AutoTestResultsForTestRunModel teardownResults(@javax.annotation.Nullable List<AttachmentPutModelAutoTestStepResultsModel> teardownResults) {
    this.teardownResults = teardownResults;
    return this;
  }

  public AutoTestResultsForTestRunModel addTeardownResultsItem(AttachmentPutModelAutoTestStepResultsModel teardownResultsItem) {
    if (this.teardownResults == null) {
      this.teardownResults = new ArrayList<>();
    }
    this.teardownResults.add(teardownResultsItem);
    return this;
  }

  /**
   * Specifies the results of the teardown steps. For information on supported values, see the &#x60;stepResults&#x60; parameter above.
   * @return teardownResults
   */
  @javax.annotation.Nullable
  public List<AttachmentPutModelAutoTestStepResultsModel> getTeardownResults() {
    return teardownResults;
  }

  public void setTeardownResults(@javax.annotation.Nullable List<AttachmentPutModelAutoTestStepResultsModel> teardownResults) {
    this.teardownResults = teardownResults;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutoTestResultsForTestRunModel autoTestResultsForTestRunModel = (AutoTestResultsForTestRunModel) o;
    return Objects.equals(this.configurationId, autoTestResultsForTestRunModel.configurationId) &&
        Objects.equals(this.links, autoTestResultsForTestRunModel.links) &&
        Objects.equals(this.failureReasonNames, autoTestResultsForTestRunModel.failureReasonNames) &&
        Objects.equals(this.autoTestExternalId, autoTestResultsForTestRunModel.autoTestExternalId) &&
        Objects.equals(this.outcome, autoTestResultsForTestRunModel.outcome) &&
        Objects.equals(this.message, autoTestResultsForTestRunModel.message) &&
        Objects.equals(this.traces, autoTestResultsForTestRunModel.traces) &&
        Objects.equals(this.startedOn, autoTestResultsForTestRunModel.startedOn) &&
        Objects.equals(this.completedOn, autoTestResultsForTestRunModel.completedOn) &&
        Objects.equals(this.duration, autoTestResultsForTestRunModel.duration) &&
        Objects.equals(this.attachments, autoTestResultsForTestRunModel.attachments) &&
        Objects.equals(this.parameters, autoTestResultsForTestRunModel.parameters) &&
        Objects.equals(this.properties, autoTestResultsForTestRunModel.properties) &&
        Objects.equals(this.stepResults, autoTestResultsForTestRunModel.stepResults) &&
        Objects.equals(this.setupResults, autoTestResultsForTestRunModel.setupResults) &&
        Objects.equals(this.teardownResults, autoTestResultsForTestRunModel.teardownResults);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(configurationId, links, failureReasonNames, autoTestExternalId, outcome, message, traces, startedOn, completedOn, duration, attachments, parameters, properties, stepResults, setupResults, teardownResults);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutoTestResultsForTestRunModel {\n");
    sb.append("    configurationId: ").append(toIndentedString(configurationId)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    failureReasonNames: ").append(toIndentedString(failureReasonNames)).append("\n");
    sb.append("    autoTestExternalId: ").append(toIndentedString(autoTestExternalId)).append("\n");
    sb.append("    outcome: ").append(toIndentedString(outcome)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    traces: ").append(toIndentedString(traces)).append("\n");
    sb.append("    startedOn: ").append(toIndentedString(startedOn)).append("\n");
    sb.append("    completedOn: ").append(toIndentedString(completedOn)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    stepResults: ").append(toIndentedString(stepResults)).append("\n");
    sb.append("    setupResults: ").append(toIndentedString(setupResults)).append("\n");
    sb.append("    teardownResults: ").append(toIndentedString(teardownResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("configurationId");
    openapiFields.add("links");
    openapiFields.add("failureReasonNames");
    openapiFields.add("autoTestExternalId");
    openapiFields.add("outcome");
    openapiFields.add("message");
    openapiFields.add("traces");
    openapiFields.add("startedOn");
    openapiFields.add("completedOn");
    openapiFields.add("duration");
    openapiFields.add("attachments");
    openapiFields.add("parameters");
    openapiFields.add("properties");
    openapiFields.add("stepResults");
    openapiFields.add("setupResults");
    openapiFields.add("teardownResults");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("configurationId");
    openapiRequiredFields.add("autoTestExternalId");
    openapiRequiredFields.add("outcome");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AutoTestResultsForTestRunModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AutoTestResultsForTestRunModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AutoTestResultsForTestRunModel is not found in the empty JSON string", AutoTestResultsForTestRunModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AutoTestResultsForTestRunModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AutoTestResultsForTestRunModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AutoTestResultsForTestRunModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("configurationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configurationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configurationId").toString()));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            LinkPostModel.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("failureReasonNames") != null && !jsonObj.get("failureReasonNames").isJsonNull() && !jsonObj.get("failureReasonNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `failureReasonNames` to be an array in the JSON string but got `%s`", jsonObj.get("failureReasonNames").toString()));
      }
      if (!jsonObj.get("autoTestExternalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoTestExternalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autoTestExternalId").toString()));
      }
      // validate the required field `outcome`
      AvailableTestResultOutcome.validateJsonElement(jsonObj.get("outcome"));
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("traces") != null && !jsonObj.get("traces").isJsonNull()) && !jsonObj.get("traces").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `traces` to be a primitive type in the JSON string but got `%s`", jsonObj.get("traces").toString()));
      }
      if (jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonNull()) {
        JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("attachments");
        if (jsonArrayattachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
          }

          // validate the optional field `attachments` (array)
          for (int i = 0; i < jsonArrayattachments.size(); i++) {
            AttachmentPutModel.validateJsonElement(jsonArrayattachments.get(i));
          };
        }
      }
      if (jsonObj.get("stepResults") != null && !jsonObj.get("stepResults").isJsonNull()) {
        JsonArray jsonArraystepResults = jsonObj.getAsJsonArray("stepResults");
        if (jsonArraystepResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("stepResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `stepResults` to be an array in the JSON string but got `%s`", jsonObj.get("stepResults").toString()));
          }

          // validate the optional field `stepResults` (array)
          for (int i = 0; i < jsonArraystepResults.size(); i++) {
            AttachmentPutModelAutoTestStepResultsModel.validateJsonElement(jsonArraystepResults.get(i));
          };
        }
      }
      if (jsonObj.get("setupResults") != null && !jsonObj.get("setupResults").isJsonNull()) {
        JsonArray jsonArraysetupResults = jsonObj.getAsJsonArray("setupResults");
        if (jsonArraysetupResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("setupResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `setupResults` to be an array in the JSON string but got `%s`", jsonObj.get("setupResults").toString()));
          }

          // validate the optional field `setupResults` (array)
          for (int i = 0; i < jsonArraysetupResults.size(); i++) {
            AttachmentPutModelAutoTestStepResultsModel.validateJsonElement(jsonArraysetupResults.get(i));
          };
        }
      }
      if (jsonObj.get("teardownResults") != null && !jsonObj.get("teardownResults").isJsonNull()) {
        JsonArray jsonArrayteardownResults = jsonObj.getAsJsonArray("teardownResults");
        if (jsonArrayteardownResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("teardownResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `teardownResults` to be an array in the JSON string but got `%s`", jsonObj.get("teardownResults").toString()));
          }

          // validate the optional field `teardownResults` (array)
          for (int i = 0; i < jsonArrayteardownResults.size(); i++) {
            AttachmentPutModelAutoTestStepResultsModel.validateJsonElement(jsonArrayteardownResults.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AutoTestResultsForTestRunModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AutoTestResultsForTestRunModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AutoTestResultsForTestRunModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AutoTestResultsForTestRunModel.class));

       return (TypeAdapter<T>) new TypeAdapter<AutoTestResultsForTestRunModel>() {
           @Override
           public void write(JsonWriter out, AutoTestResultsForTestRunModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AutoTestResultsForTestRunModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AutoTestResultsForTestRunModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AutoTestResultsForTestRunModel
   * @throws IOException if the JSON string is invalid with respect to AutoTestResultsForTestRunModel
   */
  public static AutoTestResultsForTestRunModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AutoTestResultsForTestRunModel.class);
  }

  /**
   * Convert an instance of AutoTestResultsForTestRunModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

