/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import ru.testit.client.invoker.JSON;


/**
 * AutoTestSearchIncludeApiModel
 */
@JsonPropertyOrder({
  AutoTestSearchIncludeApiModel.JSON_PROPERTY_INCLUDE_STEPS,
  AutoTestSearchIncludeApiModel.JSON_PROPERTY_INCLUDE_LINKS,
  AutoTestSearchIncludeApiModel.JSON_PROPERTY_INCLUDE_LABELS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0")
public class AutoTestSearchIncludeApiModel {
  public static final String JSON_PROPERTY_INCLUDE_STEPS = "includeSteps";
  private JsonNullable<Boolean> includeSteps = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_INCLUDE_LINKS = "includeLinks";
  private JsonNullable<Boolean> includeLinks = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_INCLUDE_LABELS = "includeLabels";
  private JsonNullable<Boolean> includeLabels = JsonNullable.<Boolean>undefined();

  public AutoTestSearchIncludeApiModel() { 
  }

  public AutoTestSearchIncludeApiModel includeSteps(Boolean includeSteps) {
    this.includeSteps = JsonNullable.<Boolean>of(includeSteps);
    return this;
  }

  /**
   * If autotest steps will be included
   * @return includeSteps
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Boolean getIncludeSteps() {
        return includeSteps.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_INCLUDE_STEPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getIncludeSteps_JsonNullable() {
    return includeSteps;
  }
  
  @JsonProperty(JSON_PROPERTY_INCLUDE_STEPS)
  public void setIncludeSteps_JsonNullable(JsonNullable<Boolean> includeSteps) {
    this.includeSteps = includeSteps;
  }

  public void setIncludeSteps(Boolean includeSteps) {
    this.includeSteps = JsonNullable.<Boolean>of(includeSteps);
  }


  public AutoTestSearchIncludeApiModel includeLinks(Boolean includeLinks) {
    this.includeLinks = JsonNullable.<Boolean>of(includeLinks);
    return this;
  }

  /**
   * If autotest links will be included
   * @return includeLinks
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Boolean getIncludeLinks() {
        return includeLinks.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_INCLUDE_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getIncludeLinks_JsonNullable() {
    return includeLinks;
  }
  
  @JsonProperty(JSON_PROPERTY_INCLUDE_LINKS)
  public void setIncludeLinks_JsonNullable(JsonNullable<Boolean> includeLinks) {
    this.includeLinks = includeLinks;
  }

  public void setIncludeLinks(Boolean includeLinks) {
    this.includeLinks = JsonNullable.<Boolean>of(includeLinks);
  }


  public AutoTestSearchIncludeApiModel includeLabels(Boolean includeLabels) {
    this.includeLabels = JsonNullable.<Boolean>of(includeLabels);
    return this;
  }

  /**
   * If autotest labels will be included
   * @return includeLabels
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Boolean getIncludeLabels() {
        return includeLabels.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_INCLUDE_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getIncludeLabels_JsonNullable() {
    return includeLabels;
  }
  
  @JsonProperty(JSON_PROPERTY_INCLUDE_LABELS)
  public void setIncludeLabels_JsonNullable(JsonNullable<Boolean> includeLabels) {
    this.includeLabels = includeLabels;
  }

  public void setIncludeLabels(Boolean includeLabels) {
    this.includeLabels = JsonNullable.<Boolean>of(includeLabels);
  }


  /**
   * Return true if this AutoTestSearchIncludeApiModel object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutoTestSearchIncludeApiModel autoTestSearchIncludeApiModel = (AutoTestSearchIncludeApiModel) o;
    return equalsNullable(this.includeSteps, autoTestSearchIncludeApiModel.includeSteps) &&
        equalsNullable(this.includeLinks, autoTestSearchIncludeApiModel.includeLinks) &&
        equalsNullable(this.includeLabels, autoTestSearchIncludeApiModel.includeLabels);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(includeSteps), hashCodeNullable(includeLinks), hashCodeNullable(includeLabels));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutoTestSearchIncludeApiModel {\n");
    sb.append("    includeSteps: ").append(toIndentedString(includeSteps)).append("\n");
    sb.append("    includeLinks: ").append(toIndentedString(includeLinks)).append("\n");
    sb.append("    includeLabels: ").append(toIndentedString(includeLabels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

