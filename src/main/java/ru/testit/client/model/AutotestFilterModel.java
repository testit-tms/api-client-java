/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import ru.testit.client.model.AutotestFilterModelCreatedDate;
import ru.testit.client.model.AutotestFilterModelModifiedDate;
import ru.testit.client.model.AutotestFilterModelStabilityPercentage;
import ru.testit.client.model.AutotestResultOutcome;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import ru.testit.client.invoker.JSON;


/**
 * AutotestFilterModel
 */
@JsonPropertyOrder({
  AutotestFilterModel.JSON_PROPERTY_PROJECT_IDS,
  AutotestFilterModel.JSON_PROPERTY_EXTERNAL_IDS,
  AutotestFilterModel.JSON_PROPERTY_GLOBAL_IDS,
  AutotestFilterModel.JSON_PROPERTY_NAME,
  AutotestFilterModel.JSON_PROPERTY_IS_FLAKY,
  AutotestFilterModel.JSON_PROPERTY_MUST_BE_APPROVED,
  AutotestFilterModel.JSON_PROPERTY_STABILITY_PERCENTAGE,
  AutotestFilterModel.JSON_PROPERTY_CREATED_DATE,
  AutotestFilterModel.JSON_PROPERTY_CREATED_BY_IDS,
  AutotestFilterModel.JSON_PROPERTY_MODIFIED_DATE,
  AutotestFilterModel.JSON_PROPERTY_MODIFIED_BY_IDS,
  AutotestFilterModel.JSON_PROPERTY_IS_DELETED,
  AutotestFilterModel.JSON_PROPERTY_NAMESPACE,
  AutotestFilterModel.JSON_PROPERTY_IS_EMPTY_NAMESPACE,
  AutotestFilterModel.JSON_PROPERTY_CLASS_NAME,
  AutotestFilterModel.JSON_PROPERTY_IS_EMPTY_CLASS_NAME,
  AutotestFilterModel.JSON_PROPERTY_LAST_TEST_RESULT_OUTCOME,
  AutotestFilterModel.JSON_PROPERTY_EXTERNAL_KEY
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AutotestFilterModel {
  public static final String JSON_PROPERTY_PROJECT_IDS = "projectIds";
  private JsonNullable<Set<UUID>> projectIds = JsonNullable.<Set<UUID>>undefined();

  public static final String JSON_PROPERTY_EXTERNAL_IDS = "externalIds";
  private JsonNullable<Set<String>> externalIds = JsonNullable.<Set<String>>undefined();

  public static final String JSON_PROPERTY_GLOBAL_IDS = "globalIds";
  private JsonNullable<Set<Long>> globalIds = JsonNullable.<Set<Long>>undefined();

  public static final String JSON_PROPERTY_NAME = "name";
  private JsonNullable<String> name = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_IS_FLAKY = "isFlaky";
  private JsonNullable<Boolean> isFlaky = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_MUST_BE_APPROVED = "mustBeApproved";
  private JsonNullable<Boolean> mustBeApproved = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_STABILITY_PERCENTAGE = "stabilityPercentage";
  private JsonNullable<AutotestFilterModelStabilityPercentage> stabilityPercentage = JsonNullable.<AutotestFilterModelStabilityPercentage>undefined();

  public static final String JSON_PROPERTY_CREATED_DATE = "createdDate";
  private JsonNullable<AutotestFilterModelCreatedDate> createdDate = JsonNullable.<AutotestFilterModelCreatedDate>undefined();

  public static final String JSON_PROPERTY_CREATED_BY_IDS = "createdByIds";
  private JsonNullable<Set<UUID>> createdByIds = JsonNullable.<Set<UUID>>undefined();

  public static final String JSON_PROPERTY_MODIFIED_DATE = "modifiedDate";
  private JsonNullable<AutotestFilterModelModifiedDate> modifiedDate = JsonNullable.<AutotestFilterModelModifiedDate>undefined();

  public static final String JSON_PROPERTY_MODIFIED_BY_IDS = "modifiedByIds";
  private JsonNullable<Set<UUID>> modifiedByIds = JsonNullable.<Set<UUID>>undefined();

  public static final String JSON_PROPERTY_IS_DELETED = "isDeleted";
  private JsonNullable<Boolean> isDeleted = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_NAMESPACE = "namespace";
  private JsonNullable<String> namespace = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_IS_EMPTY_NAMESPACE = "isEmptyNamespace";
  private JsonNullable<Boolean> isEmptyNamespace = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_CLASS_NAME = "className";
  private JsonNullable<String> className = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_IS_EMPTY_CLASS_NAME = "isEmptyClassName";
  private JsonNullable<Boolean> isEmptyClassName = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_LAST_TEST_RESULT_OUTCOME = "lastTestResultOutcome";
  private JsonNullable<AutotestResultOutcome> lastTestResultOutcome = JsonNullable.<AutotestResultOutcome>undefined();

  public static final String JSON_PROPERTY_EXTERNAL_KEY = "externalKey";
  private JsonNullable<String> externalKey = JsonNullable.<String>undefined();

  public AutotestFilterModel() { 
  }

  public AutotestFilterModel projectIds(Set<UUID> projectIds) {
    this.projectIds = JsonNullable.<Set<UUID>>of(projectIds);
    return this;
  }

  public AutotestFilterModel addProjectIdsItem(UUID projectIdsItem) {
    if (this.projectIds == null || !this.projectIds.isPresent()) {
      this.projectIds = JsonNullable.<Set<UUID>>of(new LinkedHashSet<>());
    }
    try {
      this.projectIds.get().add(projectIdsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Specifies an autotest projects IDs to search for
   * @return projectIds
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Set<UUID> getProjectIds() {
        return projectIds.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PROJECT_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Set<UUID>> getProjectIds_JsonNullable() {
    return projectIds;
  }
  
  @JsonProperty(JSON_PROPERTY_PROJECT_IDS)
  public void setProjectIds_JsonNullable(JsonNullable<Set<UUID>> projectIds) {
    this.projectIds = projectIds;
  }

  public void setProjectIds(Set<UUID> projectIds) {
    this.projectIds = JsonNullable.<Set<UUID>>of(projectIds);
  }


  public AutotestFilterModel externalIds(Set<String> externalIds) {
    this.externalIds = JsonNullable.<Set<String>>of(externalIds);
    return this;
  }

  public AutotestFilterModel addExternalIdsItem(String externalIdsItem) {
    if (this.externalIds == null || !this.externalIds.isPresent()) {
      this.externalIds = JsonNullable.<Set<String>>of(new LinkedHashSet<>());
    }
    try {
      this.externalIds.get().add(externalIdsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Specifies an autotest external IDs to search for
   * @return externalIds
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Set<String> getExternalIds() {
        return externalIds.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EXTERNAL_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Set<String>> getExternalIds_JsonNullable() {
    return externalIds;
  }
  
  @JsonProperty(JSON_PROPERTY_EXTERNAL_IDS)
  public void setExternalIds_JsonNullable(JsonNullable<Set<String>> externalIds) {
    this.externalIds = externalIds;
  }

  public void setExternalIds(Set<String> externalIds) {
    this.externalIds = JsonNullable.<Set<String>>of(externalIds);
  }


  public AutotestFilterModel globalIds(Set<Long> globalIds) {
    this.globalIds = JsonNullable.<Set<Long>>of(globalIds);
    return this;
  }

  public AutotestFilterModel addGlobalIdsItem(Long globalIdsItem) {
    if (this.globalIds == null || !this.globalIds.isPresent()) {
      this.globalIds = JsonNullable.<Set<Long>>of(new LinkedHashSet<>());
    }
    try {
      this.globalIds.get().add(globalIdsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Specifies an autotest global IDs to search for
   * @return globalIds
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Set<Long> getGlobalIds() {
        return globalIds.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_GLOBAL_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Set<Long>> getGlobalIds_JsonNullable() {
    return globalIds;
  }
  
  @JsonProperty(JSON_PROPERTY_GLOBAL_IDS)
  public void setGlobalIds_JsonNullable(JsonNullable<Set<Long>> globalIds) {
    this.globalIds = globalIds;
  }

  public void setGlobalIds(Set<Long> globalIds) {
    this.globalIds = JsonNullable.<Set<Long>>of(globalIds);
  }


  public AutotestFilterModel name(String name) {
    this.name = JsonNullable.<String>of(name);
    return this;
  }

   /**
   * Specifies an autotest name to search for
   * @return name
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getName() {
        return name.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getName_JsonNullable() {
    return name;
  }
  
  @JsonProperty(JSON_PROPERTY_NAME)
  public void setName_JsonNullable(JsonNullable<String> name) {
    this.name = name;
  }

  public void setName(String name) {
    this.name = JsonNullable.<String>of(name);
  }


  public AutotestFilterModel isFlaky(Boolean isFlaky) {
    this.isFlaky = JsonNullable.<Boolean>of(isFlaky);
    return this;
  }

   /**
   * Specifies an autotest flaky status to search for
   * @return isFlaky
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Boolean getIsFlaky() {
        return isFlaky.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_IS_FLAKY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getIsFlaky_JsonNullable() {
    return isFlaky;
  }
  
  @JsonProperty(JSON_PROPERTY_IS_FLAKY)
  public void setIsFlaky_JsonNullable(JsonNullable<Boolean> isFlaky) {
    this.isFlaky = isFlaky;
  }

  public void setIsFlaky(Boolean isFlaky) {
    this.isFlaky = JsonNullable.<Boolean>of(isFlaky);
  }


  public AutotestFilterModel mustBeApproved(Boolean mustBeApproved) {
    this.mustBeApproved = JsonNullable.<Boolean>of(mustBeApproved);
    return this;
  }

   /**
   * Specifies an autotest unapproved changes status to search for
   * @return mustBeApproved
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Boolean getMustBeApproved() {
        return mustBeApproved.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MUST_BE_APPROVED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getMustBeApproved_JsonNullable() {
    return mustBeApproved;
  }
  
  @JsonProperty(JSON_PROPERTY_MUST_BE_APPROVED)
  public void setMustBeApproved_JsonNullable(JsonNullable<Boolean> mustBeApproved) {
    this.mustBeApproved = mustBeApproved;
  }

  public void setMustBeApproved(Boolean mustBeApproved) {
    this.mustBeApproved = JsonNullable.<Boolean>of(mustBeApproved);
  }


  public AutotestFilterModel stabilityPercentage(AutotestFilterModelStabilityPercentage stabilityPercentage) {
    this.stabilityPercentage = JsonNullable.<AutotestFilterModelStabilityPercentage>of(stabilityPercentage);
    return this;
  }

   /**
   * Get stabilityPercentage
   * @return stabilityPercentage
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public AutotestFilterModelStabilityPercentage getStabilityPercentage() {
        return stabilityPercentage.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_STABILITY_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<AutotestFilterModelStabilityPercentage> getStabilityPercentage_JsonNullable() {
    return stabilityPercentage;
  }
  
  @JsonProperty(JSON_PROPERTY_STABILITY_PERCENTAGE)
  public void setStabilityPercentage_JsonNullable(JsonNullable<AutotestFilterModelStabilityPercentage> stabilityPercentage) {
    this.stabilityPercentage = stabilityPercentage;
  }

  public void setStabilityPercentage(AutotestFilterModelStabilityPercentage stabilityPercentage) {
    this.stabilityPercentage = JsonNullable.<AutotestFilterModelStabilityPercentage>of(stabilityPercentage);
  }


  public AutotestFilterModel createdDate(AutotestFilterModelCreatedDate createdDate) {
    this.createdDate = JsonNullable.<AutotestFilterModelCreatedDate>of(createdDate);
    return this;
  }

   /**
   * Get createdDate
   * @return createdDate
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public AutotestFilterModelCreatedDate getCreatedDate() {
        return createdDate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CREATED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<AutotestFilterModelCreatedDate> getCreatedDate_JsonNullable() {
    return createdDate;
  }
  
  @JsonProperty(JSON_PROPERTY_CREATED_DATE)
  public void setCreatedDate_JsonNullable(JsonNullable<AutotestFilterModelCreatedDate> createdDate) {
    this.createdDate = createdDate;
  }

  public void setCreatedDate(AutotestFilterModelCreatedDate createdDate) {
    this.createdDate = JsonNullable.<AutotestFilterModelCreatedDate>of(createdDate);
  }


  public AutotestFilterModel createdByIds(Set<UUID> createdByIds) {
    this.createdByIds = JsonNullable.<Set<UUID>>of(createdByIds);
    return this;
  }

  public AutotestFilterModel addCreatedByIdsItem(UUID createdByIdsItem) {
    if (this.createdByIds == null || !this.createdByIds.isPresent()) {
      this.createdByIds = JsonNullable.<Set<UUID>>of(new LinkedHashSet<>());
    }
    try {
      this.createdByIds.get().add(createdByIdsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Specifies an autotest creator IDs to search for
   * @return createdByIds
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Set<UUID> getCreatedByIds() {
        return createdByIds.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CREATED_BY_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Set<UUID>> getCreatedByIds_JsonNullable() {
    return createdByIds;
  }
  
  @JsonProperty(JSON_PROPERTY_CREATED_BY_IDS)
  public void setCreatedByIds_JsonNullable(JsonNullable<Set<UUID>> createdByIds) {
    this.createdByIds = createdByIds;
  }

  public void setCreatedByIds(Set<UUID> createdByIds) {
    this.createdByIds = JsonNullable.<Set<UUID>>of(createdByIds);
  }


  public AutotestFilterModel modifiedDate(AutotestFilterModelModifiedDate modifiedDate) {
    this.modifiedDate = JsonNullable.<AutotestFilterModelModifiedDate>of(modifiedDate);
    return this;
  }

   /**
   * Get modifiedDate
   * @return modifiedDate
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public AutotestFilterModelModifiedDate getModifiedDate() {
        return modifiedDate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MODIFIED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<AutotestFilterModelModifiedDate> getModifiedDate_JsonNullable() {
    return modifiedDate;
  }
  
  @JsonProperty(JSON_PROPERTY_MODIFIED_DATE)
  public void setModifiedDate_JsonNullable(JsonNullable<AutotestFilterModelModifiedDate> modifiedDate) {
    this.modifiedDate = modifiedDate;
  }

  public void setModifiedDate(AutotestFilterModelModifiedDate modifiedDate) {
    this.modifiedDate = JsonNullable.<AutotestFilterModelModifiedDate>of(modifiedDate);
  }


  public AutotestFilterModel modifiedByIds(Set<UUID> modifiedByIds) {
    this.modifiedByIds = JsonNullable.<Set<UUID>>of(modifiedByIds);
    return this;
  }

  public AutotestFilterModel addModifiedByIdsItem(UUID modifiedByIdsItem) {
    if (this.modifiedByIds == null || !this.modifiedByIds.isPresent()) {
      this.modifiedByIds = JsonNullable.<Set<UUID>>of(new LinkedHashSet<>());
    }
    try {
      this.modifiedByIds.get().add(modifiedByIdsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Specifies an autotest last editor IDs to search for
   * @return modifiedByIds
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Set<UUID> getModifiedByIds() {
        return modifiedByIds.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MODIFIED_BY_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Set<UUID>> getModifiedByIds_JsonNullable() {
    return modifiedByIds;
  }
  
  @JsonProperty(JSON_PROPERTY_MODIFIED_BY_IDS)
  public void setModifiedByIds_JsonNullable(JsonNullable<Set<UUID>> modifiedByIds) {
    this.modifiedByIds = modifiedByIds;
  }

  public void setModifiedByIds(Set<UUID> modifiedByIds) {
    this.modifiedByIds = JsonNullable.<Set<UUID>>of(modifiedByIds);
  }


  public AutotestFilterModel isDeleted(Boolean isDeleted) {
    this.isDeleted = JsonNullable.<Boolean>of(isDeleted);
    return this;
  }

   /**
   * Specifies an autotest deleted status to search for
   * @return isDeleted
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Boolean getIsDeleted() {
        return isDeleted.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_IS_DELETED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getIsDeleted_JsonNullable() {
    return isDeleted;
  }
  
  @JsonProperty(JSON_PROPERTY_IS_DELETED)
  public void setIsDeleted_JsonNullable(JsonNullable<Boolean> isDeleted) {
    this.isDeleted = isDeleted;
  }

  public void setIsDeleted(Boolean isDeleted) {
    this.isDeleted = JsonNullable.<Boolean>of(isDeleted);
  }


  public AutotestFilterModel namespace(String namespace) {
    this.namespace = JsonNullable.<String>of(namespace);
    return this;
  }

   /**
   * Specifies an autotest namespace to search for
   * @return namespace
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getNamespace() {
        return namespace.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NAMESPACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getNamespace_JsonNullable() {
    return namespace;
  }
  
  @JsonProperty(JSON_PROPERTY_NAMESPACE)
  public void setNamespace_JsonNullable(JsonNullable<String> namespace) {
    this.namespace = namespace;
  }

  public void setNamespace(String namespace) {
    this.namespace = JsonNullable.<String>of(namespace);
  }


  public AutotestFilterModel isEmptyNamespace(Boolean isEmptyNamespace) {
    this.isEmptyNamespace = JsonNullable.<Boolean>of(isEmptyNamespace);
    return this;
  }

   /**
   * Specifies an autotest namespace name presence status to search for
   * @return isEmptyNamespace
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Boolean getIsEmptyNamespace() {
        return isEmptyNamespace.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_IS_EMPTY_NAMESPACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getIsEmptyNamespace_JsonNullable() {
    return isEmptyNamespace;
  }
  
  @JsonProperty(JSON_PROPERTY_IS_EMPTY_NAMESPACE)
  public void setIsEmptyNamespace_JsonNullable(JsonNullable<Boolean> isEmptyNamespace) {
    this.isEmptyNamespace = isEmptyNamespace;
  }

  public void setIsEmptyNamespace(Boolean isEmptyNamespace) {
    this.isEmptyNamespace = JsonNullable.<Boolean>of(isEmptyNamespace);
  }


  public AutotestFilterModel className(String className) {
    this.className = JsonNullable.<String>of(className);
    return this;
  }

   /**
   * Specifies an autotest class name to search for
   * @return className
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getClassName() {
        return className.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CLASS_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getClassName_JsonNullable() {
    return className;
  }
  
  @JsonProperty(JSON_PROPERTY_CLASS_NAME)
  public void setClassName_JsonNullable(JsonNullable<String> className) {
    this.className = className;
  }

  public void setClassName(String className) {
    this.className = JsonNullable.<String>of(className);
  }


  public AutotestFilterModel isEmptyClassName(Boolean isEmptyClassName) {
    this.isEmptyClassName = JsonNullable.<Boolean>of(isEmptyClassName);
    return this;
  }

   /**
   * Specifies an autotest class name presence status to search for
   * @return isEmptyClassName
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Boolean getIsEmptyClassName() {
        return isEmptyClassName.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_IS_EMPTY_CLASS_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getIsEmptyClassName_JsonNullable() {
    return isEmptyClassName;
  }
  
  @JsonProperty(JSON_PROPERTY_IS_EMPTY_CLASS_NAME)
  public void setIsEmptyClassName_JsonNullable(JsonNullable<Boolean> isEmptyClassName) {
    this.isEmptyClassName = isEmptyClassName;
  }

  public void setIsEmptyClassName(Boolean isEmptyClassName) {
    this.isEmptyClassName = JsonNullable.<Boolean>of(isEmptyClassName);
  }


  public AutotestFilterModel lastTestResultOutcome(AutotestResultOutcome lastTestResultOutcome) {
    this.lastTestResultOutcome = JsonNullable.<AutotestResultOutcome>of(lastTestResultOutcome);
    return this;
  }

   /**
   * Get lastTestResultOutcome
   * @return lastTestResultOutcome
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public AutotestResultOutcome getLastTestResultOutcome() {
        return lastTestResultOutcome.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_LAST_TEST_RESULT_OUTCOME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<AutotestResultOutcome> getLastTestResultOutcome_JsonNullable() {
    return lastTestResultOutcome;
  }
  
  @JsonProperty(JSON_PROPERTY_LAST_TEST_RESULT_OUTCOME)
  public void setLastTestResultOutcome_JsonNullable(JsonNullable<AutotestResultOutcome> lastTestResultOutcome) {
    this.lastTestResultOutcome = lastTestResultOutcome;
  }

  public void setLastTestResultOutcome(AutotestResultOutcome lastTestResultOutcome) {
    this.lastTestResultOutcome = JsonNullable.<AutotestResultOutcome>of(lastTestResultOutcome);
  }


  public AutotestFilterModel externalKey(String externalKey) {
    this.externalKey = JsonNullable.<String>of(externalKey);
    return this;
  }

   /**
   * Specifies an autotest external key to search for
   * @return externalKey
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getExternalKey() {
        return externalKey.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EXTERNAL_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getExternalKey_JsonNullable() {
    return externalKey;
  }
  
  @JsonProperty(JSON_PROPERTY_EXTERNAL_KEY)
  public void setExternalKey_JsonNullable(JsonNullable<String> externalKey) {
    this.externalKey = externalKey;
  }

  public void setExternalKey(String externalKey) {
    this.externalKey = JsonNullable.<String>of(externalKey);
  }


  /**
   * Return true if this AutotestFilterModel object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutotestFilterModel autotestFilterModel = (AutotestFilterModel) o;
    return equalsNullable(this.projectIds, autotestFilterModel.projectIds) &&
        equalsNullable(this.externalIds, autotestFilterModel.externalIds) &&
        equalsNullable(this.globalIds, autotestFilterModel.globalIds) &&
        equalsNullable(this.name, autotestFilterModel.name) &&
        equalsNullable(this.isFlaky, autotestFilterModel.isFlaky) &&
        equalsNullable(this.mustBeApproved, autotestFilterModel.mustBeApproved) &&
        equalsNullable(this.stabilityPercentage, autotestFilterModel.stabilityPercentage) &&
        equalsNullable(this.createdDate, autotestFilterModel.createdDate) &&
        equalsNullable(this.createdByIds, autotestFilterModel.createdByIds) &&
        equalsNullable(this.modifiedDate, autotestFilterModel.modifiedDate) &&
        equalsNullable(this.modifiedByIds, autotestFilterModel.modifiedByIds) &&
        equalsNullable(this.isDeleted, autotestFilterModel.isDeleted) &&
        equalsNullable(this.namespace, autotestFilterModel.namespace) &&
        equalsNullable(this.isEmptyNamespace, autotestFilterModel.isEmptyNamespace) &&
        equalsNullable(this.className, autotestFilterModel.className) &&
        equalsNullable(this.isEmptyClassName, autotestFilterModel.isEmptyClassName) &&
        equalsNullable(this.lastTestResultOutcome, autotestFilterModel.lastTestResultOutcome) &&
        equalsNullable(this.externalKey, autotestFilterModel.externalKey);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(projectIds), hashCodeNullable(externalIds), hashCodeNullable(globalIds), hashCodeNullable(name), hashCodeNullable(isFlaky), hashCodeNullable(mustBeApproved), hashCodeNullable(stabilityPercentage), hashCodeNullable(createdDate), hashCodeNullable(createdByIds), hashCodeNullable(modifiedDate), hashCodeNullable(modifiedByIds), hashCodeNullable(isDeleted), hashCodeNullable(namespace), hashCodeNullable(isEmptyNamespace), hashCodeNullable(className), hashCodeNullable(isEmptyClassName), hashCodeNullable(lastTestResultOutcome), hashCodeNullable(externalKey));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutotestFilterModel {\n");
    sb.append("    projectIds: ").append(toIndentedString(projectIds)).append("\n");
    sb.append("    externalIds: ").append(toIndentedString(externalIds)).append("\n");
    sb.append("    globalIds: ").append(toIndentedString(globalIds)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    isFlaky: ").append(toIndentedString(isFlaky)).append("\n");
    sb.append("    mustBeApproved: ").append(toIndentedString(mustBeApproved)).append("\n");
    sb.append("    stabilityPercentage: ").append(toIndentedString(stabilityPercentage)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    createdByIds: ").append(toIndentedString(createdByIds)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("    modifiedByIds: ").append(toIndentedString(modifiedByIds)).append("\n");
    sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    isEmptyNamespace: ").append(toIndentedString(isEmptyNamespace)).append("\n");
    sb.append("    className: ").append(toIndentedString(className)).append("\n");
    sb.append("    isEmptyClassName: ").append(toIndentedString(isEmptyClassName)).append("\n");
    sb.append("    lastTestResultOutcome: ").append(toIndentedString(lastTestResultOutcome)).append("\n");
    sb.append("    externalKey: ").append(toIndentedString(externalKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

