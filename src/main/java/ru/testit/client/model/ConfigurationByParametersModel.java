/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import ru.testit.client.invoker.JSON;


/**
 * ConfigurationByParametersModel
 */
@JsonPropertyOrder({
  ConfigurationByParametersModel.JSON_PROPERTY_PROJECT_ID,
  ConfigurationByParametersModel.JSON_PROPERTY_PARAMETER_IDS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0")
public class ConfigurationByParametersModel {
  public static final String JSON_PROPERTY_PROJECT_ID = "projectId";
  private UUID projectId;

  public static final String JSON_PROPERTY_PARAMETER_IDS = "parameterIds";
  private Set<UUID> parameterIds = new LinkedHashSet<>();

  public ConfigurationByParametersModel() { 
  }

  public ConfigurationByParametersModel projectId(UUID projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * This property is used to link configuration with project
   * @return projectId
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PROJECT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getProjectId() {
    return projectId;
  }


  @JsonProperty(JSON_PROPERTY_PROJECT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProjectId(UUID projectId) {
    this.projectId = projectId;
  }


  public ConfigurationByParametersModel parameterIds(Set<UUID> parameterIds) {
    this.parameterIds = parameterIds;
    return this;
  }

  public ConfigurationByParametersModel addParameterIdsItem(UUID parameterIdsItem) {
    if (this.parameterIds == null) {
      this.parameterIds = new LinkedHashSet<>();
    }
    this.parameterIds.add(parameterIdsItem);
    return this;
  }

  /**
   * Get parameterIds
   * @return parameterIds
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PARAMETER_IDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Set<UUID> getParameterIds() {
    return parameterIds;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_PARAMETER_IDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setParameterIds(Set<UUID> parameterIds) {
    this.parameterIds = parameterIds;
  }


  /**
   * Return true if this ConfigurationByParametersModel object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigurationByParametersModel configurationByParametersModel = (ConfigurationByParametersModel) o;
    return Objects.equals(this.projectId, configurationByParametersModel.projectId) &&
        Objects.equals(this.parameterIds, configurationByParametersModel.parameterIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(projectId, parameterIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigurationByParametersModel {\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    parameterIds: ").append(toIndentedString(parameterIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

