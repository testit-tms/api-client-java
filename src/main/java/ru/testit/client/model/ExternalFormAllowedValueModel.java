/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import ru.testit.client.invoker.JSON;


/**
 * ExternalFormAllowedValueModel
 */
@JsonPropertyOrder({
  ExternalFormAllowedValueModel.JSON_PROPERTY_HAS_CHILDREN,
  ExternalFormAllowedValueModel.JSON_PROPERTY_ID,
  ExternalFormAllowedValueModel.JSON_PROPERTY_NAME,
  ExternalFormAllowedValueModel.JSON_PROPERTY_PARENT_ID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0")
public class ExternalFormAllowedValueModel {
  public static final String JSON_PROPERTY_HAS_CHILDREN = "hasChildren";
  private Boolean hasChildren;

  public static final String JSON_PROPERTY_ID = "id";
  private JsonNullable<String> id = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_NAME = "name";
  private JsonNullable<String> name = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_PARENT_ID = "parentId";
  private JsonNullable<String> parentId = JsonNullable.<String>undefined();

  public ExternalFormAllowedValueModel() { 
  }

  public ExternalFormAllowedValueModel hasChildren(Boolean hasChildren) {
    this.hasChildren = hasChildren;
    return this;
  }

  /**
   * Get hasChildren
   * @return hasChildren
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HAS_CHILDREN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getHasChildren() {
    return hasChildren;
  }


  @JsonProperty(JSON_PROPERTY_HAS_CHILDREN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHasChildren(Boolean hasChildren) {
    this.hasChildren = hasChildren;
  }


  public ExternalFormAllowedValueModel id(String id) {
    this.id = JsonNullable.<String>of(id);
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getId() {
        return id.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getId_JsonNullable() {
    return id;
  }
  
  @JsonProperty(JSON_PROPERTY_ID)
  public void setId_JsonNullable(JsonNullable<String> id) {
    this.id = id;
  }

  public void setId(String id) {
    this.id = JsonNullable.<String>of(id);
  }


  public ExternalFormAllowedValueModel name(String name) {
    this.name = JsonNullable.<String>of(name);
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getName() {
        return name.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getName_JsonNullable() {
    return name;
  }
  
  @JsonProperty(JSON_PROPERTY_NAME)
  public void setName_JsonNullable(JsonNullable<String> name) {
    this.name = name;
  }

  public void setName(String name) {
    this.name = JsonNullable.<String>of(name);
  }


  public ExternalFormAllowedValueModel parentId(String parentId) {
    this.parentId = JsonNullable.<String>of(parentId);
    return this;
  }

  /**
   * Get parentId
   * @return parentId
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getParentId() {
        return parentId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PARENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getParentId_JsonNullable() {
    return parentId;
  }
  
  @JsonProperty(JSON_PROPERTY_PARENT_ID)
  public void setParentId_JsonNullable(JsonNullable<String> parentId) {
    this.parentId = parentId;
  }

  public void setParentId(String parentId) {
    this.parentId = JsonNullable.<String>of(parentId);
  }


  /**
   * Return true if this ExternalFormAllowedValueModel object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExternalFormAllowedValueModel externalFormAllowedValueModel = (ExternalFormAllowedValueModel) o;
    return Objects.equals(this.hasChildren, externalFormAllowedValueModel.hasChildren) &&
        equalsNullable(this.id, externalFormAllowedValueModel.id) &&
        equalsNullable(this.name, externalFormAllowedValueModel.name) &&
        equalsNullable(this.parentId, externalFormAllowedValueModel.parentId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hasChildren, hashCodeNullable(id), hashCodeNullable(name), hashCodeNullable(parentId));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExternalFormAllowedValueModel {\n");
    sb.append("    hasChildren: ").append(toIndentedString(hasChildren)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

