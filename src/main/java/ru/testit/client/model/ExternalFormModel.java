/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import ru.testit.client.model.ExternalFormAllowedValueModel;
import ru.testit.client.model.ExternalFormFieldModel;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import ru.testit.client.invoker.JSON;


/**
 * ExternalFormModel
 */
@JsonPropertyOrder({
  ExternalFormModel.JSON_PROPERTY_FIELDS,
  ExternalFormModel.JSON_PROPERTY_POSSIBLE_VALUES
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0")
public class ExternalFormModel {
  public static final String JSON_PROPERTY_FIELDS = "fields";
  private List<ExternalFormFieldModel> fields = new ArrayList<>();

  public static final String JSON_PROPERTY_POSSIBLE_VALUES = "possibleValues";
  private Map<String, List<ExternalFormAllowedValueModel>> possibleValues = new HashMap<>();

  public ExternalFormModel() { 
  }

  public ExternalFormModel fields(List<ExternalFormFieldModel> fields) {
    this.fields = fields;
    return this;
  }

  public ExternalFormModel addFieldsItem(ExternalFormFieldModel fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

  /**
   * Get fields
   * @return fields
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FIELDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ExternalFormFieldModel> getFields() {
    return fields;
  }


  @JsonProperty(JSON_PROPERTY_FIELDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFields(List<ExternalFormFieldModel> fields) {
    this.fields = fields;
  }


  public ExternalFormModel possibleValues(Map<String, List<ExternalFormAllowedValueModel>> possibleValues) {
    this.possibleValues = possibleValues;
    return this;
  }

  public ExternalFormModel putPossibleValuesItem(String key, List<ExternalFormAllowedValueModel> possibleValuesItem) {
    if (this.possibleValues == null) {
      this.possibleValues = new HashMap<>();
    }
    this.possibleValues.put(key, possibleValuesItem);
    return this;
  }

  /**
   * Get possibleValues
   * @return possibleValues
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_POSSIBLE_VALUES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Map<String, List<ExternalFormAllowedValueModel>> getPossibleValues() {
    return possibleValues;
  }


  @JsonProperty(JSON_PROPERTY_POSSIBLE_VALUES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPossibleValues(Map<String, List<ExternalFormAllowedValueModel>> possibleValues) {
    this.possibleValues = possibleValues;
  }


  /**
   * Return true if this ExternalFormModel object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExternalFormModel externalFormModel = (ExternalFormModel) o;
    return Objects.equals(this.fields, externalFormModel.fields) &&
        Objects.equals(this.possibleValues, externalFormModel.possibleValues);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fields, possibleValues);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExternalFormModel {\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    possibleValues: ").append(toIndentedString(possibleValues)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

