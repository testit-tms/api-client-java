/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;
import ru.testit.client.invoker.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/**
 * FlakyBulkModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FlakyBulkModel {
  public static final String SERIALIZED_NAME_AUTOTEST_SELECT = "autotestSelect";
  @SerializedName(SERIALIZED_NAME_AUTOTEST_SELECT)
  private AutotestSelectModel autotestSelect;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Boolean value;

  public FlakyBulkModel() {
  }

  public FlakyBulkModel autotestSelect(AutotestSelectModel autotestSelect) {
    
    this.autotestSelect = autotestSelect;
    return this;
  }

   /**
   * Get autotestSelect
   * @return autotestSelect
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AutotestSelectModel getAutotestSelect() {
    return autotestSelect;
  }


  public void setAutotestSelect(AutotestSelectModel autotestSelect) {
    this.autotestSelect = autotestSelect;
  }


  public FlakyBulkModel value(Boolean value) {
    
    this.value = value;
    return this;
  }

   /**
   * Are autotests flaky
   * @return value
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Are autotests flaky")

  public Boolean getValue() {
    return value;
  }


  public void setValue(Boolean value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlakyBulkModel flakyBulkModel = (FlakyBulkModel) o;
    return Objects.equals(this.autotestSelect, flakyBulkModel.autotestSelect) &&
        Objects.equals(this.value, flakyBulkModel.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autotestSelect, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlakyBulkModel {\n");
    sb.append("    autotestSelect: ").append(toIndentedString(autotestSelect)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autotestSelect");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("value");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FlakyBulkModel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FlakyBulkModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FlakyBulkModel is not found in the empty JSON string", FlakyBulkModel.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!FlakyBulkModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FlakyBulkModel` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FlakyBulkModel.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the optional field `autotestSelect`
      if (jsonObj.get("autotestSelect") != null && !jsonObj.get("autotestSelect").isJsonNull()) {
        AutotestSelectModel.validateJsonObject(jsonObj.getAsJsonObject("autotestSelect"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FlakyBulkModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FlakyBulkModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FlakyBulkModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FlakyBulkModel.class));

       return (TypeAdapter<T>) new TypeAdapter<FlakyBulkModel>() {
           @Override
           public void write(JsonWriter out, FlakyBulkModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FlakyBulkModel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FlakyBulkModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FlakyBulkModel
  * @throws IOException if the JSON string is invalid with respect to FlakyBulkModel
  */
  public static FlakyBulkModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FlakyBulkModel.class);
  }

 /**
  * Convert an instance of FlakyBulkModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

