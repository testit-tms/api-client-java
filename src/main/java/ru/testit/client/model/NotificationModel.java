/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import ru.testit.client.model.NotificationTypeModel;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import ru.testit.client.invoker.JSON;


/**
 * NotificationModel
 */
@JsonPropertyOrder({
  NotificationModel.JSON_PROPERTY_ID,
  NotificationModel.JSON_PROPERTY_CREATED_DATE,
  NotificationModel.JSON_PROPERTY_IS_READ,
  NotificationModel.JSON_PROPERTY_ENTITY_ID,
  NotificationModel.JSON_PROPERTY_NOTIFICATION_TYPE,
  NotificationModel.JSON_PROPERTY_PROJECT_GLOBAL_ID,
  NotificationModel.JSON_PROPERTY_PROJECT_NAME,
  NotificationModel.JSON_PROPERTY_TEST_PLAN_GLOBAL_ID,
  NotificationModel.JSON_PROPERTY_TEST_PLAN_NAME,
  NotificationModel.JSON_PROPERTY_WORKITEM_GLOBAL_ID,
  NotificationModel.JSON_PROPERTY_COMMENT,
  NotificationModel.JSON_PROPERTY_WORK_ITEM_NAME,
  NotificationModel.JSON_PROPERTY_ATTRIBUTE_NAME,
  NotificationModel.JSON_PROPERTY_CREATED_BY_ID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class NotificationModel {
  public static final String JSON_PROPERTY_ID = "id";
  private UUID id;

  public static final String JSON_PROPERTY_CREATED_DATE = "createdDate";
  private JsonNullable<OffsetDateTime> createdDate = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_IS_READ = "isRead";
  private Boolean isRead;

  public static final String JSON_PROPERTY_ENTITY_ID = "entityId";
  private UUID entityId;

  public static final String JSON_PROPERTY_NOTIFICATION_TYPE = "notificationType";
  private NotificationTypeModel notificationType;

  public static final String JSON_PROPERTY_PROJECT_GLOBAL_ID = "projectGlobalId";
  private JsonNullable<Long> projectGlobalId = JsonNullable.<Long>undefined();

  public static final String JSON_PROPERTY_PROJECT_NAME = "projectName";
  private JsonNullable<String> projectName = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_TEST_PLAN_GLOBAL_ID = "testPlanGlobalId";
  private Long testPlanGlobalId;

  public static final String JSON_PROPERTY_TEST_PLAN_NAME = "testPlanName";
  private JsonNullable<String> testPlanName = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_WORKITEM_GLOBAL_ID = "workitemGlobalId";
  private JsonNullable<Long> workitemGlobalId = JsonNullable.<Long>undefined();

  public static final String JSON_PROPERTY_COMMENT = "comment";
  private JsonNullable<String> comment = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_WORK_ITEM_NAME = "workItemName";
  private JsonNullable<String> workItemName = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ATTRIBUTE_NAME = "attributeName";
  private JsonNullable<String> attributeName = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_CREATED_BY_ID = "createdById";
  private UUID createdById;

  public NotificationModel() { 
  }

  public NotificationModel id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(UUID id) {
    this.id = id;
  }


  public NotificationModel createdDate(OffsetDateTime createdDate) {
    this.createdDate = JsonNullable.<OffsetDateTime>of(createdDate);
    return this;
  }

   /**
   * Get createdDate
   * @return createdDate
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public OffsetDateTime getCreatedDate() {
        return createdDate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CREATED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getCreatedDate_JsonNullable() {
    return createdDate;
  }
  
  @JsonProperty(JSON_PROPERTY_CREATED_DATE)
  public void setCreatedDate_JsonNullable(JsonNullable<OffsetDateTime> createdDate) {
    this.createdDate = createdDate;
  }

  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = JsonNullable.<OffsetDateTime>of(createdDate);
  }


  public NotificationModel isRead(Boolean isRead) {
    this.isRead = isRead;
    return this;
  }

   /**
   * Get isRead
   * @return isRead
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_READ)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsRead() {
    return isRead;
  }


  @JsonProperty(JSON_PROPERTY_IS_READ)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsRead(Boolean isRead) {
    this.isRead = isRead;
  }


  public NotificationModel entityId(UUID entityId) {
    this.entityId = entityId;
    return this;
  }

   /**
   * Get entityId
   * @return entityId
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ENTITY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getEntityId() {
    return entityId;
  }


  @JsonProperty(JSON_PROPERTY_ENTITY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEntityId(UUID entityId) {
    this.entityId = entityId;
  }


  public NotificationModel notificationType(NotificationTypeModel notificationType) {
    this.notificationType = notificationType;
    return this;
  }

   /**
   * Get notificationType
   * @return notificationType
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NOTIFICATION_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public NotificationTypeModel getNotificationType() {
    return notificationType;
  }


  @JsonProperty(JSON_PROPERTY_NOTIFICATION_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNotificationType(NotificationTypeModel notificationType) {
    this.notificationType = notificationType;
  }


  public NotificationModel projectGlobalId(Long projectGlobalId) {
    this.projectGlobalId = JsonNullable.<Long>of(projectGlobalId);
    return this;
  }

   /**
   * Get projectGlobalId
   * @return projectGlobalId
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Long getProjectGlobalId() {
        return projectGlobalId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PROJECT_GLOBAL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Long> getProjectGlobalId_JsonNullable() {
    return projectGlobalId;
  }
  
  @JsonProperty(JSON_PROPERTY_PROJECT_GLOBAL_ID)
  public void setProjectGlobalId_JsonNullable(JsonNullable<Long> projectGlobalId) {
    this.projectGlobalId = projectGlobalId;
  }

  public void setProjectGlobalId(Long projectGlobalId) {
    this.projectGlobalId = JsonNullable.<Long>of(projectGlobalId);
  }


  public NotificationModel projectName(String projectName) {
    this.projectName = JsonNullable.<String>of(projectName);
    return this;
  }

   /**
   * Get projectName
   * @return projectName
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getProjectName() {
        return projectName.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PROJECT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getProjectName_JsonNullable() {
    return projectName;
  }
  
  @JsonProperty(JSON_PROPERTY_PROJECT_NAME)
  public void setProjectName_JsonNullable(JsonNullable<String> projectName) {
    this.projectName = projectName;
  }

  public void setProjectName(String projectName) {
    this.projectName = JsonNullable.<String>of(projectName);
  }


  public NotificationModel testPlanGlobalId(Long testPlanGlobalId) {
    this.testPlanGlobalId = testPlanGlobalId;
    return this;
  }

   /**
   * Get testPlanGlobalId
   * @return testPlanGlobalId
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TEST_PLAN_GLOBAL_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getTestPlanGlobalId() {
    return testPlanGlobalId;
  }


  @JsonProperty(JSON_PROPERTY_TEST_PLAN_GLOBAL_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTestPlanGlobalId(Long testPlanGlobalId) {
    this.testPlanGlobalId = testPlanGlobalId;
  }


  public NotificationModel testPlanName(String testPlanName) {
    this.testPlanName = JsonNullable.<String>of(testPlanName);
    return this;
  }

   /**
   * Get testPlanName
   * @return testPlanName
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getTestPlanName() {
        return testPlanName.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TEST_PLAN_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getTestPlanName_JsonNullable() {
    return testPlanName;
  }
  
  @JsonProperty(JSON_PROPERTY_TEST_PLAN_NAME)
  public void setTestPlanName_JsonNullable(JsonNullable<String> testPlanName) {
    this.testPlanName = testPlanName;
  }

  public void setTestPlanName(String testPlanName) {
    this.testPlanName = JsonNullable.<String>of(testPlanName);
  }


  public NotificationModel workitemGlobalId(Long workitemGlobalId) {
    this.workitemGlobalId = JsonNullable.<Long>of(workitemGlobalId);
    return this;
  }

   /**
   * Get workitemGlobalId
   * @return workitemGlobalId
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Long getWorkitemGlobalId() {
        return workitemGlobalId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_WORKITEM_GLOBAL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Long> getWorkitemGlobalId_JsonNullable() {
    return workitemGlobalId;
  }
  
  @JsonProperty(JSON_PROPERTY_WORKITEM_GLOBAL_ID)
  public void setWorkitemGlobalId_JsonNullable(JsonNullable<Long> workitemGlobalId) {
    this.workitemGlobalId = workitemGlobalId;
  }

  public void setWorkitemGlobalId(Long workitemGlobalId) {
    this.workitemGlobalId = JsonNullable.<Long>of(workitemGlobalId);
  }


  public NotificationModel comment(String comment) {
    this.comment = JsonNullable.<String>of(comment);
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getComment() {
        return comment.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_COMMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getComment_JsonNullable() {
    return comment;
  }
  
  @JsonProperty(JSON_PROPERTY_COMMENT)
  public void setComment_JsonNullable(JsonNullable<String> comment) {
    this.comment = comment;
  }

  public void setComment(String comment) {
    this.comment = JsonNullable.<String>of(comment);
  }


  public NotificationModel workItemName(String workItemName) {
    this.workItemName = JsonNullable.<String>of(workItemName);
    return this;
  }

   /**
   * Get workItemName
   * @return workItemName
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getWorkItemName() {
        return workItemName.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_WORK_ITEM_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getWorkItemName_JsonNullable() {
    return workItemName;
  }
  
  @JsonProperty(JSON_PROPERTY_WORK_ITEM_NAME)
  public void setWorkItemName_JsonNullable(JsonNullable<String> workItemName) {
    this.workItemName = workItemName;
  }

  public void setWorkItemName(String workItemName) {
    this.workItemName = JsonNullable.<String>of(workItemName);
  }


  public NotificationModel attributeName(String attributeName) {
    this.attributeName = JsonNullable.<String>of(attributeName);
    return this;
  }

   /**
   * Get attributeName
   * @return attributeName
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getAttributeName() {
        return attributeName.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ATTRIBUTE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getAttributeName_JsonNullable() {
    return attributeName;
  }
  
  @JsonProperty(JSON_PROPERTY_ATTRIBUTE_NAME)
  public void setAttributeName_JsonNullable(JsonNullable<String> attributeName) {
    this.attributeName = attributeName;
  }

  public void setAttributeName(String attributeName) {
    this.attributeName = JsonNullable.<String>of(attributeName);
  }


  public NotificationModel createdById(UUID createdById) {
    this.createdById = createdById;
    return this;
  }

   /**
   * Get createdById
   * @return createdById
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_BY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getCreatedById() {
    return createdById;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_BY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedById(UUID createdById) {
    this.createdById = createdById;
  }


  /**
   * Return true if this NotificationModel object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationModel notificationModel = (NotificationModel) o;
    return Objects.equals(this.id, notificationModel.id) &&
        equalsNullable(this.createdDate, notificationModel.createdDate) &&
        Objects.equals(this.isRead, notificationModel.isRead) &&
        Objects.equals(this.entityId, notificationModel.entityId) &&
        Objects.equals(this.notificationType, notificationModel.notificationType) &&
        equalsNullable(this.projectGlobalId, notificationModel.projectGlobalId) &&
        equalsNullable(this.projectName, notificationModel.projectName) &&
        Objects.equals(this.testPlanGlobalId, notificationModel.testPlanGlobalId) &&
        equalsNullable(this.testPlanName, notificationModel.testPlanName) &&
        equalsNullable(this.workitemGlobalId, notificationModel.workitemGlobalId) &&
        equalsNullable(this.comment, notificationModel.comment) &&
        equalsNullable(this.workItemName, notificationModel.workItemName) &&
        equalsNullable(this.attributeName, notificationModel.attributeName) &&
        Objects.equals(this.createdById, notificationModel.createdById);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, hashCodeNullable(createdDate), isRead, entityId, notificationType, hashCodeNullable(projectGlobalId), hashCodeNullable(projectName), testPlanGlobalId, hashCodeNullable(testPlanName), hashCodeNullable(workitemGlobalId), hashCodeNullable(comment), hashCodeNullable(workItemName), hashCodeNullable(attributeName), createdById);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationModel {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    isRead: ").append(toIndentedString(isRead)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    notificationType: ").append(toIndentedString(notificationType)).append("\n");
    sb.append("    projectGlobalId: ").append(toIndentedString(projectGlobalId)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    testPlanGlobalId: ").append(toIndentedString(testPlanGlobalId)).append("\n");
    sb.append("    testPlanName: ").append(toIndentedString(testPlanName)).append("\n");
    sb.append("    workitemGlobalId: ").append(toIndentedString(workitemGlobalId)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    workItemName: ").append(toIndentedString(workItemName)).append("\n");
    sb.append("    attributeName: ").append(toIndentedString(attributeName)).append("\n");
    sb.append("    createdById: ").append(toIndentedString(createdById)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

