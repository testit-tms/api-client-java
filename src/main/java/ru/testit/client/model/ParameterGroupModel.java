/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import ru.testit.client.invoker.JSON;


/**
 * ParameterGroupModel
 */
@JsonPropertyOrder({
  ParameterGroupModel.JSON_PROPERTY_NAME,
  ParameterGroupModel.JSON_PROPERTY_VALUES,
  ParameterGroupModel.JSON_PROPERTY_PARAMETER_KEY_ID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ParameterGroupModel {
  public static final String JSON_PROPERTY_NAME = "name";
  private JsonNullable<String> name = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_VALUES = "values";
  private JsonNullable<Map<String, String>> values = JsonNullable.<Map<String, String>>undefined();

  public static final String JSON_PROPERTY_PARAMETER_KEY_ID = "parameterKeyId";
  private UUID parameterKeyId;

  public ParameterGroupModel() { 
  }

  public ParameterGroupModel name(String name) {
    this.name = JsonNullable.<String>of(name);
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public String getName() {
        return name.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getName_JsonNullable() {
    return name;
  }
  
  @JsonProperty(JSON_PROPERTY_NAME)
  public void setName_JsonNullable(JsonNullable<String> name) {
    this.name = name;
  }

  public void setName(String name) {
    this.name = JsonNullable.<String>of(name);
  }


  public ParameterGroupModel values(Map<String, String> values) {
    this.values = JsonNullable.<Map<String, String>>of(values);
    return this;
  }

  public ParameterGroupModel putValuesItem(String key, String valuesItem) {
    if (this.values == null || !this.values.isPresent()) {
      this.values = JsonNullable.<Map<String, String>>of(new HashMap<>());
    }
    try {
      this.values.get().put(key, valuesItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Get values
   * @return values
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public Map<String, String> getValues() {
        return values.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_VALUES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Map<String, String>> getValues_JsonNullable() {
    return values;
  }
  
  @JsonProperty(JSON_PROPERTY_VALUES)
  public void setValues_JsonNullable(JsonNullable<Map<String, String>> values) {
    this.values = values;
  }

  public void setValues(Map<String, String> values) {
    this.values = JsonNullable.<Map<String, String>>of(values);
  }


  public ParameterGroupModel parameterKeyId(UUID parameterKeyId) {
    this.parameterKeyId = parameterKeyId;
    return this;
  }

   /**
   * Get parameterKeyId
   * @return parameterKeyId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PARAMETER_KEY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getParameterKeyId() {
    return parameterKeyId;
  }


  @JsonProperty(JSON_PROPERTY_PARAMETER_KEY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParameterKeyId(UUID parameterKeyId) {
    this.parameterKeyId = parameterKeyId;
  }


  /**
   * Return true if this ParameterGroupModel object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParameterGroupModel parameterGroupModel = (ParameterGroupModel) o;
    return equalsNullable(this.name, parameterGroupModel.name) &&
        equalsNullable(this.values, parameterGroupModel.values) &&
        Objects.equals(this.parameterKeyId, parameterGroupModel.parameterKeyId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(name), hashCodeNullable(values), parameterKeyId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParameterGroupModel {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("    parameterKeyId: ").append(toIndentedString(parameterKeyId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

