/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import ru.testit.client.model.ProjectsFilterModelAutotestsCount;
import ru.testit.client.model.ProjectsFilterModelChecklistsCount;
import ru.testit.client.model.ProjectsFilterModelCreatedDate;
import ru.testit.client.model.ProjectsFilterModelSharedStepsCount;
import ru.testit.client.model.ProjectsFilterModelTestCasesCount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import ru.testit.client.invoker.JSON;

/**
 * ProjectsFilterModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ProjectsFilterModel {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_IS_FAVORITE = "isFavorite";
  @SerializedName(SERIALIZED_NAME_IS_FAVORITE)
  private Boolean isFavorite;

  public static final String SERIALIZED_NAME_IS_DELETED = "isDeleted";
  @SerializedName(SERIALIZED_NAME_IS_DELETED)
  private Boolean isDeleted;

  public static final String SERIALIZED_NAME_TEST_CASES_COUNT = "testCasesCount";
  @SerializedName(SERIALIZED_NAME_TEST_CASES_COUNT)
  private ProjectsFilterModelTestCasesCount testCasesCount;

  public static final String SERIALIZED_NAME_CHECKLISTS_COUNT = "checklistsCount";
  @SerializedName(SERIALIZED_NAME_CHECKLISTS_COUNT)
  private ProjectsFilterModelChecklistsCount checklistsCount;

  public static final String SERIALIZED_NAME_SHARED_STEPS_COUNT = "sharedStepsCount";
  @SerializedName(SERIALIZED_NAME_SHARED_STEPS_COUNT)
  private ProjectsFilterModelSharedStepsCount sharedStepsCount;

  public static final String SERIALIZED_NAME_AUTOTESTS_COUNT = "autotestsCount";
  @SerializedName(SERIALIZED_NAME_AUTOTESTS_COUNT)
  private ProjectsFilterModelAutotestsCount autotestsCount;

  public static final String SERIALIZED_NAME_GLOBAL_IDS = "globalIds";
  @SerializedName(SERIALIZED_NAME_GLOBAL_IDS)
  private Set<Long> globalIds;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private ProjectsFilterModelCreatedDate createdDate;

  public static final String SERIALIZED_NAME_CREATED_BY_IDS = "createdByIds";
  @SerializedName(SERIALIZED_NAME_CREATED_BY_IDS)
  private Set<UUID> createdByIds;

  public ProjectsFilterModel() {
  }

  public ProjectsFilterModel name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Specifies a project name to search for
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ProjectsFilterModel isFavorite(Boolean isFavorite) {
    this.isFavorite = isFavorite;
    return this;
  }

   /**
   * Specifies a project favorite status to search for
   * @return isFavorite
  **/
  @javax.annotation.Nullable
  public Boolean getIsFavorite() {
    return isFavorite;
  }

  public void setIsFavorite(Boolean isFavorite) {
    this.isFavorite = isFavorite;
  }


  public ProjectsFilterModel isDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
    return this;
  }

   /**
   * Specifies a project deleted status to search for
   * @return isDeleted
  **/
  @javax.annotation.Nullable
  public Boolean getIsDeleted() {
    return isDeleted;
  }

  public void setIsDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
  }


  public ProjectsFilterModel testCasesCount(ProjectsFilterModelTestCasesCount testCasesCount) {
    this.testCasesCount = testCasesCount;
    return this;
  }

   /**
   * Get testCasesCount
   * @return testCasesCount
  **/
  @javax.annotation.Nullable
  public ProjectsFilterModelTestCasesCount getTestCasesCount() {
    return testCasesCount;
  }

  public void setTestCasesCount(ProjectsFilterModelTestCasesCount testCasesCount) {
    this.testCasesCount = testCasesCount;
  }


  public ProjectsFilterModel checklistsCount(ProjectsFilterModelChecklistsCount checklistsCount) {
    this.checklistsCount = checklistsCount;
    return this;
  }

   /**
   * Get checklistsCount
   * @return checklistsCount
  **/
  @javax.annotation.Nullable
  public ProjectsFilterModelChecklistsCount getChecklistsCount() {
    return checklistsCount;
  }

  public void setChecklistsCount(ProjectsFilterModelChecklistsCount checklistsCount) {
    this.checklistsCount = checklistsCount;
  }


  public ProjectsFilterModel sharedStepsCount(ProjectsFilterModelSharedStepsCount sharedStepsCount) {
    this.sharedStepsCount = sharedStepsCount;
    return this;
  }

   /**
   * Get sharedStepsCount
   * @return sharedStepsCount
  **/
  @javax.annotation.Nullable
  public ProjectsFilterModelSharedStepsCount getSharedStepsCount() {
    return sharedStepsCount;
  }

  public void setSharedStepsCount(ProjectsFilterModelSharedStepsCount sharedStepsCount) {
    this.sharedStepsCount = sharedStepsCount;
  }


  public ProjectsFilterModel autotestsCount(ProjectsFilterModelAutotestsCount autotestsCount) {
    this.autotestsCount = autotestsCount;
    return this;
  }

   /**
   * Get autotestsCount
   * @return autotestsCount
  **/
  @javax.annotation.Nullable
  public ProjectsFilterModelAutotestsCount getAutotestsCount() {
    return autotestsCount;
  }

  public void setAutotestsCount(ProjectsFilterModelAutotestsCount autotestsCount) {
    this.autotestsCount = autotestsCount;
  }


  public ProjectsFilterModel globalIds(Set<Long> globalIds) {
    this.globalIds = globalIds;
    return this;
  }

  public ProjectsFilterModel addGlobalIdsItem(Long globalIdsItem) {
    if (this.globalIds == null) {
      this.globalIds = new LinkedHashSet<>();
    }
    this.globalIds.add(globalIdsItem);
    return this;
  }

   /**
   * Specifies a project global IDs to search for
   * @return globalIds
  **/
  @javax.annotation.Nullable
  public Set<Long> getGlobalIds() {
    return globalIds;
  }

  public void setGlobalIds(Set<Long> globalIds) {
    this.globalIds = globalIds;
  }


  public ProjectsFilterModel createdDate(ProjectsFilterModelCreatedDate createdDate) {
    this.createdDate = createdDate;
    return this;
  }

   /**
   * Get createdDate
   * @return createdDate
  **/
  @javax.annotation.Nullable
  public ProjectsFilterModelCreatedDate getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(ProjectsFilterModelCreatedDate createdDate) {
    this.createdDate = createdDate;
  }


  public ProjectsFilterModel createdByIds(Set<UUID> createdByIds) {
    this.createdByIds = createdByIds;
    return this;
  }

  public ProjectsFilterModel addCreatedByIdsItem(UUID createdByIdsItem) {
    if (this.createdByIds == null) {
      this.createdByIds = new LinkedHashSet<>();
    }
    this.createdByIds.add(createdByIdsItem);
    return this;
  }

   /**
   * Specifies an autotest creator IDs to search for
   * @return createdByIds
  **/
  @javax.annotation.Nullable
  public Set<UUID> getCreatedByIds() {
    return createdByIds;
  }

  public void setCreatedByIds(Set<UUID> createdByIds) {
    this.createdByIds = createdByIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectsFilterModel projectsFilterModel = (ProjectsFilterModel) o;
    return Objects.equals(this.name, projectsFilterModel.name) &&
        Objects.equals(this.isFavorite, projectsFilterModel.isFavorite) &&
        Objects.equals(this.isDeleted, projectsFilterModel.isDeleted) &&
        Objects.equals(this.testCasesCount, projectsFilterModel.testCasesCount) &&
        Objects.equals(this.checklistsCount, projectsFilterModel.checklistsCount) &&
        Objects.equals(this.sharedStepsCount, projectsFilterModel.sharedStepsCount) &&
        Objects.equals(this.autotestsCount, projectsFilterModel.autotestsCount) &&
        Objects.equals(this.globalIds, projectsFilterModel.globalIds) &&
        Objects.equals(this.createdDate, projectsFilterModel.createdDate) &&
        Objects.equals(this.createdByIds, projectsFilterModel.createdByIds);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, isFavorite, isDeleted, testCasesCount, checklistsCount, sharedStepsCount, autotestsCount, globalIds, createdDate, createdByIds);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectsFilterModel {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    isFavorite: ").append(toIndentedString(isFavorite)).append("\n");
    sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
    sb.append("    testCasesCount: ").append(toIndentedString(testCasesCount)).append("\n");
    sb.append("    checklistsCount: ").append(toIndentedString(checklistsCount)).append("\n");
    sb.append("    sharedStepsCount: ").append(toIndentedString(sharedStepsCount)).append("\n");
    sb.append("    autotestsCount: ").append(toIndentedString(autotestsCount)).append("\n");
    sb.append("    globalIds: ").append(toIndentedString(globalIds)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    createdByIds: ").append(toIndentedString(createdByIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("isFavorite");
    openapiFields.add("isDeleted");
    openapiFields.add("testCasesCount");
    openapiFields.add("checklistsCount");
    openapiFields.add("sharedStepsCount");
    openapiFields.add("autotestsCount");
    openapiFields.add("globalIds");
    openapiFields.add("createdDate");
    openapiFields.add("createdByIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ProjectsFilterModel
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectsFilterModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectsFilterModel is not found in the empty JSON string", ProjectsFilterModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProjectsFilterModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectsFilterModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `testCasesCount`
      if (jsonObj.get("testCasesCount") != null && !jsonObj.get("testCasesCount").isJsonNull()) {
        ProjectsFilterModelTestCasesCount.validateJsonElement(jsonObj.get("testCasesCount"));
      }
      // validate the optional field `checklistsCount`
      if (jsonObj.get("checklistsCount") != null && !jsonObj.get("checklistsCount").isJsonNull()) {
        ProjectsFilterModelChecklistsCount.validateJsonElement(jsonObj.get("checklistsCount"));
      }
      // validate the optional field `sharedStepsCount`
      if (jsonObj.get("sharedStepsCount") != null && !jsonObj.get("sharedStepsCount").isJsonNull()) {
        ProjectsFilterModelSharedStepsCount.validateJsonElement(jsonObj.get("sharedStepsCount"));
      }
      // validate the optional field `autotestsCount`
      if (jsonObj.get("autotestsCount") != null && !jsonObj.get("autotestsCount").isJsonNull()) {
        ProjectsFilterModelAutotestsCount.validateJsonElement(jsonObj.get("autotestsCount"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("globalIds") != null && !jsonObj.get("globalIds").isJsonNull() && !jsonObj.get("globalIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `globalIds` to be an array in the JSON string but got `%s`", jsonObj.get("globalIds").toString()));
      }
      // validate the optional field `createdDate`
      if (jsonObj.get("createdDate") != null && !jsonObj.get("createdDate").isJsonNull()) {
        ProjectsFilterModelCreatedDate.validateJsonElement(jsonObj.get("createdDate"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("createdByIds") != null && !jsonObj.get("createdByIds").isJsonNull() && !jsonObj.get("createdByIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdByIds` to be an array in the JSON string but got `%s`", jsonObj.get("createdByIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectsFilterModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectsFilterModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectsFilterModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectsFilterModel.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectsFilterModel>() {
           @Override
           public void write(JsonWriter out, ProjectsFilterModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectsFilterModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProjectsFilterModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProjectsFilterModel
  * @throws IOException if the JSON string is invalid with respect to ProjectsFilterModel
  */
  public static ProjectsFilterModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectsFilterModel.class);
  }

 /**
  * Convert an instance of ProjectsFilterModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

