/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import ru.testit.client.model.ParameterShortModel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import ru.testit.client.invoker.JSON;

/**
 * PublicTestPointModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class PublicTestPointModel {
  public static final String SERIALIZED_NAME_CONFIGURATION_ID = "configurationId";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_ID)
  @javax.annotation.Nonnull
  private UUID configurationId;

  public static final String SERIALIZED_NAME_CONFIGURATION_GLOBAL_ID = "configurationGlobalId";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_GLOBAL_ID)
  @javax.annotation.Nonnull
  private Long configurationGlobalId;

  public static final String SERIALIZED_NAME_AUTO_TEST_IDS = "autoTestIds";
  @SerializedName(SERIALIZED_NAME_AUTO_TEST_IDS)
  @javax.annotation.Nullable
  private List<UUID> autoTestIds;

  public static final String SERIALIZED_NAME_ITERATION_ID = "iterationId";
  @SerializedName(SERIALIZED_NAME_ITERATION_ID)
  @javax.annotation.Nonnull
  private UUID iterationId;

  public static final String SERIALIZED_NAME_PARAMETER_MODELS = "parameterModels";
  @SerializedName(SERIALIZED_NAME_PARAMETER_MODELS)
  @javax.annotation.Nullable
  private List<ParameterShortModel> parameterModels;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private UUID id;

  public PublicTestPointModel() {
  }

  public PublicTestPointModel configurationId(@javax.annotation.Nonnull UUID configurationId) {
    this.configurationId = configurationId;
    return this;
  }

  /**
   * Get configurationId
   * @return configurationId
   */
  @javax.annotation.Nonnull
  public UUID getConfigurationId() {
    return configurationId;
  }

  public void setConfigurationId(@javax.annotation.Nonnull UUID configurationId) {
    this.configurationId = configurationId;
  }


  public PublicTestPointModel configurationGlobalId(@javax.annotation.Nonnull Long configurationGlobalId) {
    this.configurationGlobalId = configurationGlobalId;
    return this;
  }

  /**
   * Get configurationGlobalId
   * @return configurationGlobalId
   */
  @javax.annotation.Nonnull
  public Long getConfigurationGlobalId() {
    return configurationGlobalId;
  }

  public void setConfigurationGlobalId(@javax.annotation.Nonnull Long configurationGlobalId) {
    this.configurationGlobalId = configurationGlobalId;
  }


  public PublicTestPointModel autoTestIds(@javax.annotation.Nullable List<UUID> autoTestIds) {
    this.autoTestIds = autoTestIds;
    return this;
  }

  public PublicTestPointModel addAutoTestIdsItem(UUID autoTestIdsItem) {
    if (this.autoTestIds == null) {
      this.autoTestIds = new ArrayList<>();
    }
    this.autoTestIds.add(autoTestIdsItem);
    return this;
  }

  /**
   * Get autoTestIds
   * @return autoTestIds
   */
  @javax.annotation.Nullable
  public List<UUID> getAutoTestIds() {
    return autoTestIds;
  }

  public void setAutoTestIds(@javax.annotation.Nullable List<UUID> autoTestIds) {
    this.autoTestIds = autoTestIds;
  }


  public PublicTestPointModel iterationId(@javax.annotation.Nonnull UUID iterationId) {
    this.iterationId = iterationId;
    return this;
  }

  /**
   * Get iterationId
   * @return iterationId
   */
  @javax.annotation.Nonnull
  public UUID getIterationId() {
    return iterationId;
  }

  public void setIterationId(@javax.annotation.Nonnull UUID iterationId) {
    this.iterationId = iterationId;
  }


  public PublicTestPointModel parameterModels(@javax.annotation.Nullable List<ParameterShortModel> parameterModels) {
    this.parameterModels = parameterModels;
    return this;
  }

  public PublicTestPointModel addParameterModelsItem(ParameterShortModel parameterModelsItem) {
    if (this.parameterModels == null) {
      this.parameterModels = new ArrayList<>();
    }
    this.parameterModels.add(parameterModelsItem);
    return this;
  }

  /**
   * Get parameterModels
   * @return parameterModels
   */
  @javax.annotation.Nullable
  public List<ParameterShortModel> getParameterModels() {
    return parameterModels;
  }

  public void setParameterModels(@javax.annotation.Nullable List<ParameterShortModel> parameterModels) {
    this.parameterModels = parameterModels;
  }


  public PublicTestPointModel id(@javax.annotation.Nonnull UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull UUID id) {
    this.id = id;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PublicTestPointModel publicTestPointModel = (PublicTestPointModel) o;
    return Objects.equals(this.configurationId, publicTestPointModel.configurationId) &&
        Objects.equals(this.configurationGlobalId, publicTestPointModel.configurationGlobalId) &&
        Objects.equals(this.autoTestIds, publicTestPointModel.autoTestIds) &&
        Objects.equals(this.iterationId, publicTestPointModel.iterationId) &&
        Objects.equals(this.parameterModels, publicTestPointModel.parameterModels) &&
        Objects.equals(this.id, publicTestPointModel.id);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(configurationId, configurationGlobalId, autoTestIds, iterationId, parameterModels, id);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PublicTestPointModel {\n");
    sb.append("    configurationId: ").append(toIndentedString(configurationId)).append("\n");
    sb.append("    configurationGlobalId: ").append(toIndentedString(configurationGlobalId)).append("\n");
    sb.append("    autoTestIds: ").append(toIndentedString(autoTestIds)).append("\n");
    sb.append("    iterationId: ").append(toIndentedString(iterationId)).append("\n");
    sb.append("    parameterModels: ").append(toIndentedString(parameterModels)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("configurationId");
    openapiFields.add("configurationGlobalId");
    openapiFields.add("autoTestIds");
    openapiFields.add("iterationId");
    openapiFields.add("parameterModels");
    openapiFields.add("id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("configurationId");
    openapiRequiredFields.add("configurationGlobalId");
    openapiRequiredFields.add("iterationId");
    openapiRequiredFields.add("id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PublicTestPointModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PublicTestPointModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PublicTestPointModel is not found in the empty JSON string", PublicTestPointModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PublicTestPointModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PublicTestPointModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PublicTestPointModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("configurationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configurationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configurationId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("autoTestIds") != null && !jsonObj.get("autoTestIds").isJsonNull() && !jsonObj.get("autoTestIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoTestIds` to be an array in the JSON string but got `%s`", jsonObj.get("autoTestIds").toString()));
      }
      if (!jsonObj.get("iterationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iterationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iterationId").toString()));
      }
      if (jsonObj.get("parameterModels") != null && !jsonObj.get("parameterModels").isJsonNull()) {
        JsonArray jsonArrayparameterModels = jsonObj.getAsJsonArray("parameterModels");
        if (jsonArrayparameterModels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("parameterModels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `parameterModels` to be an array in the JSON string but got `%s`", jsonObj.get("parameterModels").toString()));
          }

          // validate the optional field `parameterModels` (array)
          for (int i = 0; i < jsonArrayparameterModels.size(); i++) {
            ParameterShortModel.validateJsonElement(jsonArrayparameterModels.get(i));
          };
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PublicTestPointModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PublicTestPointModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PublicTestPointModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PublicTestPointModel.class));

       return (TypeAdapter<T>) new TypeAdapter<PublicTestPointModel>() {
           @Override
           public void write(JsonWriter out, PublicTestPointModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PublicTestPointModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PublicTestPointModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PublicTestPointModel
   * @throws IOException if the JSON string is invalid with respect to PublicTestPointModel
   */
  public static PublicTestPointModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PublicTestPointModel.class);
  }

  /**
   * Convert an instance of PublicTestPointModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

