/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import ru.testit.client.model.AutoTestModel;
import ru.testit.client.model.ConfigurationModel;
import ru.testit.client.model.PublicTestPointModel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import ru.testit.client.invoker.JSON;

/**
 * PublicTestRunModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PublicTestRunModel {
  public static final String SERIALIZED_NAME_TEST_RUN_ID = "testRunId";
  @SerializedName(SERIALIZED_NAME_TEST_RUN_ID)
  private UUID testRunId;

  public static final String SERIALIZED_NAME_TEST_PLAN_ID = "testPlanId";
  @SerializedName(SERIALIZED_NAME_TEST_PLAN_ID)
  private UUID testPlanId;

  public static final String SERIALIZED_NAME_TEST_PLAN_GLOBAL_ID = "testPlanGlobalId";
  @SerializedName(SERIALIZED_NAME_TEST_PLAN_GLOBAL_ID)
  private Long testPlanGlobalId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRODUCT_NAME = "productName";
  @SerializedName(SERIALIZED_NAME_PRODUCT_NAME)
  private String productName;

  public static final String SERIALIZED_NAME_BUILD = "build";
  @SerializedName(SERIALIZED_NAME_BUILD)
  private String build;

  public static final String SERIALIZED_NAME_CONFIGURATIONS = "configurations";
  @SerializedName(SERIALIZED_NAME_CONFIGURATIONS)
  private List<ConfigurationModel> configurations;

  public static final String SERIALIZED_NAME_AUTO_TESTS = "autoTests";
  @SerializedName(SERIALIZED_NAME_AUTO_TESTS)
  private List<AutoTestModel> autoTests;

  public static final String SERIALIZED_NAME_TEST_POINTS = "testPoints";
  @SerializedName(SERIALIZED_NAME_TEST_POINTS)
  private List<PublicTestPointModel> testPoints;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public PublicTestRunModel() {
  }

  public PublicTestRunModel testRunId(UUID testRunId) {
    
    this.testRunId = testRunId;
    return this;
  }

   /**
   * Get testRunId
   * @return testRunId
  **/
  @javax.annotation.Nullable
  public UUID getTestRunId() {
    return testRunId;
  }


  public void setTestRunId(UUID testRunId) {
    this.testRunId = testRunId;
  }


  public PublicTestRunModel testPlanId(UUID testPlanId) {
    
    this.testPlanId = testPlanId;
    return this;
  }

   /**
   * Get testPlanId
   * @return testPlanId
  **/
  @javax.annotation.Nullable
  public UUID getTestPlanId() {
    return testPlanId;
  }


  public void setTestPlanId(UUID testPlanId) {
    this.testPlanId = testPlanId;
  }


  public PublicTestRunModel testPlanGlobalId(Long testPlanGlobalId) {
    
    this.testPlanGlobalId = testPlanGlobalId;
    return this;
  }

   /**
   * Get testPlanGlobalId
   * @return testPlanGlobalId
  **/
  @javax.annotation.Nullable
  public Long getTestPlanGlobalId() {
    return testPlanGlobalId;
  }


  public void setTestPlanGlobalId(Long testPlanGlobalId) {
    this.testPlanGlobalId = testPlanGlobalId;
  }


  public PublicTestRunModel name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public PublicTestRunModel productName(String productName) {
    
    this.productName = productName;
    return this;
  }

   /**
   * Get productName
   * @return productName
  **/
  @javax.annotation.Nullable
  public String getProductName() {
    return productName;
  }


  public void setProductName(String productName) {
    this.productName = productName;
  }


  public PublicTestRunModel build(String build) {
    
    this.build = build;
    return this;
  }

   /**
   * Get build
   * @return build
  **/
  @javax.annotation.Nullable
  public String getBuild() {
    return build;
  }


  public void setBuild(String build) {
    this.build = build;
  }


  public PublicTestRunModel configurations(List<ConfigurationModel> configurations) {
    
    this.configurations = configurations;
    return this;
  }

  public PublicTestRunModel addConfigurationsItem(ConfigurationModel configurationsItem) {
    if (this.configurations == null) {
      this.configurations = new ArrayList<>();
    }
    this.configurations.add(configurationsItem);
    return this;
  }

   /**
   * Get configurations
   * @return configurations
  **/
  @javax.annotation.Nullable
  public List<ConfigurationModel> getConfigurations() {
    return configurations;
  }


  public void setConfigurations(List<ConfigurationModel> configurations) {
    this.configurations = configurations;
  }


  public PublicTestRunModel autoTests(List<AutoTestModel> autoTests) {
    
    this.autoTests = autoTests;
    return this;
  }

  public PublicTestRunModel addAutoTestsItem(AutoTestModel autoTestsItem) {
    if (this.autoTests == null) {
      this.autoTests = new ArrayList<>();
    }
    this.autoTests.add(autoTestsItem);
    return this;
  }

   /**
   * Get autoTests
   * @return autoTests
  **/
  @javax.annotation.Nullable
  public List<AutoTestModel> getAutoTests() {
    return autoTests;
  }


  public void setAutoTests(List<AutoTestModel> autoTests) {
    this.autoTests = autoTests;
  }


  public PublicTestRunModel testPoints(List<PublicTestPointModel> testPoints) {
    
    this.testPoints = testPoints;
    return this;
  }

  public PublicTestRunModel addTestPointsItem(PublicTestPointModel testPointsItem) {
    if (this.testPoints == null) {
      this.testPoints = new ArrayList<>();
    }
    this.testPoints.add(testPointsItem);
    return this;
  }

   /**
   * Get testPoints
   * @return testPoints
  **/
  @javax.annotation.Nullable
  public List<PublicTestPointModel> getTestPoints() {
    return testPoints;
  }


  public void setTestPoints(List<PublicTestPointModel> testPoints) {
    this.testPoints = testPoints;
  }


  public PublicTestRunModel status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PublicTestRunModel publicTestRunModel = (PublicTestRunModel) o;
    return Objects.equals(this.testRunId, publicTestRunModel.testRunId) &&
        Objects.equals(this.testPlanId, publicTestRunModel.testPlanId) &&
        Objects.equals(this.testPlanGlobalId, publicTestRunModel.testPlanGlobalId) &&
        Objects.equals(this.name, publicTestRunModel.name) &&
        Objects.equals(this.productName, publicTestRunModel.productName) &&
        Objects.equals(this.build, publicTestRunModel.build) &&
        Objects.equals(this.configurations, publicTestRunModel.configurations) &&
        Objects.equals(this.autoTests, publicTestRunModel.autoTests) &&
        Objects.equals(this.testPoints, publicTestRunModel.testPoints) &&
        Objects.equals(this.status, publicTestRunModel.status);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(testRunId, testPlanId, testPlanGlobalId, name, productName, build, configurations, autoTests, testPoints, status);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PublicTestRunModel {\n");
    sb.append("    testRunId: ").append(toIndentedString(testRunId)).append("\n");
    sb.append("    testPlanId: ").append(toIndentedString(testPlanId)).append("\n");
    sb.append("    testPlanGlobalId: ").append(toIndentedString(testPlanGlobalId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    productName: ").append(toIndentedString(productName)).append("\n");
    sb.append("    build: ").append(toIndentedString(build)).append("\n");
    sb.append("    configurations: ").append(toIndentedString(configurations)).append("\n");
    sb.append("    autoTests: ").append(toIndentedString(autoTests)).append("\n");
    sb.append("    testPoints: ").append(toIndentedString(testPoints)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("testRunId");
    openapiFields.add("testPlanId");
    openapiFields.add("testPlanGlobalId");
    openapiFields.add("name");
    openapiFields.add("productName");
    openapiFields.add("build");
    openapiFields.add("configurations");
    openapiFields.add("autoTests");
    openapiFields.add("testPoints");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PublicTestRunModel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PublicTestRunModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PublicTestRunModel is not found in the empty JSON string", PublicTestRunModel.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PublicTestRunModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PublicTestRunModel` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("testRunId") != null && !jsonObj.get("testRunId").isJsonNull()) && !jsonObj.get("testRunId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testRunId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testRunId").toString()));
      }
      if ((jsonObj.get("testPlanId") != null && !jsonObj.get("testPlanId").isJsonNull()) && !jsonObj.get("testPlanId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testPlanId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testPlanId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("productName") != null && !jsonObj.get("productName").isJsonNull()) && !jsonObj.get("productName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productName").toString()));
      }
      if ((jsonObj.get("build") != null && !jsonObj.get("build").isJsonNull()) && !jsonObj.get("build").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `build` to be a primitive type in the JSON string but got `%s`", jsonObj.get("build").toString()));
      }
      if (jsonObj.get("configurations") != null && !jsonObj.get("configurations").isJsonNull()) {
        JsonArray jsonArrayconfigurations = jsonObj.getAsJsonArray("configurations");
        if (jsonArrayconfigurations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("configurations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `configurations` to be an array in the JSON string but got `%s`", jsonObj.get("configurations").toString()));
          }

          // validate the optional field `configurations` (array)
          for (int i = 0; i < jsonArrayconfigurations.size(); i++) {
            ConfigurationModel.validateJsonObject(jsonArrayconfigurations.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("autoTests") != null && !jsonObj.get("autoTests").isJsonNull()) {
        JsonArray jsonArrayautoTests = jsonObj.getAsJsonArray("autoTests");
        if (jsonArrayautoTests != null) {
          // ensure the json data is an array
          if (!jsonObj.get("autoTests").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `autoTests` to be an array in the JSON string but got `%s`", jsonObj.get("autoTests").toString()));
          }

          // validate the optional field `autoTests` (array)
          for (int i = 0; i < jsonArrayautoTests.size(); i++) {
            AutoTestModel.validateJsonObject(jsonArrayautoTests.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("testPoints") != null && !jsonObj.get("testPoints").isJsonNull()) {
        JsonArray jsonArraytestPoints = jsonObj.getAsJsonArray("testPoints");
        if (jsonArraytestPoints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("testPoints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `testPoints` to be an array in the JSON string but got `%s`", jsonObj.get("testPoints").toString()));
          }

          // validate the optional field `testPoints` (array)
          for (int i = 0; i < jsonArraytestPoints.size(); i++) {
            PublicTestPointModel.validateJsonObject(jsonArraytestPoints.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PublicTestRunModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PublicTestRunModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PublicTestRunModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PublicTestRunModel.class));

       return (TypeAdapter<T>) new TypeAdapter<PublicTestRunModel>() {
           @Override
           public void write(JsonWriter out, PublicTestRunModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PublicTestRunModel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PublicTestRunModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PublicTestRunModel
  * @throws IOException if the JSON string is invalid with respect to PublicTestRunModel
  */
  public static PublicTestRunModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PublicTestRunModel.class);
  }

 /**
  * Convert an instance of PublicTestRunModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

