/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import ru.testit.client.model.AutoTestModel;
import ru.testit.client.model.ConfigurationModel;
import ru.testit.client.model.PublicTestPointModel;
import ru.testit.client.model.TestStatusModel;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import ru.testit.client.invoker.JSON;


/**
 * PublicTestRunModel
 */
@JsonPropertyOrder({
  PublicTestRunModel.JSON_PROPERTY_TEST_RUN_ID,
  PublicTestRunModel.JSON_PROPERTY_TEST_PLAN_GLOBAL_ID,
  PublicTestRunModel.JSON_PROPERTY_NAME,
  PublicTestRunModel.JSON_PROPERTY_CONFIGURATIONS,
  PublicTestRunModel.JSON_PROPERTY_AUTO_TESTS,
  PublicTestRunModel.JSON_PROPERTY_TEST_POINTS,
  PublicTestRunModel.JSON_PROPERTY_STATUS,
  PublicTestRunModel.JSON_PROPERTY_STATUS_MODEL,
  PublicTestRunModel.JSON_PROPERTY_TEST_PLAN_ID,
  PublicTestRunModel.JSON_PROPERTY_PRODUCT_NAME,
  PublicTestRunModel.JSON_PROPERTY_BUILD,
  PublicTestRunModel.JSON_PROPERTY_CUSTOM_PARAMETERS,
  PublicTestRunModel.JSON_PROPERTY_TEST_RUN_DESCRIPTION
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0")
public class PublicTestRunModel {
  public static final String JSON_PROPERTY_TEST_RUN_ID = "testRunId";
  private UUID testRunId;

  public static final String JSON_PROPERTY_TEST_PLAN_GLOBAL_ID = "testPlanGlobalId";
  private Long testPlanGlobalId;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_CONFIGURATIONS = "configurations";
  private List<ConfigurationModel> configurations = new ArrayList<>();

  public static final String JSON_PROPERTY_AUTO_TESTS = "autoTests";
  private List<AutoTestModel> autoTests = new ArrayList<>();

  public static final String JSON_PROPERTY_TEST_POINTS = "testPoints";
  private List<PublicTestPointModel> testPoints = new ArrayList<>();

  public static final String JSON_PROPERTY_STATUS = "status";
  @Deprecated
  private String status;

  public static final String JSON_PROPERTY_STATUS_MODEL = "statusModel";
  private TestStatusModel statusModel;

  public static final String JSON_PROPERTY_TEST_PLAN_ID = "testPlanId";
  private JsonNullable<UUID> testPlanId = JsonNullable.<UUID>undefined();

  public static final String JSON_PROPERTY_PRODUCT_NAME = "productName";
  private JsonNullable<String> productName = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_BUILD = "build";
  private JsonNullable<String> build = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_CUSTOM_PARAMETERS = "customParameters";
  private JsonNullable<Map<String, String>> customParameters = JsonNullable.<Map<String, String>>undefined();

  public static final String JSON_PROPERTY_TEST_RUN_DESCRIPTION = "testRunDescription";
  private JsonNullable<String> testRunDescription = JsonNullable.<String>undefined();

  public PublicTestRunModel() { 
  }

  public PublicTestRunModel testRunId(UUID testRunId) {
    this.testRunId = testRunId;
    return this;
  }

  /**
   * Get testRunId
   * @return testRunId
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TEST_RUN_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getTestRunId() {
    return testRunId;
  }


  @JsonProperty(JSON_PROPERTY_TEST_RUN_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTestRunId(UUID testRunId) {
    this.testRunId = testRunId;
  }


  public PublicTestRunModel testPlanGlobalId(Long testPlanGlobalId) {
    this.testPlanGlobalId = testPlanGlobalId;
    return this;
  }

  /**
   * Get testPlanGlobalId
   * @return testPlanGlobalId
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TEST_PLAN_GLOBAL_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getTestPlanGlobalId() {
    return testPlanGlobalId;
  }


  @JsonProperty(JSON_PROPERTY_TEST_PLAN_GLOBAL_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTestPlanGlobalId(Long testPlanGlobalId) {
    this.testPlanGlobalId = testPlanGlobalId;
  }


  public PublicTestRunModel name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public PublicTestRunModel configurations(List<ConfigurationModel> configurations) {
    this.configurations = configurations;
    return this;
  }

  public PublicTestRunModel addConfigurationsItem(ConfigurationModel configurationsItem) {
    if (this.configurations == null) {
      this.configurations = new ArrayList<>();
    }
    this.configurations.add(configurationsItem);
    return this;
  }

  /**
   * Get configurations
   * @return configurations
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CONFIGURATIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ConfigurationModel> getConfigurations() {
    return configurations;
  }


  @JsonProperty(JSON_PROPERTY_CONFIGURATIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConfigurations(List<ConfigurationModel> configurations) {
    this.configurations = configurations;
  }


  public PublicTestRunModel autoTests(List<AutoTestModel> autoTests) {
    this.autoTests = autoTests;
    return this;
  }

  public PublicTestRunModel addAutoTestsItem(AutoTestModel autoTestsItem) {
    if (this.autoTests == null) {
      this.autoTests = new ArrayList<>();
    }
    this.autoTests.add(autoTestsItem);
    return this;
  }

  /**
   * Get autoTests
   * @return autoTests
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AUTO_TESTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<AutoTestModel> getAutoTests() {
    return autoTests;
  }


  @JsonProperty(JSON_PROPERTY_AUTO_TESTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAutoTests(List<AutoTestModel> autoTests) {
    this.autoTests = autoTests;
  }


  public PublicTestRunModel testPoints(List<PublicTestPointModel> testPoints) {
    this.testPoints = testPoints;
    return this;
  }

  public PublicTestRunModel addTestPointsItem(PublicTestPointModel testPointsItem) {
    if (this.testPoints == null) {
      this.testPoints = new ArrayList<>();
    }
    this.testPoints.add(testPointsItem);
    return this;
  }

  /**
   * Get testPoints
   * @return testPoints
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TEST_POINTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<PublicTestPointModel> getTestPoints() {
    return testPoints;
  }


  @JsonProperty(JSON_PROPERTY_TEST_POINTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTestPoints(List<PublicTestPointModel> testPoints) {
    this.testPoints = testPoints;
  }


  @Deprecated
  public PublicTestRunModel status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   * @deprecated
   */
  @Deprecated
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getStatus() {
    return status;
  }


  @Deprecated
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatus(String status) {
    this.status = status;
  }


  public PublicTestRunModel statusModel(TestStatusModel statusModel) {
    this.statusModel = statusModel;
    return this;
  }

  /**
   * Get statusModel
   * @return statusModel
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATUS_MODEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TestStatusModel getStatusModel() {
    return statusModel;
  }


  @JsonProperty(JSON_PROPERTY_STATUS_MODEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatusModel(TestStatusModel statusModel) {
    this.statusModel = statusModel;
  }


  public PublicTestRunModel testPlanId(UUID testPlanId) {
    this.testPlanId = JsonNullable.<UUID>of(testPlanId);
    return this;
  }

  /**
   * Get testPlanId
   * @return testPlanId
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public UUID getTestPlanId() {
        return testPlanId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TEST_PLAN_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<UUID> getTestPlanId_JsonNullable() {
    return testPlanId;
  }
  
  @JsonProperty(JSON_PROPERTY_TEST_PLAN_ID)
  public void setTestPlanId_JsonNullable(JsonNullable<UUID> testPlanId) {
    this.testPlanId = testPlanId;
  }

  public void setTestPlanId(UUID testPlanId) {
    this.testPlanId = JsonNullable.<UUID>of(testPlanId);
  }


  public PublicTestRunModel productName(String productName) {
    this.productName = JsonNullable.<String>of(productName);
    return this;
  }

  /**
   * Get productName
   * @return productName
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getProductName() {
        return productName.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PRODUCT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getProductName_JsonNullable() {
    return productName;
  }
  
  @JsonProperty(JSON_PROPERTY_PRODUCT_NAME)
  public void setProductName_JsonNullable(JsonNullable<String> productName) {
    this.productName = productName;
  }

  public void setProductName(String productName) {
    this.productName = JsonNullable.<String>of(productName);
  }


  public PublicTestRunModel build(String build) {
    this.build = JsonNullable.<String>of(build);
    return this;
  }

  /**
   * Get build
   * @return build
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getBuild() {
        return build.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_BUILD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getBuild_JsonNullable() {
    return build;
  }
  
  @JsonProperty(JSON_PROPERTY_BUILD)
  public void setBuild_JsonNullable(JsonNullable<String> build) {
    this.build = build;
  }

  public void setBuild(String build) {
    this.build = JsonNullable.<String>of(build);
  }


  public PublicTestRunModel customParameters(Map<String, String> customParameters) {
    this.customParameters = JsonNullable.<Map<String, String>>of(customParameters);
    return this;
  }

  public PublicTestRunModel putCustomParametersItem(String key, String customParametersItem) {
    if (this.customParameters == null || !this.customParameters.isPresent()) {
      this.customParameters = JsonNullable.<Map<String, String>>of(new HashMap<>());
    }
    try {
      this.customParameters.get().put(key, customParametersItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Get customParameters
   * @return customParameters
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Map<String, String> getCustomParameters() {
        return customParameters.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CUSTOM_PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Map<String, String>> getCustomParameters_JsonNullable() {
    return customParameters;
  }
  
  @JsonProperty(JSON_PROPERTY_CUSTOM_PARAMETERS)
  public void setCustomParameters_JsonNullable(JsonNullable<Map<String, String>> customParameters) {
    this.customParameters = customParameters;
  }

  public void setCustomParameters(Map<String, String> customParameters) {
    this.customParameters = JsonNullable.<Map<String, String>>of(customParameters);
  }


  public PublicTestRunModel testRunDescription(String testRunDescription) {
    this.testRunDescription = JsonNullable.<String>of(testRunDescription);
    return this;
  }

  /**
   * Get testRunDescription
   * @return testRunDescription
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getTestRunDescription() {
        return testRunDescription.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TEST_RUN_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getTestRunDescription_JsonNullable() {
    return testRunDescription;
  }
  
  @JsonProperty(JSON_PROPERTY_TEST_RUN_DESCRIPTION)
  public void setTestRunDescription_JsonNullable(JsonNullable<String> testRunDescription) {
    this.testRunDescription = testRunDescription;
  }

  public void setTestRunDescription(String testRunDescription) {
    this.testRunDescription = JsonNullable.<String>of(testRunDescription);
  }


  /**
   * Return true if this PublicTestRunModel object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PublicTestRunModel publicTestRunModel = (PublicTestRunModel) o;
    return Objects.equals(this.testRunId, publicTestRunModel.testRunId) &&
        Objects.equals(this.testPlanGlobalId, publicTestRunModel.testPlanGlobalId) &&
        Objects.equals(this.name, publicTestRunModel.name) &&
        Objects.equals(this.configurations, publicTestRunModel.configurations) &&
        Objects.equals(this.autoTests, publicTestRunModel.autoTests) &&
        Objects.equals(this.testPoints, publicTestRunModel.testPoints) &&
        Objects.equals(this.status, publicTestRunModel.status) &&
        Objects.equals(this.statusModel, publicTestRunModel.statusModel) &&
        equalsNullable(this.testPlanId, publicTestRunModel.testPlanId) &&
        equalsNullable(this.productName, publicTestRunModel.productName) &&
        equalsNullable(this.build, publicTestRunModel.build) &&
        equalsNullable(this.customParameters, publicTestRunModel.customParameters) &&
        equalsNullable(this.testRunDescription, publicTestRunModel.testRunDescription);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(testRunId, testPlanGlobalId, name, configurations, autoTests, testPoints, status, statusModel, hashCodeNullable(testPlanId), hashCodeNullable(productName), hashCodeNullable(build), hashCodeNullable(customParameters), hashCodeNullable(testRunDescription));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PublicTestRunModel {\n");
    sb.append("    testRunId: ").append(toIndentedString(testRunId)).append("\n");
    sb.append("    testPlanGlobalId: ").append(toIndentedString(testPlanGlobalId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    configurations: ").append(toIndentedString(configurations)).append("\n");
    sb.append("    autoTests: ").append(toIndentedString(autoTests)).append("\n");
    sb.append("    testPoints: ").append(toIndentedString(testPoints)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusModel: ").append(toIndentedString(statusModel)).append("\n");
    sb.append("    testPlanId: ").append(toIndentedString(testPlanId)).append("\n");
    sb.append("    productName: ").append(toIndentedString(productName)).append("\n");
    sb.append("    build: ").append(toIndentedString(build)).append("\n");
    sb.append("    customParameters: ").append(toIndentedString(customParameters)).append("\n");
    sb.append("    testRunDescription: ").append(toIndentedString(testRunDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

