/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import ru.testit.client.invoker.JSON;

/**
 * TestPlanSummaryModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TestPlanSummaryModel {
  public static final String SERIALIZED_NAME_TOTAL_TEST_POINTS_COUNT = "totalTestPointsCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_TEST_POINTS_COUNT)
  private Integer totalTestPointsCount;

  public static final String SERIALIZED_NAME_MANUAL_TEST_POINTS_COUNT = "manualTestPointsCount";
  @SerializedName(SERIALIZED_NAME_MANUAL_TEST_POINTS_COUNT)
  private Integer manualTestPointsCount;

  public static final String SERIALIZED_NAME_AUTOMATED_TEST_POINTS_COUNT = "automatedTestPointsCount";
  @SerializedName(SERIALIZED_NAME_AUTOMATED_TEST_POINTS_COUNT)
  private Integer automatedTestPointsCount;

  public static final String SERIALIZED_NAME_COMPLETED_TEST_POINTS_COUNT = "completedTestPointsCount";
  @SerializedName(SERIALIZED_NAME_COMPLETED_TEST_POINTS_COUNT)
  private Integer completedTestPointsCount;

  public static final String SERIALIZED_NAME_DEFECTS_COUNT = "defectsCount";
  @SerializedName(SERIALIZED_NAME_DEFECTS_COUNT)
  private Integer defectsCount;

  public static final String SERIALIZED_NAME_PLANNED_TEST_POINTS_DURATION = "plannedTestPointsDuration";
  @SerializedName(SERIALIZED_NAME_PLANNED_TEST_POINTS_DURATION)
  private Long plannedTestPointsDuration;

  public static final String SERIALIZED_NAME_SPENT_TEST_POINTS_DURATION = "spentTestPointsDuration";
  @SerializedName(SERIALIZED_NAME_SPENT_TEST_POINTS_DURATION)
  private Long spentTestPointsDuration;

  public TestPlanSummaryModel() {
  }

  public TestPlanSummaryModel totalTestPointsCount(Integer totalTestPointsCount) {
    
    this.totalTestPointsCount = totalTestPointsCount;
    return this;
  }

   /**
   * Get totalTestPointsCount
   * @return totalTestPointsCount
  **/
  @javax.annotation.Nonnull
  public Integer getTotalTestPointsCount() {
    return totalTestPointsCount;
  }


  public void setTotalTestPointsCount(Integer totalTestPointsCount) {
    this.totalTestPointsCount = totalTestPointsCount;
  }


  public TestPlanSummaryModel manualTestPointsCount(Integer manualTestPointsCount) {
    
    this.manualTestPointsCount = manualTestPointsCount;
    return this;
  }

   /**
   * Get manualTestPointsCount
   * @return manualTestPointsCount
  **/
  @javax.annotation.Nonnull
  public Integer getManualTestPointsCount() {
    return manualTestPointsCount;
  }


  public void setManualTestPointsCount(Integer manualTestPointsCount) {
    this.manualTestPointsCount = manualTestPointsCount;
  }


  public TestPlanSummaryModel automatedTestPointsCount(Integer automatedTestPointsCount) {
    
    this.automatedTestPointsCount = automatedTestPointsCount;
    return this;
  }

   /**
   * Get automatedTestPointsCount
   * @return automatedTestPointsCount
  **/
  @javax.annotation.Nonnull
  public Integer getAutomatedTestPointsCount() {
    return automatedTestPointsCount;
  }


  public void setAutomatedTestPointsCount(Integer automatedTestPointsCount) {
    this.automatedTestPointsCount = automatedTestPointsCount;
  }


  public TestPlanSummaryModel completedTestPointsCount(Integer completedTestPointsCount) {
    
    this.completedTestPointsCount = completedTestPointsCount;
    return this;
  }

   /**
   * Get completedTestPointsCount
   * @return completedTestPointsCount
  **/
  @javax.annotation.Nonnull
  public Integer getCompletedTestPointsCount() {
    return completedTestPointsCount;
  }


  public void setCompletedTestPointsCount(Integer completedTestPointsCount) {
    this.completedTestPointsCount = completedTestPointsCount;
  }


  public TestPlanSummaryModel defectsCount(Integer defectsCount) {
    
    this.defectsCount = defectsCount;
    return this;
  }

   /**
   * Get defectsCount
   * @return defectsCount
  **/
  @javax.annotation.Nonnull
  public Integer getDefectsCount() {
    return defectsCount;
  }


  public void setDefectsCount(Integer defectsCount) {
    this.defectsCount = defectsCount;
  }


  public TestPlanSummaryModel plannedTestPointsDuration(Long plannedTestPointsDuration) {
    
    this.plannedTestPointsDuration = plannedTestPointsDuration;
    return this;
  }

   /**
   * Get plannedTestPointsDuration
   * @return plannedTestPointsDuration
  **/
  @javax.annotation.Nonnull
  public Long getPlannedTestPointsDuration() {
    return plannedTestPointsDuration;
  }


  public void setPlannedTestPointsDuration(Long plannedTestPointsDuration) {
    this.plannedTestPointsDuration = plannedTestPointsDuration;
  }


  public TestPlanSummaryModel spentTestPointsDuration(Long spentTestPointsDuration) {
    
    this.spentTestPointsDuration = spentTestPointsDuration;
    return this;
  }

   /**
   * Get spentTestPointsDuration
   * @return spentTestPointsDuration
  **/
  @javax.annotation.Nullable
  public Long getSpentTestPointsDuration() {
    return spentTestPointsDuration;
  }


  public void setSpentTestPointsDuration(Long spentTestPointsDuration) {
    this.spentTestPointsDuration = spentTestPointsDuration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestPlanSummaryModel testPlanSummaryModel = (TestPlanSummaryModel) o;
    return Objects.equals(this.totalTestPointsCount, testPlanSummaryModel.totalTestPointsCount) &&
        Objects.equals(this.manualTestPointsCount, testPlanSummaryModel.manualTestPointsCount) &&
        Objects.equals(this.automatedTestPointsCount, testPlanSummaryModel.automatedTestPointsCount) &&
        Objects.equals(this.completedTestPointsCount, testPlanSummaryModel.completedTestPointsCount) &&
        Objects.equals(this.defectsCount, testPlanSummaryModel.defectsCount) &&
        Objects.equals(this.plannedTestPointsDuration, testPlanSummaryModel.plannedTestPointsDuration) &&
        Objects.equals(this.spentTestPointsDuration, testPlanSummaryModel.spentTestPointsDuration);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalTestPointsCount, manualTestPointsCount, automatedTestPointsCount, completedTestPointsCount, defectsCount, plannedTestPointsDuration, spentTestPointsDuration);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestPlanSummaryModel {\n");
    sb.append("    totalTestPointsCount: ").append(toIndentedString(totalTestPointsCount)).append("\n");
    sb.append("    manualTestPointsCount: ").append(toIndentedString(manualTestPointsCount)).append("\n");
    sb.append("    automatedTestPointsCount: ").append(toIndentedString(automatedTestPointsCount)).append("\n");
    sb.append("    completedTestPointsCount: ").append(toIndentedString(completedTestPointsCount)).append("\n");
    sb.append("    defectsCount: ").append(toIndentedString(defectsCount)).append("\n");
    sb.append("    plannedTestPointsDuration: ").append(toIndentedString(plannedTestPointsDuration)).append("\n");
    sb.append("    spentTestPointsDuration: ").append(toIndentedString(spentTestPointsDuration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("totalTestPointsCount");
    openapiFields.add("manualTestPointsCount");
    openapiFields.add("automatedTestPointsCount");
    openapiFields.add("completedTestPointsCount");
    openapiFields.add("defectsCount");
    openapiFields.add("plannedTestPointsDuration");
    openapiFields.add("spentTestPointsDuration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("totalTestPointsCount");
    openapiRequiredFields.add("manualTestPointsCount");
    openapiRequiredFields.add("automatedTestPointsCount");
    openapiRequiredFields.add("completedTestPointsCount");
    openapiRequiredFields.add("defectsCount");
    openapiRequiredFields.add("plannedTestPointsDuration");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TestPlanSummaryModel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TestPlanSummaryModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestPlanSummaryModel is not found in the empty JSON string", TestPlanSummaryModel.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TestPlanSummaryModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestPlanSummaryModel` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TestPlanSummaryModel.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestPlanSummaryModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestPlanSummaryModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestPlanSummaryModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestPlanSummaryModel.class));

       return (TypeAdapter<T>) new TypeAdapter<TestPlanSummaryModel>() {
           @Override
           public void write(JsonWriter out, TestPlanSummaryModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestPlanSummaryModel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TestPlanSummaryModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TestPlanSummaryModel
  * @throws IOException if the JSON string is invalid with respect to TestPlanSummaryModel
  */
  public static TestPlanSummaryModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestPlanSummaryModel.class);
  }

 /**
  * Convert an instance of TestPlanSummaryModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

