/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import ru.testit.client.invoker.JSON;


/**
 * TestPlanSummaryModel
 */
@JsonPropertyOrder({
  TestPlanSummaryModel.JSON_PROPERTY_TOTAL_TEST_POINTS_COUNT,
  TestPlanSummaryModel.JSON_PROPERTY_MANUAL_TEST_POINTS_COUNT,
  TestPlanSummaryModel.JSON_PROPERTY_AUTOMATED_TEST_POINTS_COUNT,
  TestPlanSummaryModel.JSON_PROPERTY_COMPLETED_TEST_POINTS_COUNT,
  TestPlanSummaryModel.JSON_PROPERTY_DEFECTS_COUNT,
  TestPlanSummaryModel.JSON_PROPERTY_PLANNED_TEST_POINTS_DURATION,
  TestPlanSummaryModel.JSON_PROPERTY_SPENT_TEST_POINTS_DURATION
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0")
public class TestPlanSummaryModel {
  public static final String JSON_PROPERTY_TOTAL_TEST_POINTS_COUNT = "totalTestPointsCount";
  private Integer totalTestPointsCount;

  public static final String JSON_PROPERTY_MANUAL_TEST_POINTS_COUNT = "manualTestPointsCount";
  private Integer manualTestPointsCount;

  public static final String JSON_PROPERTY_AUTOMATED_TEST_POINTS_COUNT = "automatedTestPointsCount";
  private Integer automatedTestPointsCount;

  public static final String JSON_PROPERTY_COMPLETED_TEST_POINTS_COUNT = "completedTestPointsCount";
  private Integer completedTestPointsCount;

  public static final String JSON_PROPERTY_DEFECTS_COUNT = "defectsCount";
  private Integer defectsCount;

  public static final String JSON_PROPERTY_PLANNED_TEST_POINTS_DURATION = "plannedTestPointsDuration";
  private Long plannedTestPointsDuration;

  public static final String JSON_PROPERTY_SPENT_TEST_POINTS_DURATION = "spentTestPointsDuration";
  private JsonNullable<Long> spentTestPointsDuration = JsonNullable.<Long>undefined();

  public TestPlanSummaryModel() { 
  }

  public TestPlanSummaryModel totalTestPointsCount(Integer totalTestPointsCount) {
    this.totalTestPointsCount = totalTestPointsCount;
    return this;
  }

  /**
   * Get totalTestPointsCount
   * @return totalTestPointsCount
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOTAL_TEST_POINTS_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getTotalTestPointsCount() {
    return totalTestPointsCount;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_TEST_POINTS_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTotalTestPointsCount(Integer totalTestPointsCount) {
    this.totalTestPointsCount = totalTestPointsCount;
  }


  public TestPlanSummaryModel manualTestPointsCount(Integer manualTestPointsCount) {
    this.manualTestPointsCount = manualTestPointsCount;
    return this;
  }

  /**
   * Get manualTestPointsCount
   * @return manualTestPointsCount
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MANUAL_TEST_POINTS_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getManualTestPointsCount() {
    return manualTestPointsCount;
  }


  @JsonProperty(JSON_PROPERTY_MANUAL_TEST_POINTS_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setManualTestPointsCount(Integer manualTestPointsCount) {
    this.manualTestPointsCount = manualTestPointsCount;
  }


  public TestPlanSummaryModel automatedTestPointsCount(Integer automatedTestPointsCount) {
    this.automatedTestPointsCount = automatedTestPointsCount;
    return this;
  }

  /**
   * Get automatedTestPointsCount
   * @return automatedTestPointsCount
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AUTOMATED_TEST_POINTS_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getAutomatedTestPointsCount() {
    return automatedTestPointsCount;
  }


  @JsonProperty(JSON_PROPERTY_AUTOMATED_TEST_POINTS_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAutomatedTestPointsCount(Integer automatedTestPointsCount) {
    this.automatedTestPointsCount = automatedTestPointsCount;
  }


  public TestPlanSummaryModel completedTestPointsCount(Integer completedTestPointsCount) {
    this.completedTestPointsCount = completedTestPointsCount;
    return this;
  }

  /**
   * Get completedTestPointsCount
   * @return completedTestPointsCount
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COMPLETED_TEST_POINTS_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getCompletedTestPointsCount() {
    return completedTestPointsCount;
  }


  @JsonProperty(JSON_PROPERTY_COMPLETED_TEST_POINTS_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCompletedTestPointsCount(Integer completedTestPointsCount) {
    this.completedTestPointsCount = completedTestPointsCount;
  }


  public TestPlanSummaryModel defectsCount(Integer defectsCount) {
    this.defectsCount = defectsCount;
    return this;
  }

  /**
   * Get defectsCount
   * @return defectsCount
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DEFECTS_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getDefectsCount() {
    return defectsCount;
  }


  @JsonProperty(JSON_PROPERTY_DEFECTS_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDefectsCount(Integer defectsCount) {
    this.defectsCount = defectsCount;
  }


  public TestPlanSummaryModel plannedTestPointsDuration(Long plannedTestPointsDuration) {
    this.plannedTestPointsDuration = plannedTestPointsDuration;
    return this;
  }

  /**
   * Get plannedTestPointsDuration
   * @return plannedTestPointsDuration
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PLANNED_TEST_POINTS_DURATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getPlannedTestPointsDuration() {
    return plannedTestPointsDuration;
  }


  @JsonProperty(JSON_PROPERTY_PLANNED_TEST_POINTS_DURATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPlannedTestPointsDuration(Long plannedTestPointsDuration) {
    this.plannedTestPointsDuration = plannedTestPointsDuration;
  }


  public TestPlanSummaryModel spentTestPointsDuration(Long spentTestPointsDuration) {
    this.spentTestPointsDuration = JsonNullable.<Long>of(spentTestPointsDuration);
    return this;
  }

  /**
   * Get spentTestPointsDuration
   * @return spentTestPointsDuration
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Long getSpentTestPointsDuration() {
        return spentTestPointsDuration.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SPENT_TEST_POINTS_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Long> getSpentTestPointsDuration_JsonNullable() {
    return spentTestPointsDuration;
  }
  
  @JsonProperty(JSON_PROPERTY_SPENT_TEST_POINTS_DURATION)
  public void setSpentTestPointsDuration_JsonNullable(JsonNullable<Long> spentTestPointsDuration) {
    this.spentTestPointsDuration = spentTestPointsDuration;
  }

  public void setSpentTestPointsDuration(Long spentTestPointsDuration) {
    this.spentTestPointsDuration = JsonNullable.<Long>of(spentTestPointsDuration);
  }


  /**
   * Return true if this TestPlanSummaryModel object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestPlanSummaryModel testPlanSummaryModel = (TestPlanSummaryModel) o;
    return Objects.equals(this.totalTestPointsCount, testPlanSummaryModel.totalTestPointsCount) &&
        Objects.equals(this.manualTestPointsCount, testPlanSummaryModel.manualTestPointsCount) &&
        Objects.equals(this.automatedTestPointsCount, testPlanSummaryModel.automatedTestPointsCount) &&
        Objects.equals(this.completedTestPointsCount, testPlanSummaryModel.completedTestPointsCount) &&
        Objects.equals(this.defectsCount, testPlanSummaryModel.defectsCount) &&
        Objects.equals(this.plannedTestPointsDuration, testPlanSummaryModel.plannedTestPointsDuration) &&
        equalsNullable(this.spentTestPointsDuration, testPlanSummaryModel.spentTestPointsDuration);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalTestPointsCount, manualTestPointsCount, automatedTestPointsCount, completedTestPointsCount, defectsCount, plannedTestPointsDuration, hashCodeNullable(spentTestPointsDuration));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestPlanSummaryModel {\n");
    sb.append("    totalTestPointsCount: ").append(toIndentedString(totalTestPointsCount)).append("\n");
    sb.append("    manualTestPointsCount: ").append(toIndentedString(manualTestPointsCount)).append("\n");
    sb.append("    automatedTestPointsCount: ").append(toIndentedString(automatedTestPointsCount)).append("\n");
    sb.append("    completedTestPointsCount: ").append(toIndentedString(completedTestPointsCount)).append("\n");
    sb.append("    defectsCount: ").append(toIndentedString(defectsCount)).append("\n");
    sb.append("    plannedTestPointsDuration: ").append(toIndentedString(plannedTestPointsDuration)).append("\n");
    sb.append("    spentTestPointsDuration: ").append(toIndentedString(spentTestPointsDuration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

