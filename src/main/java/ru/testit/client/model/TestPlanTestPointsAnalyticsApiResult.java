/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import ru.testit.client.model.TestPlanTestPointsStatusGroupApiResult;
import ru.testit.client.model.TestPlanTestPointsStatusTypeGroupApiResult;
import ru.testit.client.model.TestPlanTestPointsTesterAndStatusGroupApiResult;
import ru.testit.client.model.TestPlanTestPointsTesterAndStatusTypeGroupApiResult;
import ru.testit.client.model.TestPlanTestPointsTesterGroupApiResult;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import ru.testit.client.invoker.JSON;


/**
 * TestPlanTestPointsAnalyticsApiResult
 */
@JsonPropertyOrder({
  TestPlanTestPointsAnalyticsApiResult.JSON_PROPERTY_COUNT_GROUP_BY_STATUS,
  TestPlanTestPointsAnalyticsApiResult.JSON_PROPERTY_COUNT_GROUP_BY_TESTER_AND_STATUS,
  TestPlanTestPointsAnalyticsApiResult.JSON_PROPERTY_SUM_GROUP_BY_TESTER,
  TestPlanTestPointsAnalyticsApiResult.JSON_PROPERTY_COUNT_GROUP_BY_TESTER,
  TestPlanTestPointsAnalyticsApiResult.JSON_PROPERTY_COUNT_GROUP_BY_STATUS_TYPE,
  TestPlanTestPointsAnalyticsApiResult.JSON_PROPERTY_COUNT_GROUP_BY_TESTER_AND_STATUS_TYPE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0")
public class TestPlanTestPointsAnalyticsApiResult {
  public static final String JSON_PROPERTY_COUNT_GROUP_BY_STATUS = "countGroupByStatus";
  @Deprecated
  private List<TestPlanTestPointsStatusGroupApiResult> countGroupByStatus = new ArrayList<>();

  public static final String JSON_PROPERTY_COUNT_GROUP_BY_TESTER_AND_STATUS = "countGroupByTesterAndStatus";
  @Deprecated
  private List<TestPlanTestPointsTesterAndStatusGroupApiResult> countGroupByTesterAndStatus = new ArrayList<>();

  public static final String JSON_PROPERTY_SUM_GROUP_BY_TESTER = "sumGroupByTester";
  private List<TestPlanTestPointsTesterGroupApiResult> sumGroupByTester = new ArrayList<>();

  public static final String JSON_PROPERTY_COUNT_GROUP_BY_TESTER = "countGroupByTester";
  private List<TestPlanTestPointsTesterGroupApiResult> countGroupByTester = new ArrayList<>();

  public static final String JSON_PROPERTY_COUNT_GROUP_BY_STATUS_TYPE = "countGroupByStatusType";
  private List<TestPlanTestPointsStatusTypeGroupApiResult> countGroupByStatusType = new ArrayList<>();

  public static final String JSON_PROPERTY_COUNT_GROUP_BY_TESTER_AND_STATUS_TYPE = "countGroupByTesterAndStatusType";
  private List<TestPlanTestPointsTesterAndStatusTypeGroupApiResult> countGroupByTesterAndStatusType = new ArrayList<>();

  public TestPlanTestPointsAnalyticsApiResult() { 
  }

  @Deprecated
  public TestPlanTestPointsAnalyticsApiResult countGroupByStatus(List<TestPlanTestPointsStatusGroupApiResult> countGroupByStatus) {
    this.countGroupByStatus = countGroupByStatus;
    return this;
  }

  public TestPlanTestPointsAnalyticsApiResult addCountGroupByStatusItem(TestPlanTestPointsStatusGroupApiResult countGroupByStatusItem) {
    if (this.countGroupByStatus == null) {
      this.countGroupByStatus = new ArrayList<>();
    }
    this.countGroupByStatus.add(countGroupByStatusItem);
    return this;
  }

  /**
   * Get countGroupByStatus
   * @return countGroupByStatus
   * @deprecated
   */
  @Deprecated
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COUNT_GROUP_BY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<TestPlanTestPointsStatusGroupApiResult> getCountGroupByStatus() {
    return countGroupByStatus;
  }


  @Deprecated
  @JsonProperty(JSON_PROPERTY_COUNT_GROUP_BY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCountGroupByStatus(List<TestPlanTestPointsStatusGroupApiResult> countGroupByStatus) {
    this.countGroupByStatus = countGroupByStatus;
  }


  @Deprecated
  public TestPlanTestPointsAnalyticsApiResult countGroupByTesterAndStatus(List<TestPlanTestPointsTesterAndStatusGroupApiResult> countGroupByTesterAndStatus) {
    this.countGroupByTesterAndStatus = countGroupByTesterAndStatus;
    return this;
  }

  public TestPlanTestPointsAnalyticsApiResult addCountGroupByTesterAndStatusItem(TestPlanTestPointsTesterAndStatusGroupApiResult countGroupByTesterAndStatusItem) {
    if (this.countGroupByTesterAndStatus == null) {
      this.countGroupByTesterAndStatus = new ArrayList<>();
    }
    this.countGroupByTesterAndStatus.add(countGroupByTesterAndStatusItem);
    return this;
  }

  /**
   * Get countGroupByTesterAndStatus
   * @return countGroupByTesterAndStatus
   * @deprecated
   */
  @Deprecated
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COUNT_GROUP_BY_TESTER_AND_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<TestPlanTestPointsTesterAndStatusGroupApiResult> getCountGroupByTesterAndStatus() {
    return countGroupByTesterAndStatus;
  }


  @Deprecated
  @JsonProperty(JSON_PROPERTY_COUNT_GROUP_BY_TESTER_AND_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCountGroupByTesterAndStatus(List<TestPlanTestPointsTesterAndStatusGroupApiResult> countGroupByTesterAndStatus) {
    this.countGroupByTesterAndStatus = countGroupByTesterAndStatus;
  }


  public TestPlanTestPointsAnalyticsApiResult sumGroupByTester(List<TestPlanTestPointsTesterGroupApiResult> sumGroupByTester) {
    this.sumGroupByTester = sumGroupByTester;
    return this;
  }

  public TestPlanTestPointsAnalyticsApiResult addSumGroupByTesterItem(TestPlanTestPointsTesterGroupApiResult sumGroupByTesterItem) {
    if (this.sumGroupByTester == null) {
      this.sumGroupByTester = new ArrayList<>();
    }
    this.sumGroupByTester.add(sumGroupByTesterItem);
    return this;
  }

  /**
   * Get sumGroupByTester
   * @return sumGroupByTester
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SUM_GROUP_BY_TESTER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<TestPlanTestPointsTesterGroupApiResult> getSumGroupByTester() {
    return sumGroupByTester;
  }


  @JsonProperty(JSON_PROPERTY_SUM_GROUP_BY_TESTER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSumGroupByTester(List<TestPlanTestPointsTesterGroupApiResult> sumGroupByTester) {
    this.sumGroupByTester = sumGroupByTester;
  }


  public TestPlanTestPointsAnalyticsApiResult countGroupByTester(List<TestPlanTestPointsTesterGroupApiResult> countGroupByTester) {
    this.countGroupByTester = countGroupByTester;
    return this;
  }

  public TestPlanTestPointsAnalyticsApiResult addCountGroupByTesterItem(TestPlanTestPointsTesterGroupApiResult countGroupByTesterItem) {
    if (this.countGroupByTester == null) {
      this.countGroupByTester = new ArrayList<>();
    }
    this.countGroupByTester.add(countGroupByTesterItem);
    return this;
  }

  /**
   * Get countGroupByTester
   * @return countGroupByTester
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COUNT_GROUP_BY_TESTER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<TestPlanTestPointsTesterGroupApiResult> getCountGroupByTester() {
    return countGroupByTester;
  }


  @JsonProperty(JSON_PROPERTY_COUNT_GROUP_BY_TESTER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCountGroupByTester(List<TestPlanTestPointsTesterGroupApiResult> countGroupByTester) {
    this.countGroupByTester = countGroupByTester;
  }


  public TestPlanTestPointsAnalyticsApiResult countGroupByStatusType(List<TestPlanTestPointsStatusTypeGroupApiResult> countGroupByStatusType) {
    this.countGroupByStatusType = countGroupByStatusType;
    return this;
  }

  public TestPlanTestPointsAnalyticsApiResult addCountGroupByStatusTypeItem(TestPlanTestPointsStatusTypeGroupApiResult countGroupByStatusTypeItem) {
    if (this.countGroupByStatusType == null) {
      this.countGroupByStatusType = new ArrayList<>();
    }
    this.countGroupByStatusType.add(countGroupByStatusTypeItem);
    return this;
  }

  /**
   * Get countGroupByStatusType
   * @return countGroupByStatusType
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COUNT_GROUP_BY_STATUS_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<TestPlanTestPointsStatusTypeGroupApiResult> getCountGroupByStatusType() {
    return countGroupByStatusType;
  }


  @JsonProperty(JSON_PROPERTY_COUNT_GROUP_BY_STATUS_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCountGroupByStatusType(List<TestPlanTestPointsStatusTypeGroupApiResult> countGroupByStatusType) {
    this.countGroupByStatusType = countGroupByStatusType;
  }


  public TestPlanTestPointsAnalyticsApiResult countGroupByTesterAndStatusType(List<TestPlanTestPointsTesterAndStatusTypeGroupApiResult> countGroupByTesterAndStatusType) {
    this.countGroupByTesterAndStatusType = countGroupByTesterAndStatusType;
    return this;
  }

  public TestPlanTestPointsAnalyticsApiResult addCountGroupByTesterAndStatusTypeItem(TestPlanTestPointsTesterAndStatusTypeGroupApiResult countGroupByTesterAndStatusTypeItem) {
    if (this.countGroupByTesterAndStatusType == null) {
      this.countGroupByTesterAndStatusType = new ArrayList<>();
    }
    this.countGroupByTesterAndStatusType.add(countGroupByTesterAndStatusTypeItem);
    return this;
  }

  /**
   * Get countGroupByTesterAndStatusType
   * @return countGroupByTesterAndStatusType
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COUNT_GROUP_BY_TESTER_AND_STATUS_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<TestPlanTestPointsTesterAndStatusTypeGroupApiResult> getCountGroupByTesterAndStatusType() {
    return countGroupByTesterAndStatusType;
  }


  @JsonProperty(JSON_PROPERTY_COUNT_GROUP_BY_TESTER_AND_STATUS_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCountGroupByTesterAndStatusType(List<TestPlanTestPointsTesterAndStatusTypeGroupApiResult> countGroupByTesterAndStatusType) {
    this.countGroupByTesterAndStatusType = countGroupByTesterAndStatusType;
  }


  /**
   * Return true if this TestPlanTestPointsAnalyticsApiResult object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestPlanTestPointsAnalyticsApiResult testPlanTestPointsAnalyticsApiResult = (TestPlanTestPointsAnalyticsApiResult) o;
    return Objects.equals(this.countGroupByStatus, testPlanTestPointsAnalyticsApiResult.countGroupByStatus) &&
        Objects.equals(this.countGroupByTesterAndStatus, testPlanTestPointsAnalyticsApiResult.countGroupByTesterAndStatus) &&
        Objects.equals(this.sumGroupByTester, testPlanTestPointsAnalyticsApiResult.sumGroupByTester) &&
        Objects.equals(this.countGroupByTester, testPlanTestPointsAnalyticsApiResult.countGroupByTester) &&
        Objects.equals(this.countGroupByStatusType, testPlanTestPointsAnalyticsApiResult.countGroupByStatusType) &&
        Objects.equals(this.countGroupByTesterAndStatusType, testPlanTestPointsAnalyticsApiResult.countGroupByTesterAndStatusType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countGroupByStatus, countGroupByTesterAndStatus, sumGroupByTester, countGroupByTester, countGroupByStatusType, countGroupByTesterAndStatusType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestPlanTestPointsAnalyticsApiResult {\n");
    sb.append("    countGroupByStatus: ").append(toIndentedString(countGroupByStatus)).append("\n");
    sb.append("    countGroupByTesterAndStatus: ").append(toIndentedString(countGroupByTesterAndStatus)).append("\n");
    sb.append("    sumGroupByTester: ").append(toIndentedString(sumGroupByTester)).append("\n");
    sb.append("    countGroupByTester: ").append(toIndentedString(countGroupByTester)).append("\n");
    sb.append("    countGroupByStatusType: ").append(toIndentedString(countGroupByStatusType)).append("\n");
    sb.append("    countGroupByTesterAndStatusType: ").append(toIndentedString(countGroupByTesterAndStatusType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

