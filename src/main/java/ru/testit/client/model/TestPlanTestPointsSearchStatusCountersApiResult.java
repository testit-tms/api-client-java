/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import ru.testit.client.invoker.JSON;

/**
 * TestPlanTestPointsSearchStatusCountersApiResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0")
public class TestPlanTestPointsSearchStatusCountersApiResult {
  public static final String SERIALIZED_NAME_AUTOMATED_TEST_POINTS_COUNT = "automatedTestPointsCount";
  @SerializedName(SERIALIZED_NAME_AUTOMATED_TEST_POINTS_COUNT)
  private Integer automatedTestPointsCount;

  public static final String SERIALIZED_NAME_AUTOMATED_TEST_POINTS_IN_PROGRESS_COUNT = "automatedTestPointsInProgressCount";
  @SerializedName(SERIALIZED_NAME_AUTOMATED_TEST_POINTS_IN_PROGRESS_COUNT)
  private Integer automatedTestPointsInProgressCount;

  public static final String SERIALIZED_NAME_AUTOMATED_TEST_POINTS_FAILED_COUNT = "automatedTestPointsFailedCount";
  @SerializedName(SERIALIZED_NAME_AUTOMATED_TEST_POINTS_FAILED_COUNT)
  private Integer automatedTestPointsFailedCount;

  public static final String SERIALIZED_NAME_MANUAL_TEST_POINTS_COUNT = "manualTestPointsCount";
  @SerializedName(SERIALIZED_NAME_MANUAL_TEST_POINTS_COUNT)
  private Integer manualTestPointsCount;

  public TestPlanTestPointsSearchStatusCountersApiResult() {
  }

  public TestPlanTestPointsSearchStatusCountersApiResult automatedTestPointsCount(Integer automatedTestPointsCount) {
    this.automatedTestPointsCount = automatedTestPointsCount;
    return this;
  }

  /**
   * Get automatedTestPointsCount
   * @return automatedTestPointsCount
   */
  @javax.annotation.Nonnull
  public Integer getAutomatedTestPointsCount() {
    return automatedTestPointsCount;
  }

  public void setAutomatedTestPointsCount(Integer automatedTestPointsCount) {
    this.automatedTestPointsCount = automatedTestPointsCount;
  }


  public TestPlanTestPointsSearchStatusCountersApiResult automatedTestPointsInProgressCount(Integer automatedTestPointsInProgressCount) {
    this.automatedTestPointsInProgressCount = automatedTestPointsInProgressCount;
    return this;
  }

  /**
   * Get automatedTestPointsInProgressCount
   * @return automatedTestPointsInProgressCount
   */
  @javax.annotation.Nonnull
  public Integer getAutomatedTestPointsInProgressCount() {
    return automatedTestPointsInProgressCount;
  }

  public void setAutomatedTestPointsInProgressCount(Integer automatedTestPointsInProgressCount) {
    this.automatedTestPointsInProgressCount = automatedTestPointsInProgressCount;
  }


  public TestPlanTestPointsSearchStatusCountersApiResult automatedTestPointsFailedCount(Integer automatedTestPointsFailedCount) {
    this.automatedTestPointsFailedCount = automatedTestPointsFailedCount;
    return this;
  }

  /**
   * Get automatedTestPointsFailedCount
   * @return automatedTestPointsFailedCount
   */
  @javax.annotation.Nonnull
  public Integer getAutomatedTestPointsFailedCount() {
    return automatedTestPointsFailedCount;
  }

  public void setAutomatedTestPointsFailedCount(Integer automatedTestPointsFailedCount) {
    this.automatedTestPointsFailedCount = automatedTestPointsFailedCount;
  }


  public TestPlanTestPointsSearchStatusCountersApiResult manualTestPointsCount(Integer manualTestPointsCount) {
    this.manualTestPointsCount = manualTestPointsCount;
    return this;
  }

  /**
   * Get manualTestPointsCount
   * @return manualTestPointsCount
   */
  @javax.annotation.Nonnull
  public Integer getManualTestPointsCount() {
    return manualTestPointsCount;
  }

  public void setManualTestPointsCount(Integer manualTestPointsCount) {
    this.manualTestPointsCount = manualTestPointsCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestPlanTestPointsSearchStatusCountersApiResult testPlanTestPointsSearchStatusCountersApiResult = (TestPlanTestPointsSearchStatusCountersApiResult) o;
    return Objects.equals(this.automatedTestPointsCount, testPlanTestPointsSearchStatusCountersApiResult.automatedTestPointsCount) &&
        Objects.equals(this.automatedTestPointsInProgressCount, testPlanTestPointsSearchStatusCountersApiResult.automatedTestPointsInProgressCount) &&
        Objects.equals(this.automatedTestPointsFailedCount, testPlanTestPointsSearchStatusCountersApiResult.automatedTestPointsFailedCount) &&
        Objects.equals(this.manualTestPointsCount, testPlanTestPointsSearchStatusCountersApiResult.manualTestPointsCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(automatedTestPointsCount, automatedTestPointsInProgressCount, automatedTestPointsFailedCount, manualTestPointsCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestPlanTestPointsSearchStatusCountersApiResult {\n");
    sb.append("    automatedTestPointsCount: ").append(toIndentedString(automatedTestPointsCount)).append("\n");
    sb.append("    automatedTestPointsInProgressCount: ").append(toIndentedString(automatedTestPointsInProgressCount)).append("\n");
    sb.append("    automatedTestPointsFailedCount: ").append(toIndentedString(automatedTestPointsFailedCount)).append("\n");
    sb.append("    manualTestPointsCount: ").append(toIndentedString(manualTestPointsCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("automatedTestPointsCount");
    openapiFields.add("automatedTestPointsInProgressCount");
    openapiFields.add("automatedTestPointsFailedCount");
    openapiFields.add("manualTestPointsCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("automatedTestPointsCount");
    openapiRequiredFields.add("automatedTestPointsInProgressCount");
    openapiRequiredFields.add("automatedTestPointsFailedCount");
    openapiRequiredFields.add("manualTestPointsCount");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestPlanTestPointsSearchStatusCountersApiResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestPlanTestPointsSearchStatusCountersApiResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestPlanTestPointsSearchStatusCountersApiResult is not found in the empty JSON string", TestPlanTestPointsSearchStatusCountersApiResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestPlanTestPointsSearchStatusCountersApiResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestPlanTestPointsSearchStatusCountersApiResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TestPlanTestPointsSearchStatusCountersApiResult.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestPlanTestPointsSearchStatusCountersApiResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestPlanTestPointsSearchStatusCountersApiResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestPlanTestPointsSearchStatusCountersApiResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestPlanTestPointsSearchStatusCountersApiResult.class));

       return (TypeAdapter<T>) new TypeAdapter<TestPlanTestPointsSearchStatusCountersApiResult>() {
           @Override
           public void write(JsonWriter out, TestPlanTestPointsSearchStatusCountersApiResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestPlanTestPointsSearchStatusCountersApiResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestPlanTestPointsSearchStatusCountersApiResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestPlanTestPointsSearchStatusCountersApiResult
   * @throws IOException if the JSON string is invalid with respect to TestPlanTestPointsSearchStatusCountersApiResult
   */
  public static TestPlanTestPointsSearchStatusCountersApiResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestPlanTestPointsSearchStatusCountersApiResult.class);
  }

  /**
   * Convert an instance of TestPlanTestPointsSearchStatusCountersApiResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

