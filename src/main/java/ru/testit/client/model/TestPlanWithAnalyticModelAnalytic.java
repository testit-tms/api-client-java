/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import ru.testit.client.model.TestPlanGroupByStatus;
import ru.testit.client.model.TestPlanGroupByTestSuite;
import ru.testit.client.model.TestPlanGroupByTester;
import ru.testit.client.model.TestPlanGroupByTesterAndStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import ru.testit.client.invoker.JSON;

/**
 * TestPlanWithAnalyticModelAnalytic
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TestPlanWithAnalyticModelAnalytic {
  public static final String SERIALIZED_NAME_COUNT_GROUP_BY_STATUS = "countGroupByStatus";
  @SerializedName(SERIALIZED_NAME_COUNT_GROUP_BY_STATUS)
  private List<TestPlanGroupByStatus> countGroupByStatus = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUM_GROUP_BY_TESTER = "sumGroupByTester";
  @SerializedName(SERIALIZED_NAME_SUM_GROUP_BY_TESTER)
  private List<TestPlanGroupByTester> sumGroupByTester = new ArrayList<>();

  public static final String SERIALIZED_NAME_COUNT_GROUP_BY_TESTER = "countGroupByTester";
  @SerializedName(SERIALIZED_NAME_COUNT_GROUP_BY_TESTER)
  private List<TestPlanGroupByTester> countGroupByTester = new ArrayList<>();

  public static final String SERIALIZED_NAME_COUNT_GROUP_BY_TEST_SUITE = "countGroupByTestSuite";
  @SerializedName(SERIALIZED_NAME_COUNT_GROUP_BY_TEST_SUITE)
  private List<TestPlanGroupByTestSuite> countGroupByTestSuite = new ArrayList<>();

  public static final String SERIALIZED_NAME_COUNT_GROUP_BY_TESTER_AND_STATUS = "countGroupByTesterAndStatus";
  @SerializedName(SERIALIZED_NAME_COUNT_GROUP_BY_TESTER_AND_STATUS)
  private List<TestPlanGroupByTesterAndStatus> countGroupByTesterAndStatus = new ArrayList<>();

  public TestPlanWithAnalyticModelAnalytic() {
  }

  public TestPlanWithAnalyticModelAnalytic countGroupByStatus(List<TestPlanGroupByStatus> countGroupByStatus) {
    
    this.countGroupByStatus = countGroupByStatus;
    return this;
  }

  public TestPlanWithAnalyticModelAnalytic addCountGroupByStatusItem(TestPlanGroupByStatus countGroupByStatusItem) {
    if (this.countGroupByStatus == null) {
      this.countGroupByStatus = new ArrayList<>();
    }
    this.countGroupByStatus.add(countGroupByStatusItem);
    return this;
  }

   /**
   * Get countGroupByStatus
   * @return countGroupByStatus
  **/
  @javax.annotation.Nonnull
  public List<TestPlanGroupByStatus> getCountGroupByStatus() {
    return countGroupByStatus;
  }


  public void setCountGroupByStatus(List<TestPlanGroupByStatus> countGroupByStatus) {
    this.countGroupByStatus = countGroupByStatus;
  }


  public TestPlanWithAnalyticModelAnalytic sumGroupByTester(List<TestPlanGroupByTester> sumGroupByTester) {
    
    this.sumGroupByTester = sumGroupByTester;
    return this;
  }

  public TestPlanWithAnalyticModelAnalytic addSumGroupByTesterItem(TestPlanGroupByTester sumGroupByTesterItem) {
    if (this.sumGroupByTester == null) {
      this.sumGroupByTester = new ArrayList<>();
    }
    this.sumGroupByTester.add(sumGroupByTesterItem);
    return this;
  }

   /**
   * Get sumGroupByTester
   * @return sumGroupByTester
  **/
  @javax.annotation.Nonnull
  public List<TestPlanGroupByTester> getSumGroupByTester() {
    return sumGroupByTester;
  }


  public void setSumGroupByTester(List<TestPlanGroupByTester> sumGroupByTester) {
    this.sumGroupByTester = sumGroupByTester;
  }


  public TestPlanWithAnalyticModelAnalytic countGroupByTester(List<TestPlanGroupByTester> countGroupByTester) {
    
    this.countGroupByTester = countGroupByTester;
    return this;
  }

  public TestPlanWithAnalyticModelAnalytic addCountGroupByTesterItem(TestPlanGroupByTester countGroupByTesterItem) {
    if (this.countGroupByTester == null) {
      this.countGroupByTester = new ArrayList<>();
    }
    this.countGroupByTester.add(countGroupByTesterItem);
    return this;
  }

   /**
   * Get countGroupByTester
   * @return countGroupByTester
  **/
  @javax.annotation.Nonnull
  public List<TestPlanGroupByTester> getCountGroupByTester() {
    return countGroupByTester;
  }


  public void setCountGroupByTester(List<TestPlanGroupByTester> countGroupByTester) {
    this.countGroupByTester = countGroupByTester;
  }


  public TestPlanWithAnalyticModelAnalytic countGroupByTestSuite(List<TestPlanGroupByTestSuite> countGroupByTestSuite) {
    
    this.countGroupByTestSuite = countGroupByTestSuite;
    return this;
  }

  public TestPlanWithAnalyticModelAnalytic addCountGroupByTestSuiteItem(TestPlanGroupByTestSuite countGroupByTestSuiteItem) {
    if (this.countGroupByTestSuite == null) {
      this.countGroupByTestSuite = new ArrayList<>();
    }
    this.countGroupByTestSuite.add(countGroupByTestSuiteItem);
    return this;
  }

   /**
   * Get countGroupByTestSuite
   * @return countGroupByTestSuite
  **/
  @javax.annotation.Nonnull
  public List<TestPlanGroupByTestSuite> getCountGroupByTestSuite() {
    return countGroupByTestSuite;
  }


  public void setCountGroupByTestSuite(List<TestPlanGroupByTestSuite> countGroupByTestSuite) {
    this.countGroupByTestSuite = countGroupByTestSuite;
  }


  public TestPlanWithAnalyticModelAnalytic countGroupByTesterAndStatus(List<TestPlanGroupByTesterAndStatus> countGroupByTesterAndStatus) {
    
    this.countGroupByTesterAndStatus = countGroupByTesterAndStatus;
    return this;
  }

  public TestPlanWithAnalyticModelAnalytic addCountGroupByTesterAndStatusItem(TestPlanGroupByTesterAndStatus countGroupByTesterAndStatusItem) {
    if (this.countGroupByTesterAndStatus == null) {
      this.countGroupByTesterAndStatus = new ArrayList<>();
    }
    this.countGroupByTesterAndStatus.add(countGroupByTesterAndStatusItem);
    return this;
  }

   /**
   * Get countGroupByTesterAndStatus
   * @return countGroupByTesterAndStatus
  **/
  @javax.annotation.Nonnull
  public List<TestPlanGroupByTesterAndStatus> getCountGroupByTesterAndStatus() {
    return countGroupByTesterAndStatus;
  }


  public void setCountGroupByTesterAndStatus(List<TestPlanGroupByTesterAndStatus> countGroupByTesterAndStatus) {
    this.countGroupByTesterAndStatus = countGroupByTesterAndStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestPlanWithAnalyticModelAnalytic testPlanWithAnalyticModelAnalytic = (TestPlanWithAnalyticModelAnalytic) o;
    return Objects.equals(this.countGroupByStatus, testPlanWithAnalyticModelAnalytic.countGroupByStatus) &&
        Objects.equals(this.sumGroupByTester, testPlanWithAnalyticModelAnalytic.sumGroupByTester) &&
        Objects.equals(this.countGroupByTester, testPlanWithAnalyticModelAnalytic.countGroupByTester) &&
        Objects.equals(this.countGroupByTestSuite, testPlanWithAnalyticModelAnalytic.countGroupByTestSuite) &&
        Objects.equals(this.countGroupByTesterAndStatus, testPlanWithAnalyticModelAnalytic.countGroupByTesterAndStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countGroupByStatus, sumGroupByTester, countGroupByTester, countGroupByTestSuite, countGroupByTesterAndStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestPlanWithAnalyticModelAnalytic {\n");
    sb.append("    countGroupByStatus: ").append(toIndentedString(countGroupByStatus)).append("\n");
    sb.append("    sumGroupByTester: ").append(toIndentedString(sumGroupByTester)).append("\n");
    sb.append("    countGroupByTester: ").append(toIndentedString(countGroupByTester)).append("\n");
    sb.append("    countGroupByTestSuite: ").append(toIndentedString(countGroupByTestSuite)).append("\n");
    sb.append("    countGroupByTesterAndStatus: ").append(toIndentedString(countGroupByTesterAndStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("countGroupByStatus");
    openapiFields.add("sumGroupByTester");
    openapiFields.add("countGroupByTester");
    openapiFields.add("countGroupByTestSuite");
    openapiFields.add("countGroupByTesterAndStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("countGroupByStatus");
    openapiRequiredFields.add("sumGroupByTester");
    openapiRequiredFields.add("countGroupByTester");
    openapiRequiredFields.add("countGroupByTestSuite");
    openapiRequiredFields.add("countGroupByTesterAndStatus");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TestPlanWithAnalyticModelAnalytic
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TestPlanWithAnalyticModelAnalytic.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestPlanWithAnalyticModelAnalytic is not found in the empty JSON string", TestPlanWithAnalyticModelAnalytic.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TestPlanWithAnalyticModelAnalytic.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestPlanWithAnalyticModelAnalytic` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TestPlanWithAnalyticModelAnalytic.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("countGroupByStatus").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `countGroupByStatus` to be an array in the JSON string but got `%s`", jsonObj.get("countGroupByStatus").toString()));
      }

      JsonArray jsonArraycountGroupByStatus = jsonObj.getAsJsonArray("countGroupByStatus");
      // validate the required field `countGroupByStatus` (array)
      for (int i = 0; i < jsonArraycountGroupByStatus.size(); i++) {
        TestPlanGroupByStatus.validateJsonObject(jsonArraycountGroupByStatus.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("sumGroupByTester").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sumGroupByTester` to be an array in the JSON string but got `%s`", jsonObj.get("sumGroupByTester").toString()));
      }

      JsonArray jsonArraysumGroupByTester = jsonObj.getAsJsonArray("sumGroupByTester");
      // validate the required field `sumGroupByTester` (array)
      for (int i = 0; i < jsonArraysumGroupByTester.size(); i++) {
        TestPlanGroupByTester.validateJsonObject(jsonArraysumGroupByTester.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("countGroupByTester").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `countGroupByTester` to be an array in the JSON string but got `%s`", jsonObj.get("countGroupByTester").toString()));
      }

      JsonArray jsonArraycountGroupByTester = jsonObj.getAsJsonArray("countGroupByTester");
      // validate the required field `countGroupByTester` (array)
      for (int i = 0; i < jsonArraycountGroupByTester.size(); i++) {
        TestPlanGroupByTester.validateJsonObject(jsonArraycountGroupByTester.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("countGroupByTestSuite").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `countGroupByTestSuite` to be an array in the JSON string but got `%s`", jsonObj.get("countGroupByTestSuite").toString()));
      }

      JsonArray jsonArraycountGroupByTestSuite = jsonObj.getAsJsonArray("countGroupByTestSuite");
      // validate the required field `countGroupByTestSuite` (array)
      for (int i = 0; i < jsonArraycountGroupByTestSuite.size(); i++) {
        TestPlanGroupByTestSuite.validateJsonObject(jsonArraycountGroupByTestSuite.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("countGroupByTesterAndStatus").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `countGroupByTesterAndStatus` to be an array in the JSON string but got `%s`", jsonObj.get("countGroupByTesterAndStatus").toString()));
      }

      JsonArray jsonArraycountGroupByTesterAndStatus = jsonObj.getAsJsonArray("countGroupByTesterAndStatus");
      // validate the required field `countGroupByTesterAndStatus` (array)
      for (int i = 0; i < jsonArraycountGroupByTesterAndStatus.size(); i++) {
        TestPlanGroupByTesterAndStatus.validateJsonObject(jsonArraycountGroupByTesterAndStatus.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestPlanWithAnalyticModelAnalytic.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestPlanWithAnalyticModelAnalytic' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestPlanWithAnalyticModelAnalytic> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestPlanWithAnalyticModelAnalytic.class));

       return (TypeAdapter<T>) new TypeAdapter<TestPlanWithAnalyticModelAnalytic>() {
           @Override
           public void write(JsonWriter out, TestPlanWithAnalyticModelAnalytic value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestPlanWithAnalyticModelAnalytic read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TestPlanWithAnalyticModelAnalytic given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TestPlanWithAnalyticModelAnalytic
  * @throws IOException if the JSON string is invalid with respect to TestPlanWithAnalyticModelAnalytic
  */
  public static TestPlanWithAnalyticModelAnalytic fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestPlanWithAnalyticModelAnalytic.class);
  }

 /**
  * Convert an instance of TestPlanWithAnalyticModelAnalytic to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

