/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import ru.testit.client.model.TestPlanGroupByStatus;
import ru.testit.client.model.TestPlanGroupByStatusCode;
import ru.testit.client.model.TestPlanGroupByStatusType;
import ru.testit.client.model.TestPlanGroupByTestSuite;
import ru.testit.client.model.TestPlanGroupByTester;
import ru.testit.client.model.TestPlanGroupByTesterAndStatus;
import ru.testit.client.model.TestPlanGroupByTesterAndStatusCode;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import ru.testit.client.invoker.JSON;


/**
 * TestPointAnalyticResult
 */
@JsonPropertyOrder({
  TestPointAnalyticResult.JSON_PROPERTY_COUNT_GROUP_BY_STATUS,
  TestPointAnalyticResult.JSON_PROPERTY_SUM_GROUP_BY_TESTER,
  TestPointAnalyticResult.JSON_PROPERTY_COUNT_GROUP_BY_TESTER,
  TestPointAnalyticResult.JSON_PROPERTY_COUNT_GROUP_BY_TEST_SUITE,
  TestPointAnalyticResult.JSON_PROPERTY_COUNT_GROUP_BY_TESTER_AND_STATUS,
  TestPointAnalyticResult.JSON_PROPERTY_COUNT_GROUP_BY_STATUS_CODE,
  TestPointAnalyticResult.JSON_PROPERTY_COUNT_GROUP_BY_TESTER_AND_STATUS_CODE,
  TestPointAnalyticResult.JSON_PROPERTY_COUNT_GROUP_BY_STATUS_TYPE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0")
public class TestPointAnalyticResult {
  public static final String JSON_PROPERTY_COUNT_GROUP_BY_STATUS = "countGroupByStatus";
  @Deprecated
  private List<TestPlanGroupByStatus> countGroupByStatus = new ArrayList<>();

  public static final String JSON_PROPERTY_SUM_GROUP_BY_TESTER = "sumGroupByTester";
  private List<TestPlanGroupByTester> sumGroupByTester = new ArrayList<>();

  public static final String JSON_PROPERTY_COUNT_GROUP_BY_TESTER = "countGroupByTester";
  private List<TestPlanGroupByTester> countGroupByTester = new ArrayList<>();

  public static final String JSON_PROPERTY_COUNT_GROUP_BY_TEST_SUITE = "countGroupByTestSuite";
  private List<TestPlanGroupByTestSuite> countGroupByTestSuite = new ArrayList<>();

  public static final String JSON_PROPERTY_COUNT_GROUP_BY_TESTER_AND_STATUS = "countGroupByTesterAndStatus";
  @Deprecated
  private List<TestPlanGroupByTesterAndStatus> countGroupByTesterAndStatus = new ArrayList<>();

  public static final String JSON_PROPERTY_COUNT_GROUP_BY_STATUS_CODE = "countGroupByStatusCode";
  private List<TestPlanGroupByStatusCode> countGroupByStatusCode = new ArrayList<>();

  public static final String JSON_PROPERTY_COUNT_GROUP_BY_TESTER_AND_STATUS_CODE = "countGroupByTesterAndStatusCode";
  private List<TestPlanGroupByTesterAndStatusCode> countGroupByTesterAndStatusCode = new ArrayList<>();

  public static final String JSON_PROPERTY_COUNT_GROUP_BY_STATUS_TYPE = "countGroupByStatusType";
  private List<TestPlanGroupByStatusType> countGroupByStatusType = new ArrayList<>();

  public TestPointAnalyticResult() { 
  }

  @Deprecated
  public TestPointAnalyticResult countGroupByStatus(List<TestPlanGroupByStatus> countGroupByStatus) {
    this.countGroupByStatus = countGroupByStatus;
    return this;
  }

  public TestPointAnalyticResult addCountGroupByStatusItem(TestPlanGroupByStatus countGroupByStatusItem) {
    if (this.countGroupByStatus == null) {
      this.countGroupByStatus = new ArrayList<>();
    }
    this.countGroupByStatus.add(countGroupByStatusItem);
    return this;
  }

  /**
   * Get countGroupByStatus
   * @return countGroupByStatus
   * @deprecated
   */
  @Deprecated
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COUNT_GROUP_BY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<TestPlanGroupByStatus> getCountGroupByStatus() {
    return countGroupByStatus;
  }


  @Deprecated
  @JsonProperty(JSON_PROPERTY_COUNT_GROUP_BY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCountGroupByStatus(List<TestPlanGroupByStatus> countGroupByStatus) {
    this.countGroupByStatus = countGroupByStatus;
  }


  public TestPointAnalyticResult sumGroupByTester(List<TestPlanGroupByTester> sumGroupByTester) {
    this.sumGroupByTester = sumGroupByTester;
    return this;
  }

  public TestPointAnalyticResult addSumGroupByTesterItem(TestPlanGroupByTester sumGroupByTesterItem) {
    if (this.sumGroupByTester == null) {
      this.sumGroupByTester = new ArrayList<>();
    }
    this.sumGroupByTester.add(sumGroupByTesterItem);
    return this;
  }

  /**
   * Get sumGroupByTester
   * @return sumGroupByTester
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SUM_GROUP_BY_TESTER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<TestPlanGroupByTester> getSumGroupByTester() {
    return sumGroupByTester;
  }


  @JsonProperty(JSON_PROPERTY_SUM_GROUP_BY_TESTER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSumGroupByTester(List<TestPlanGroupByTester> sumGroupByTester) {
    this.sumGroupByTester = sumGroupByTester;
  }


  public TestPointAnalyticResult countGroupByTester(List<TestPlanGroupByTester> countGroupByTester) {
    this.countGroupByTester = countGroupByTester;
    return this;
  }

  public TestPointAnalyticResult addCountGroupByTesterItem(TestPlanGroupByTester countGroupByTesterItem) {
    if (this.countGroupByTester == null) {
      this.countGroupByTester = new ArrayList<>();
    }
    this.countGroupByTester.add(countGroupByTesterItem);
    return this;
  }

  /**
   * Get countGroupByTester
   * @return countGroupByTester
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COUNT_GROUP_BY_TESTER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<TestPlanGroupByTester> getCountGroupByTester() {
    return countGroupByTester;
  }


  @JsonProperty(JSON_PROPERTY_COUNT_GROUP_BY_TESTER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCountGroupByTester(List<TestPlanGroupByTester> countGroupByTester) {
    this.countGroupByTester = countGroupByTester;
  }


  public TestPointAnalyticResult countGroupByTestSuite(List<TestPlanGroupByTestSuite> countGroupByTestSuite) {
    this.countGroupByTestSuite = countGroupByTestSuite;
    return this;
  }

  public TestPointAnalyticResult addCountGroupByTestSuiteItem(TestPlanGroupByTestSuite countGroupByTestSuiteItem) {
    if (this.countGroupByTestSuite == null) {
      this.countGroupByTestSuite = new ArrayList<>();
    }
    this.countGroupByTestSuite.add(countGroupByTestSuiteItem);
    return this;
  }

  /**
   * Get countGroupByTestSuite
   * @return countGroupByTestSuite
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COUNT_GROUP_BY_TEST_SUITE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<TestPlanGroupByTestSuite> getCountGroupByTestSuite() {
    return countGroupByTestSuite;
  }


  @JsonProperty(JSON_PROPERTY_COUNT_GROUP_BY_TEST_SUITE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCountGroupByTestSuite(List<TestPlanGroupByTestSuite> countGroupByTestSuite) {
    this.countGroupByTestSuite = countGroupByTestSuite;
  }


  @Deprecated
  public TestPointAnalyticResult countGroupByTesterAndStatus(List<TestPlanGroupByTesterAndStatus> countGroupByTesterAndStatus) {
    this.countGroupByTesterAndStatus = countGroupByTesterAndStatus;
    return this;
  }

  public TestPointAnalyticResult addCountGroupByTesterAndStatusItem(TestPlanGroupByTesterAndStatus countGroupByTesterAndStatusItem) {
    if (this.countGroupByTesterAndStatus == null) {
      this.countGroupByTesterAndStatus = new ArrayList<>();
    }
    this.countGroupByTesterAndStatus.add(countGroupByTesterAndStatusItem);
    return this;
  }

  /**
   * Get countGroupByTesterAndStatus
   * @return countGroupByTesterAndStatus
   * @deprecated
   */
  @Deprecated
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COUNT_GROUP_BY_TESTER_AND_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<TestPlanGroupByTesterAndStatus> getCountGroupByTesterAndStatus() {
    return countGroupByTesterAndStatus;
  }


  @Deprecated
  @JsonProperty(JSON_PROPERTY_COUNT_GROUP_BY_TESTER_AND_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCountGroupByTesterAndStatus(List<TestPlanGroupByTesterAndStatus> countGroupByTesterAndStatus) {
    this.countGroupByTesterAndStatus = countGroupByTesterAndStatus;
  }


  public TestPointAnalyticResult countGroupByStatusCode(List<TestPlanGroupByStatusCode> countGroupByStatusCode) {
    this.countGroupByStatusCode = countGroupByStatusCode;
    return this;
  }

  public TestPointAnalyticResult addCountGroupByStatusCodeItem(TestPlanGroupByStatusCode countGroupByStatusCodeItem) {
    if (this.countGroupByStatusCode == null) {
      this.countGroupByStatusCode = new ArrayList<>();
    }
    this.countGroupByStatusCode.add(countGroupByStatusCodeItem);
    return this;
  }

  /**
   * Get countGroupByStatusCode
   * @return countGroupByStatusCode
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COUNT_GROUP_BY_STATUS_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<TestPlanGroupByStatusCode> getCountGroupByStatusCode() {
    return countGroupByStatusCode;
  }


  @JsonProperty(JSON_PROPERTY_COUNT_GROUP_BY_STATUS_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCountGroupByStatusCode(List<TestPlanGroupByStatusCode> countGroupByStatusCode) {
    this.countGroupByStatusCode = countGroupByStatusCode;
  }


  public TestPointAnalyticResult countGroupByTesterAndStatusCode(List<TestPlanGroupByTesterAndStatusCode> countGroupByTesterAndStatusCode) {
    this.countGroupByTesterAndStatusCode = countGroupByTesterAndStatusCode;
    return this;
  }

  public TestPointAnalyticResult addCountGroupByTesterAndStatusCodeItem(TestPlanGroupByTesterAndStatusCode countGroupByTesterAndStatusCodeItem) {
    if (this.countGroupByTesterAndStatusCode == null) {
      this.countGroupByTesterAndStatusCode = new ArrayList<>();
    }
    this.countGroupByTesterAndStatusCode.add(countGroupByTesterAndStatusCodeItem);
    return this;
  }

  /**
   * Get countGroupByTesterAndStatusCode
   * @return countGroupByTesterAndStatusCode
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COUNT_GROUP_BY_TESTER_AND_STATUS_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<TestPlanGroupByTesterAndStatusCode> getCountGroupByTesterAndStatusCode() {
    return countGroupByTesterAndStatusCode;
  }


  @JsonProperty(JSON_PROPERTY_COUNT_GROUP_BY_TESTER_AND_STATUS_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCountGroupByTesterAndStatusCode(List<TestPlanGroupByTesterAndStatusCode> countGroupByTesterAndStatusCode) {
    this.countGroupByTesterAndStatusCode = countGroupByTesterAndStatusCode;
  }


  public TestPointAnalyticResult countGroupByStatusType(List<TestPlanGroupByStatusType> countGroupByStatusType) {
    this.countGroupByStatusType = countGroupByStatusType;
    return this;
  }

  public TestPointAnalyticResult addCountGroupByStatusTypeItem(TestPlanGroupByStatusType countGroupByStatusTypeItem) {
    if (this.countGroupByStatusType == null) {
      this.countGroupByStatusType = new ArrayList<>();
    }
    this.countGroupByStatusType.add(countGroupByStatusTypeItem);
    return this;
  }

  /**
   * Get countGroupByStatusType
   * @return countGroupByStatusType
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COUNT_GROUP_BY_STATUS_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<TestPlanGroupByStatusType> getCountGroupByStatusType() {
    return countGroupByStatusType;
  }


  @JsonProperty(JSON_PROPERTY_COUNT_GROUP_BY_STATUS_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCountGroupByStatusType(List<TestPlanGroupByStatusType> countGroupByStatusType) {
    this.countGroupByStatusType = countGroupByStatusType;
  }


  /**
   * Return true if this TestPointAnalyticResult object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestPointAnalyticResult testPointAnalyticResult = (TestPointAnalyticResult) o;
    return Objects.equals(this.countGroupByStatus, testPointAnalyticResult.countGroupByStatus) &&
        Objects.equals(this.sumGroupByTester, testPointAnalyticResult.sumGroupByTester) &&
        Objects.equals(this.countGroupByTester, testPointAnalyticResult.countGroupByTester) &&
        Objects.equals(this.countGroupByTestSuite, testPointAnalyticResult.countGroupByTestSuite) &&
        Objects.equals(this.countGroupByTesterAndStatus, testPointAnalyticResult.countGroupByTesterAndStatus) &&
        Objects.equals(this.countGroupByStatusCode, testPointAnalyticResult.countGroupByStatusCode) &&
        Objects.equals(this.countGroupByTesterAndStatusCode, testPointAnalyticResult.countGroupByTesterAndStatusCode) &&
        Objects.equals(this.countGroupByStatusType, testPointAnalyticResult.countGroupByStatusType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countGroupByStatus, sumGroupByTester, countGroupByTester, countGroupByTestSuite, countGroupByTesterAndStatus, countGroupByStatusCode, countGroupByTesterAndStatusCode, countGroupByStatusType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestPointAnalyticResult {\n");
    sb.append("    countGroupByStatus: ").append(toIndentedString(countGroupByStatus)).append("\n");
    sb.append("    sumGroupByTester: ").append(toIndentedString(sumGroupByTester)).append("\n");
    sb.append("    countGroupByTester: ").append(toIndentedString(countGroupByTester)).append("\n");
    sb.append("    countGroupByTestSuite: ").append(toIndentedString(countGroupByTestSuite)).append("\n");
    sb.append("    countGroupByTesterAndStatus: ").append(toIndentedString(countGroupByTesterAndStatus)).append("\n");
    sb.append("    countGroupByStatusCode: ").append(toIndentedString(countGroupByStatusCode)).append("\n");
    sb.append("    countGroupByTesterAndStatusCode: ").append(toIndentedString(countGroupByTesterAndStatusCode)).append("\n");
    sb.append("    countGroupByStatusType: ").append(toIndentedString(countGroupByStatusType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

