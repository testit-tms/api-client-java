/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import ru.testit.client.model.DateTimeRangeSelectorModel;
import ru.testit.client.model.Int64RangeSelectorModel;
import ru.testit.client.model.TestPointStatus;
import ru.testit.client.model.WorkItemPriorityModel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import ru.testit.client.invoker.JSON;

/**
 * TestPointFilterModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class TestPointFilterModel {
  public static final String SERIALIZED_NAME_TEST_PLAN_IDS = "testPlanIds";
  @SerializedName(SERIALIZED_NAME_TEST_PLAN_IDS)
  @javax.annotation.Nullable
  private List<UUID> testPlanIds;

  public static final String SERIALIZED_NAME_TEST_SUITE_IDS = "testSuiteIds";
  @SerializedName(SERIALIZED_NAME_TEST_SUITE_IDS)
  @javax.annotation.Nullable
  private List<UUID> testSuiteIds;

  public static final String SERIALIZED_NAME_WORK_ITEM_GLOBAL_IDS = "workItemGlobalIds";
  @SerializedName(SERIALIZED_NAME_WORK_ITEM_GLOBAL_IDS)
  @javax.annotation.Nullable
  private List<Long> workItemGlobalIds;

  public static final String SERIALIZED_NAME_WORK_ITEM_MEDIAN_DURATION = "workItemMedianDuration";
  @SerializedName(SERIALIZED_NAME_WORK_ITEM_MEDIAN_DURATION)
  @javax.annotation.Nullable
  private Int64RangeSelectorModel workItemMedianDuration;

  public static final String SERIALIZED_NAME_WORK_ITEM_IS_DELETED = "workItemIsDeleted";
  @SerializedName(SERIALIZED_NAME_WORK_ITEM_IS_DELETED)
  @javax.annotation.Nullable
  private Boolean workItemIsDeleted;

  public static final String SERIALIZED_NAME_STATUSES = "statuses";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_STATUSES)
  @javax.annotation.Nullable
  private List<TestPointStatus> statuses;

  public static final String SERIALIZED_NAME_STATUS_CODES = "statusCodes";
  @SerializedName(SERIALIZED_NAME_STATUS_CODES)
  @javax.annotation.Nullable
  private List<String> statusCodes;

  public static final String SERIALIZED_NAME_PRIORITIES = "priorities";
  @SerializedName(SERIALIZED_NAME_PRIORITIES)
  @javax.annotation.Nullable
  private List<WorkItemPriorityModel> priorities;

  public static final String SERIALIZED_NAME_IS_AUTOMATED = "isAutomated";
  @SerializedName(SERIALIZED_NAME_IS_AUTOMATED)
  @javax.annotation.Nullable
  private Boolean isAutomated;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_CONFIGURATION_IDS = "configurationIds";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_IDS)
  @javax.annotation.Nullable
  private List<UUID> configurationIds;

  public static final String SERIALIZED_NAME_TESTER_IDS = "testerIds";
  @SerializedName(SERIALIZED_NAME_TESTER_IDS)
  @javax.annotation.Nullable
  private List<UUID> testerIds;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  @javax.annotation.Nullable
  private Int64RangeSelectorModel duration;

  public static final String SERIALIZED_NAME_SECTION_IDS = "sectionIds";
  @SerializedName(SERIALIZED_NAME_SECTION_IDS)
  @javax.annotation.Nullable
  private List<UUID> sectionIds;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  @javax.annotation.Nullable
  private DateTimeRangeSelectorModel createdDate;

  public static final String SERIALIZED_NAME_CREATED_BY_IDS = "createdByIds";
  @SerializedName(SERIALIZED_NAME_CREATED_BY_IDS)
  @javax.annotation.Nullable
  private List<UUID> createdByIds;

  public static final String SERIALIZED_NAME_MODIFIED_DATE = "modifiedDate";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE)
  @javax.annotation.Nullable
  private DateTimeRangeSelectorModel modifiedDate;

  public static final String SERIALIZED_NAME_MODIFIED_BY_IDS = "modifiedByIds";
  @SerializedName(SERIALIZED_NAME_MODIFIED_BY_IDS)
  @javax.annotation.Nullable
  private List<UUID> modifiedByIds;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private List<String> tags;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  @javax.annotation.Nullable
  private Map<String, Set<String>> attributes;

  public static final String SERIALIZED_NAME_WORK_ITEM_CREATED_DATE = "workItemCreatedDate";
  @SerializedName(SERIALIZED_NAME_WORK_ITEM_CREATED_DATE)
  @javax.annotation.Nullable
  private DateTimeRangeSelectorModel workItemCreatedDate;

  public static final String SERIALIZED_NAME_WORK_ITEM_CREATED_BY_IDS = "workItemCreatedByIds";
  @SerializedName(SERIALIZED_NAME_WORK_ITEM_CREATED_BY_IDS)
  @javax.annotation.Nullable
  private List<UUID> workItemCreatedByIds;

  public static final String SERIALIZED_NAME_WORK_ITEM_MODIFIED_DATE = "workItemModifiedDate";
  @SerializedName(SERIALIZED_NAME_WORK_ITEM_MODIFIED_DATE)
  @javax.annotation.Nullable
  private DateTimeRangeSelectorModel workItemModifiedDate;

  public static final String SERIALIZED_NAME_WORK_ITEM_MODIFIED_BY_IDS = "workItemModifiedByIds";
  @SerializedName(SERIALIZED_NAME_WORK_ITEM_MODIFIED_BY_IDS)
  @javax.annotation.Nullable
  private List<UUID> workItemModifiedByIds;

  public TestPointFilterModel() {
  }

  public TestPointFilterModel testPlanIds(@javax.annotation.Nullable List<UUID> testPlanIds) {
    this.testPlanIds = testPlanIds;
    return this;
  }

  public TestPointFilterModel addTestPlanIdsItem(UUID testPlanIdsItem) {
    if (this.testPlanIds == null) {
      this.testPlanIds = new ArrayList<>();
    }
    this.testPlanIds.add(testPlanIdsItem);
    return this;
  }

  /**
   * Specifies a test point test plan IDS to search for
   * @return testPlanIds
   */
  @javax.annotation.Nullable
  public List<UUID> getTestPlanIds() {
    return testPlanIds;
  }

  public void setTestPlanIds(@javax.annotation.Nullable List<UUID> testPlanIds) {
    this.testPlanIds = testPlanIds;
  }


  public TestPointFilterModel testSuiteIds(@javax.annotation.Nullable List<UUID> testSuiteIds) {
    this.testSuiteIds = testSuiteIds;
    return this;
  }

  public TestPointFilterModel addTestSuiteIdsItem(UUID testSuiteIdsItem) {
    if (this.testSuiteIds == null) {
      this.testSuiteIds = new ArrayList<>();
    }
    this.testSuiteIds.add(testSuiteIdsItem);
    return this;
  }

  /**
   * Specifies a test point test suite IDs to search for
   * @return testSuiteIds
   */
  @javax.annotation.Nullable
  public List<UUID> getTestSuiteIds() {
    return testSuiteIds;
  }

  public void setTestSuiteIds(@javax.annotation.Nullable List<UUID> testSuiteIds) {
    this.testSuiteIds = testSuiteIds;
  }


  public TestPointFilterModel workItemGlobalIds(@javax.annotation.Nullable List<Long> workItemGlobalIds) {
    this.workItemGlobalIds = workItemGlobalIds;
    return this;
  }

  public TestPointFilterModel addWorkItemGlobalIdsItem(Long workItemGlobalIdsItem) {
    if (this.workItemGlobalIds == null) {
      this.workItemGlobalIds = new ArrayList<>();
    }
    this.workItemGlobalIds.add(workItemGlobalIdsItem);
    return this;
  }

  /**
   * Specifies a test point work item global IDs to search for
   * @return workItemGlobalIds
   */
  @javax.annotation.Nullable
  public List<Long> getWorkItemGlobalIds() {
    return workItemGlobalIds;
  }

  public void setWorkItemGlobalIds(@javax.annotation.Nullable List<Long> workItemGlobalIds) {
    this.workItemGlobalIds = workItemGlobalIds;
  }


  public TestPointFilterModel workItemMedianDuration(@javax.annotation.Nullable Int64RangeSelectorModel workItemMedianDuration) {
    this.workItemMedianDuration = workItemMedianDuration;
    return this;
  }

  /**
   * Specifies a test point work item median duration range to search for
   * @return workItemMedianDuration
   */
  @javax.annotation.Nullable
  public Int64RangeSelectorModel getWorkItemMedianDuration() {
    return workItemMedianDuration;
  }

  public void setWorkItemMedianDuration(@javax.annotation.Nullable Int64RangeSelectorModel workItemMedianDuration) {
    this.workItemMedianDuration = workItemMedianDuration;
  }


  public TestPointFilterModel workItemIsDeleted(@javax.annotation.Nullable Boolean workItemIsDeleted) {
    this.workItemIsDeleted = workItemIsDeleted;
    return this;
  }

  /**
   * Specifies a test point work item is deleted flag to search for
   * @return workItemIsDeleted
   */
  @javax.annotation.Nullable
  public Boolean getWorkItemIsDeleted() {
    return workItemIsDeleted;
  }

  public void setWorkItemIsDeleted(@javax.annotation.Nullable Boolean workItemIsDeleted) {
    this.workItemIsDeleted = workItemIsDeleted;
  }


  @Deprecated
  public TestPointFilterModel statuses(@javax.annotation.Nullable List<TestPointStatus> statuses) {
    this.statuses = statuses;
    return this;
  }

  public TestPointFilterModel addStatusesItem(TestPointStatus statusesItem) {
    if (this.statuses == null) {
      this.statuses = new ArrayList<>();
    }
    this.statuses.add(statusesItem);
    return this;
  }

  /**
   * Specifies a test point statuses to search for
   * @return statuses
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<TestPointStatus> getStatuses() {
    return statuses;
  }

  @Deprecated
  public void setStatuses(@javax.annotation.Nullable List<TestPointStatus> statuses) {
    this.statuses = statuses;
  }


  public TestPointFilterModel statusCodes(@javax.annotation.Nullable List<String> statusCodes) {
    this.statusCodes = statusCodes;
    return this;
  }

  public TestPointFilterModel addStatusCodesItem(String statusCodesItem) {
    if (this.statusCodes == null) {
      this.statusCodes = new ArrayList<>();
    }
    this.statusCodes.add(statusCodesItem);
    return this;
  }

  /**
   * Specifies a test point status codes to search for
   * @return statusCodes
   */
  @javax.annotation.Nullable
  public List<String> getStatusCodes() {
    return statusCodes;
  }

  public void setStatusCodes(@javax.annotation.Nullable List<String> statusCodes) {
    this.statusCodes = statusCodes;
  }


  public TestPointFilterModel priorities(@javax.annotation.Nullable List<WorkItemPriorityModel> priorities) {
    this.priorities = priorities;
    return this;
  }

  public TestPointFilterModel addPrioritiesItem(WorkItemPriorityModel prioritiesItem) {
    if (this.priorities == null) {
      this.priorities = new ArrayList<>();
    }
    this.priorities.add(prioritiesItem);
    return this;
  }

  /**
   * Specifies a test point priorities to search for
   * @return priorities
   */
  @javax.annotation.Nullable
  public List<WorkItemPriorityModel> getPriorities() {
    return priorities;
  }

  public void setPriorities(@javax.annotation.Nullable List<WorkItemPriorityModel> priorities) {
    this.priorities = priorities;
  }


  public TestPointFilterModel isAutomated(@javax.annotation.Nullable Boolean isAutomated) {
    this.isAutomated = isAutomated;
    return this;
  }

  /**
   * Specifies a test point automation status to search for
   * @return isAutomated
   */
  @javax.annotation.Nullable
  public Boolean getIsAutomated() {
    return isAutomated;
  }

  public void setIsAutomated(@javax.annotation.Nullable Boolean isAutomated) {
    this.isAutomated = isAutomated;
  }


  public TestPointFilterModel name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Specifies a test point name to search for
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public TestPointFilterModel configurationIds(@javax.annotation.Nullable List<UUID> configurationIds) {
    this.configurationIds = configurationIds;
    return this;
  }

  public TestPointFilterModel addConfigurationIdsItem(UUID configurationIdsItem) {
    if (this.configurationIds == null) {
      this.configurationIds = new ArrayList<>();
    }
    this.configurationIds.add(configurationIdsItem);
    return this;
  }

  /**
   * Specifies a test point configuration IDs to search for
   * @return configurationIds
   */
  @javax.annotation.Nullable
  public List<UUID> getConfigurationIds() {
    return configurationIds;
  }

  public void setConfigurationIds(@javax.annotation.Nullable List<UUID> configurationIds) {
    this.configurationIds = configurationIds;
  }


  public TestPointFilterModel testerIds(@javax.annotation.Nullable List<UUID> testerIds) {
    this.testerIds = testerIds;
    return this;
  }

  public TestPointFilterModel addTesterIdsItem(UUID testerIdsItem) {
    if (this.testerIds == null) {
      this.testerIds = new ArrayList<>();
    }
    this.testerIds.add(testerIdsItem);
    return this;
  }

  /**
   * Specifies a test point assigned user IDs to search for
   * @return testerIds
   */
  @javax.annotation.Nullable
  public List<UUID> getTesterIds() {
    return testerIds;
  }

  public void setTesterIds(@javax.annotation.Nullable List<UUID> testerIds) {
    this.testerIds = testerIds;
  }


  public TestPointFilterModel duration(@javax.annotation.Nullable Int64RangeSelectorModel duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Specifies a test point range of duration to search for
   * @return duration
   */
  @javax.annotation.Nullable
  public Int64RangeSelectorModel getDuration() {
    return duration;
  }

  public void setDuration(@javax.annotation.Nullable Int64RangeSelectorModel duration) {
    this.duration = duration;
  }


  public TestPointFilterModel sectionIds(@javax.annotation.Nullable List<UUID> sectionIds) {
    this.sectionIds = sectionIds;
    return this;
  }

  public TestPointFilterModel addSectionIdsItem(UUID sectionIdsItem) {
    if (this.sectionIds == null) {
      this.sectionIds = new ArrayList<>();
    }
    this.sectionIds.add(sectionIdsItem);
    return this;
  }

  /**
   * Specifies a test point work item section IDs to search for
   * @return sectionIds
   */
  @javax.annotation.Nullable
  public List<UUID> getSectionIds() {
    return sectionIds;
  }

  public void setSectionIds(@javax.annotation.Nullable List<UUID> sectionIds) {
    this.sectionIds = sectionIds;
  }


  public TestPointFilterModel createdDate(@javax.annotation.Nullable DateTimeRangeSelectorModel createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Specifies a test point range of creation date to search for
   * @return createdDate
   */
  @javax.annotation.Nullable
  public DateTimeRangeSelectorModel getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(@javax.annotation.Nullable DateTimeRangeSelectorModel createdDate) {
    this.createdDate = createdDate;
  }


  public TestPointFilterModel createdByIds(@javax.annotation.Nullable List<UUID> createdByIds) {
    this.createdByIds = createdByIds;
    return this;
  }

  public TestPointFilterModel addCreatedByIdsItem(UUID createdByIdsItem) {
    if (this.createdByIds == null) {
      this.createdByIds = new ArrayList<>();
    }
    this.createdByIds.add(createdByIdsItem);
    return this;
  }

  /**
   * Specifies a test point creator IDs to search for
   * @return createdByIds
   */
  @javax.annotation.Nullable
  public List<UUID> getCreatedByIds() {
    return createdByIds;
  }

  public void setCreatedByIds(@javax.annotation.Nullable List<UUID> createdByIds) {
    this.createdByIds = createdByIds;
  }


  public TestPointFilterModel modifiedDate(@javax.annotation.Nullable DateTimeRangeSelectorModel modifiedDate) {
    this.modifiedDate = modifiedDate;
    return this;
  }

  /**
   * Specifies a test point range of last modification date to search for
   * @return modifiedDate
   */
  @javax.annotation.Nullable
  public DateTimeRangeSelectorModel getModifiedDate() {
    return modifiedDate;
  }

  public void setModifiedDate(@javax.annotation.Nullable DateTimeRangeSelectorModel modifiedDate) {
    this.modifiedDate = modifiedDate;
  }


  public TestPointFilterModel modifiedByIds(@javax.annotation.Nullable List<UUID> modifiedByIds) {
    this.modifiedByIds = modifiedByIds;
    return this;
  }

  public TestPointFilterModel addModifiedByIdsItem(UUID modifiedByIdsItem) {
    if (this.modifiedByIds == null) {
      this.modifiedByIds = new ArrayList<>();
    }
    this.modifiedByIds.add(modifiedByIdsItem);
    return this;
  }

  /**
   * Specifies a test point last editor IDs to search for
   * @return modifiedByIds
   */
  @javax.annotation.Nullable
  public List<UUID> getModifiedByIds() {
    return modifiedByIds;
  }

  public void setModifiedByIds(@javax.annotation.Nullable List<UUID> modifiedByIds) {
    this.modifiedByIds = modifiedByIds;
  }


  public TestPointFilterModel tags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
    return this;
  }

  public TestPointFilterModel addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Specifies a test point tags to search for
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
  }


  public TestPointFilterModel attributes(@javax.annotation.Nullable Map<String, Set<String>> attributes) {
    this.attributes = attributes;
    return this;
  }

  public TestPointFilterModel putAttributesItem(String key, Set<String> attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

  /**
   * Specifies a test point attributes to search for
   * @return attributes
   */
  @javax.annotation.Nullable
  public Map<String, Set<String>> getAttributes() {
    return attributes;
  }

  public void setAttributes(@javax.annotation.Nullable Map<String, Set<String>> attributes) {
    this.attributes = attributes;
  }


  public TestPointFilterModel workItemCreatedDate(@javax.annotation.Nullable DateTimeRangeSelectorModel workItemCreatedDate) {
    this.workItemCreatedDate = workItemCreatedDate;
    return this;
  }

  /**
   * Specifies a work item range of creation date to search for
   * @return workItemCreatedDate
   */
  @javax.annotation.Nullable
  public DateTimeRangeSelectorModel getWorkItemCreatedDate() {
    return workItemCreatedDate;
  }

  public void setWorkItemCreatedDate(@javax.annotation.Nullable DateTimeRangeSelectorModel workItemCreatedDate) {
    this.workItemCreatedDate = workItemCreatedDate;
  }


  public TestPointFilterModel workItemCreatedByIds(@javax.annotation.Nullable List<UUID> workItemCreatedByIds) {
    this.workItemCreatedByIds = workItemCreatedByIds;
    return this;
  }

  public TestPointFilterModel addWorkItemCreatedByIdsItem(UUID workItemCreatedByIdsItem) {
    if (this.workItemCreatedByIds == null) {
      this.workItemCreatedByIds = new ArrayList<>();
    }
    this.workItemCreatedByIds.add(workItemCreatedByIdsItem);
    return this;
  }

  /**
   * Specifies a work item creator IDs to search for
   * @return workItemCreatedByIds
   */
  @javax.annotation.Nullable
  public List<UUID> getWorkItemCreatedByIds() {
    return workItemCreatedByIds;
  }

  public void setWorkItemCreatedByIds(@javax.annotation.Nullable List<UUID> workItemCreatedByIds) {
    this.workItemCreatedByIds = workItemCreatedByIds;
  }


  public TestPointFilterModel workItemModifiedDate(@javax.annotation.Nullable DateTimeRangeSelectorModel workItemModifiedDate) {
    this.workItemModifiedDate = workItemModifiedDate;
    return this;
  }

  /**
   * Specifies a work item range of last modification date to search for
   * @return workItemModifiedDate
   */
  @javax.annotation.Nullable
  public DateTimeRangeSelectorModel getWorkItemModifiedDate() {
    return workItemModifiedDate;
  }

  public void setWorkItemModifiedDate(@javax.annotation.Nullable DateTimeRangeSelectorModel workItemModifiedDate) {
    this.workItemModifiedDate = workItemModifiedDate;
  }


  public TestPointFilterModel workItemModifiedByIds(@javax.annotation.Nullable List<UUID> workItemModifiedByIds) {
    this.workItemModifiedByIds = workItemModifiedByIds;
    return this;
  }

  public TestPointFilterModel addWorkItemModifiedByIdsItem(UUID workItemModifiedByIdsItem) {
    if (this.workItemModifiedByIds == null) {
      this.workItemModifiedByIds = new ArrayList<>();
    }
    this.workItemModifiedByIds.add(workItemModifiedByIdsItem);
    return this;
  }

  /**
   * Specifies a work item last editor IDs to search for
   * @return workItemModifiedByIds
   */
  @javax.annotation.Nullable
  public List<UUID> getWorkItemModifiedByIds() {
    return workItemModifiedByIds;
  }

  public void setWorkItemModifiedByIds(@javax.annotation.Nullable List<UUID> workItemModifiedByIds) {
    this.workItemModifiedByIds = workItemModifiedByIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestPointFilterModel testPointFilterModel = (TestPointFilterModel) o;
    return Objects.equals(this.testPlanIds, testPointFilterModel.testPlanIds) &&
        Objects.equals(this.testSuiteIds, testPointFilterModel.testSuiteIds) &&
        Objects.equals(this.workItemGlobalIds, testPointFilterModel.workItemGlobalIds) &&
        Objects.equals(this.workItemMedianDuration, testPointFilterModel.workItemMedianDuration) &&
        Objects.equals(this.workItemIsDeleted, testPointFilterModel.workItemIsDeleted) &&
        Objects.equals(this.statuses, testPointFilterModel.statuses) &&
        Objects.equals(this.statusCodes, testPointFilterModel.statusCodes) &&
        Objects.equals(this.priorities, testPointFilterModel.priorities) &&
        Objects.equals(this.isAutomated, testPointFilterModel.isAutomated) &&
        Objects.equals(this.name, testPointFilterModel.name) &&
        Objects.equals(this.configurationIds, testPointFilterModel.configurationIds) &&
        Objects.equals(this.testerIds, testPointFilterModel.testerIds) &&
        Objects.equals(this.duration, testPointFilterModel.duration) &&
        Objects.equals(this.sectionIds, testPointFilterModel.sectionIds) &&
        Objects.equals(this.createdDate, testPointFilterModel.createdDate) &&
        Objects.equals(this.createdByIds, testPointFilterModel.createdByIds) &&
        Objects.equals(this.modifiedDate, testPointFilterModel.modifiedDate) &&
        Objects.equals(this.modifiedByIds, testPointFilterModel.modifiedByIds) &&
        Objects.equals(this.tags, testPointFilterModel.tags) &&
        Objects.equals(this.attributes, testPointFilterModel.attributes) &&
        Objects.equals(this.workItemCreatedDate, testPointFilterModel.workItemCreatedDate) &&
        Objects.equals(this.workItemCreatedByIds, testPointFilterModel.workItemCreatedByIds) &&
        Objects.equals(this.workItemModifiedDate, testPointFilterModel.workItemModifiedDate) &&
        Objects.equals(this.workItemModifiedByIds, testPointFilterModel.workItemModifiedByIds);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(testPlanIds, testSuiteIds, workItemGlobalIds, workItemMedianDuration, workItemIsDeleted, statuses, statusCodes, priorities, isAutomated, name, configurationIds, testerIds, duration, sectionIds, createdDate, createdByIds, modifiedDate, modifiedByIds, tags, attributes, workItemCreatedDate, workItemCreatedByIds, workItemModifiedDate, workItemModifiedByIds);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestPointFilterModel {\n");
    sb.append("    testPlanIds: ").append(toIndentedString(testPlanIds)).append("\n");
    sb.append("    testSuiteIds: ").append(toIndentedString(testSuiteIds)).append("\n");
    sb.append("    workItemGlobalIds: ").append(toIndentedString(workItemGlobalIds)).append("\n");
    sb.append("    workItemMedianDuration: ").append(toIndentedString(workItemMedianDuration)).append("\n");
    sb.append("    workItemIsDeleted: ").append(toIndentedString(workItemIsDeleted)).append("\n");
    sb.append("    statuses: ").append(toIndentedString(statuses)).append("\n");
    sb.append("    statusCodes: ").append(toIndentedString(statusCodes)).append("\n");
    sb.append("    priorities: ").append(toIndentedString(priorities)).append("\n");
    sb.append("    isAutomated: ").append(toIndentedString(isAutomated)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    configurationIds: ").append(toIndentedString(configurationIds)).append("\n");
    sb.append("    testerIds: ").append(toIndentedString(testerIds)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    sectionIds: ").append(toIndentedString(sectionIds)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    createdByIds: ").append(toIndentedString(createdByIds)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("    modifiedByIds: ").append(toIndentedString(modifiedByIds)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    workItemCreatedDate: ").append(toIndentedString(workItemCreatedDate)).append("\n");
    sb.append("    workItemCreatedByIds: ").append(toIndentedString(workItemCreatedByIds)).append("\n");
    sb.append("    workItemModifiedDate: ").append(toIndentedString(workItemModifiedDate)).append("\n");
    sb.append("    workItemModifiedByIds: ").append(toIndentedString(workItemModifiedByIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("testPlanIds");
    openapiFields.add("testSuiteIds");
    openapiFields.add("workItemGlobalIds");
    openapiFields.add("workItemMedianDuration");
    openapiFields.add("workItemIsDeleted");
    openapiFields.add("statuses");
    openapiFields.add("statusCodes");
    openapiFields.add("priorities");
    openapiFields.add("isAutomated");
    openapiFields.add("name");
    openapiFields.add("configurationIds");
    openapiFields.add("testerIds");
    openapiFields.add("duration");
    openapiFields.add("sectionIds");
    openapiFields.add("createdDate");
    openapiFields.add("createdByIds");
    openapiFields.add("modifiedDate");
    openapiFields.add("modifiedByIds");
    openapiFields.add("tags");
    openapiFields.add("attributes");
    openapiFields.add("workItemCreatedDate");
    openapiFields.add("workItemCreatedByIds");
    openapiFields.add("workItemModifiedDate");
    openapiFields.add("workItemModifiedByIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestPointFilterModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestPointFilterModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestPointFilterModel is not found in the empty JSON string", TestPointFilterModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestPointFilterModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestPointFilterModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("testPlanIds") != null && !jsonObj.get("testPlanIds").isJsonNull() && !jsonObj.get("testPlanIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `testPlanIds` to be an array in the JSON string but got `%s`", jsonObj.get("testPlanIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("testSuiteIds") != null && !jsonObj.get("testSuiteIds").isJsonNull() && !jsonObj.get("testSuiteIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `testSuiteIds` to be an array in the JSON string but got `%s`", jsonObj.get("testSuiteIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("workItemGlobalIds") != null && !jsonObj.get("workItemGlobalIds").isJsonNull() && !jsonObj.get("workItemGlobalIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `workItemGlobalIds` to be an array in the JSON string but got `%s`", jsonObj.get("workItemGlobalIds").toString()));
      }
      // validate the optional field `workItemMedianDuration`
      if (jsonObj.get("workItemMedianDuration") != null && !jsonObj.get("workItemMedianDuration").isJsonNull()) {
        Int64RangeSelectorModel.validateJsonElement(jsonObj.get("workItemMedianDuration"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("statuses") != null && !jsonObj.get("statuses").isJsonNull() && !jsonObj.get("statuses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `statuses` to be an array in the JSON string but got `%s`", jsonObj.get("statuses").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("statusCodes") != null && !jsonObj.get("statusCodes").isJsonNull() && !jsonObj.get("statusCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusCodes` to be an array in the JSON string but got `%s`", jsonObj.get("statusCodes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("priorities") != null && !jsonObj.get("priorities").isJsonNull() && !jsonObj.get("priorities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `priorities` to be an array in the JSON string but got `%s`", jsonObj.get("priorities").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("configurationIds") != null && !jsonObj.get("configurationIds").isJsonNull() && !jsonObj.get("configurationIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `configurationIds` to be an array in the JSON string but got `%s`", jsonObj.get("configurationIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("testerIds") != null && !jsonObj.get("testerIds").isJsonNull() && !jsonObj.get("testerIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `testerIds` to be an array in the JSON string but got `%s`", jsonObj.get("testerIds").toString()));
      }
      // validate the optional field `duration`
      if (jsonObj.get("duration") != null && !jsonObj.get("duration").isJsonNull()) {
        Int64RangeSelectorModel.validateJsonElement(jsonObj.get("duration"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sectionIds") != null && !jsonObj.get("sectionIds").isJsonNull() && !jsonObj.get("sectionIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sectionIds` to be an array in the JSON string but got `%s`", jsonObj.get("sectionIds").toString()));
      }
      // validate the optional field `createdDate`
      if (jsonObj.get("createdDate") != null && !jsonObj.get("createdDate").isJsonNull()) {
        DateTimeRangeSelectorModel.validateJsonElement(jsonObj.get("createdDate"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("createdByIds") != null && !jsonObj.get("createdByIds").isJsonNull() && !jsonObj.get("createdByIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdByIds` to be an array in the JSON string but got `%s`", jsonObj.get("createdByIds").toString()));
      }
      // validate the optional field `modifiedDate`
      if (jsonObj.get("modifiedDate") != null && !jsonObj.get("modifiedDate").isJsonNull()) {
        DateTimeRangeSelectorModel.validateJsonElement(jsonObj.get("modifiedDate"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("modifiedByIds") != null && !jsonObj.get("modifiedByIds").isJsonNull() && !jsonObj.get("modifiedByIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedByIds` to be an array in the JSON string but got `%s`", jsonObj.get("modifiedByIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      // validate the optional field `workItemCreatedDate`
      if (jsonObj.get("workItemCreatedDate") != null && !jsonObj.get("workItemCreatedDate").isJsonNull()) {
        DateTimeRangeSelectorModel.validateJsonElement(jsonObj.get("workItemCreatedDate"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("workItemCreatedByIds") != null && !jsonObj.get("workItemCreatedByIds").isJsonNull() && !jsonObj.get("workItemCreatedByIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `workItemCreatedByIds` to be an array in the JSON string but got `%s`", jsonObj.get("workItemCreatedByIds").toString()));
      }
      // validate the optional field `workItemModifiedDate`
      if (jsonObj.get("workItemModifiedDate") != null && !jsonObj.get("workItemModifiedDate").isJsonNull()) {
        DateTimeRangeSelectorModel.validateJsonElement(jsonObj.get("workItemModifiedDate"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("workItemModifiedByIds") != null && !jsonObj.get("workItemModifiedByIds").isJsonNull() && !jsonObj.get("workItemModifiedByIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `workItemModifiedByIds` to be an array in the JSON string but got `%s`", jsonObj.get("workItemModifiedByIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestPointFilterModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestPointFilterModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestPointFilterModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestPointFilterModel.class));

       return (TypeAdapter<T>) new TypeAdapter<TestPointFilterModel>() {
           @Override
           public void write(JsonWriter out, TestPointFilterModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestPointFilterModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestPointFilterModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestPointFilterModel
   * @throws IOException if the JSON string is invalid with respect to TestPointFilterModel
   */
  public static TestPointFilterModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestPointFilterModel.class);
  }

  /**
   * Convert an instance of TestPointFilterModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

