/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import ru.testit.client.model.DateTimeRangeSelectorModel;
import ru.testit.client.model.Int64RangeSelectorModel;
import ru.testit.client.model.TestPointStatus;
import ru.testit.client.model.WorkItemPriorityModel;
import ru.testit.client.model.WorkItemSourceTypeModel;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import ru.testit.client.invoker.JSON;


/**
 * TestPointFilterRequestModel
 */
@JsonPropertyOrder({
  TestPointFilterRequestModel.JSON_PROPERTY_TEST_PLAN_IDS,
  TestPointFilterRequestModel.JSON_PROPERTY_TEST_SUITE_IDS,
  TestPointFilterRequestModel.JSON_PROPERTY_WORK_ITEM_GLOBAL_IDS,
  TestPointFilterRequestModel.JSON_PROPERTY_WORK_ITEM_MEDIAN_DURATION,
  TestPointFilterRequestModel.JSON_PROPERTY_WORK_ITEM_IS_DELETED,
  TestPointFilterRequestModel.JSON_PROPERTY_STATUSES,
  TestPointFilterRequestModel.JSON_PROPERTY_STATUS_CODES,
  TestPointFilterRequestModel.JSON_PROPERTY_PRIORITIES,
  TestPointFilterRequestModel.JSON_PROPERTY_SOURCE_TYPES,
  TestPointFilterRequestModel.JSON_PROPERTY_IS_AUTOMATED,
  TestPointFilterRequestModel.JSON_PROPERTY_NAME,
  TestPointFilterRequestModel.JSON_PROPERTY_CONFIGURATION_IDS,
  TestPointFilterRequestModel.JSON_PROPERTY_TESTER_IDS,
  TestPointFilterRequestModel.JSON_PROPERTY_DURATION,
  TestPointFilterRequestModel.JSON_PROPERTY_SECTION_IDS,
  TestPointFilterRequestModel.JSON_PROPERTY_CREATED_DATE,
  TestPointFilterRequestModel.JSON_PROPERTY_CREATED_BY_IDS,
  TestPointFilterRequestModel.JSON_PROPERTY_MODIFIED_DATE,
  TestPointFilterRequestModel.JSON_PROPERTY_MODIFIED_BY_IDS,
  TestPointFilterRequestModel.JSON_PROPERTY_TAGS,
  TestPointFilterRequestModel.JSON_PROPERTY_ATTRIBUTES,
  TestPointFilterRequestModel.JSON_PROPERTY_WORK_ITEM_CREATED_DATE,
  TestPointFilterRequestModel.JSON_PROPERTY_WORK_ITEM_CREATED_BY_IDS,
  TestPointFilterRequestModel.JSON_PROPERTY_WORK_ITEM_MODIFIED_DATE,
  TestPointFilterRequestModel.JSON_PROPERTY_WORK_ITEM_MODIFIED_BY_IDS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0")
public class TestPointFilterRequestModel {
  public static final String JSON_PROPERTY_TEST_PLAN_IDS = "testPlanIds";
  private JsonNullable<List<UUID>> testPlanIds = JsonNullable.<List<UUID>>undefined();

  public static final String JSON_PROPERTY_TEST_SUITE_IDS = "testSuiteIds";
  private JsonNullable<List<UUID>> testSuiteIds = JsonNullable.<List<UUID>>undefined();

  public static final String JSON_PROPERTY_WORK_ITEM_GLOBAL_IDS = "workItemGlobalIds";
  private JsonNullable<List<Long>> workItemGlobalIds = JsonNullable.<List<Long>>undefined();

  public static final String JSON_PROPERTY_WORK_ITEM_MEDIAN_DURATION = "workItemMedianDuration";
  private JsonNullable<Int64RangeSelectorModel> workItemMedianDuration = JsonNullable.<Int64RangeSelectorModel>undefined();

  public static final String JSON_PROPERTY_WORK_ITEM_IS_DELETED = "workItemIsDeleted";
  private JsonNullable<Boolean> workItemIsDeleted = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_STATUSES = "statuses";
  @Deprecated
  private JsonNullable<List<TestPointStatus>> statuses = JsonNullable.<List<TestPointStatus>>undefined();

  public static final String JSON_PROPERTY_STATUS_CODES = "statusCodes";
  private JsonNullable<List<String>> statusCodes = JsonNullable.<List<String>>undefined();

  public static final String JSON_PROPERTY_PRIORITIES = "priorities";
  private JsonNullable<List<WorkItemPriorityModel>> priorities = JsonNullable.<List<WorkItemPriorityModel>>undefined();

  public static final String JSON_PROPERTY_SOURCE_TYPES = "sourceTypes";
  private JsonNullable<List<WorkItemSourceTypeModel>> sourceTypes = JsonNullable.<List<WorkItemSourceTypeModel>>undefined();

  public static final String JSON_PROPERTY_IS_AUTOMATED = "isAutomated";
  private JsonNullable<Boolean> isAutomated = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_NAME = "name";
  private JsonNullable<String> name = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_CONFIGURATION_IDS = "configurationIds";
  private JsonNullable<List<UUID>> configurationIds = JsonNullable.<List<UUID>>undefined();

  public static final String JSON_PROPERTY_TESTER_IDS = "testerIds";
  private JsonNullable<List<UUID>> testerIds = JsonNullable.<List<UUID>>undefined();

  public static final String JSON_PROPERTY_DURATION = "duration";
  private JsonNullable<Int64RangeSelectorModel> duration = JsonNullable.<Int64RangeSelectorModel>undefined();

  public static final String JSON_PROPERTY_SECTION_IDS = "sectionIds";
  private JsonNullable<List<UUID>> sectionIds = JsonNullable.<List<UUID>>undefined();

  public static final String JSON_PROPERTY_CREATED_DATE = "createdDate";
  private JsonNullable<DateTimeRangeSelectorModel> createdDate = JsonNullable.<DateTimeRangeSelectorModel>undefined();

  public static final String JSON_PROPERTY_CREATED_BY_IDS = "createdByIds";
  private JsonNullable<List<UUID>> createdByIds = JsonNullable.<List<UUID>>undefined();

  public static final String JSON_PROPERTY_MODIFIED_DATE = "modifiedDate";
  private JsonNullable<DateTimeRangeSelectorModel> modifiedDate = JsonNullable.<DateTimeRangeSelectorModel>undefined();

  public static final String JSON_PROPERTY_MODIFIED_BY_IDS = "modifiedByIds";
  private JsonNullable<List<UUID>> modifiedByIds = JsonNullable.<List<UUID>>undefined();

  public static final String JSON_PROPERTY_TAGS = "tags";
  private JsonNullable<List<String>> tags = JsonNullable.<List<String>>undefined();

  public static final String JSON_PROPERTY_ATTRIBUTES = "attributes";
  private JsonNullable<Map<String, Set<String>>> attributes = JsonNullable.<Map<String, Set<String>>>undefined();

  public static final String JSON_PROPERTY_WORK_ITEM_CREATED_DATE = "workItemCreatedDate";
  private JsonNullable<DateTimeRangeSelectorModel> workItemCreatedDate = JsonNullable.<DateTimeRangeSelectorModel>undefined();

  public static final String JSON_PROPERTY_WORK_ITEM_CREATED_BY_IDS = "workItemCreatedByIds";
  private JsonNullable<List<UUID>> workItemCreatedByIds = JsonNullable.<List<UUID>>undefined();

  public static final String JSON_PROPERTY_WORK_ITEM_MODIFIED_DATE = "workItemModifiedDate";
  private JsonNullable<DateTimeRangeSelectorModel> workItemModifiedDate = JsonNullable.<DateTimeRangeSelectorModel>undefined();

  public static final String JSON_PROPERTY_WORK_ITEM_MODIFIED_BY_IDS = "workItemModifiedByIds";
  private JsonNullable<List<UUID>> workItemModifiedByIds = JsonNullable.<List<UUID>>undefined();

  public TestPointFilterRequestModel() { 
  }

  public TestPointFilterRequestModel testPlanIds(List<UUID> testPlanIds) {
    this.testPlanIds = JsonNullable.<List<UUID>>of(testPlanIds);
    return this;
  }

  public TestPointFilterRequestModel addTestPlanIdsItem(UUID testPlanIdsItem) {
    if (this.testPlanIds == null || !this.testPlanIds.isPresent()) {
      this.testPlanIds = JsonNullable.<List<UUID>>of(new ArrayList<>());
    }
    try {
      this.testPlanIds.get().add(testPlanIdsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Specifies a test point test plan IDS to search for
   * @return testPlanIds
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<UUID> getTestPlanIds() {
        return testPlanIds.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TEST_PLAN_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<UUID>> getTestPlanIds_JsonNullable() {
    return testPlanIds;
  }
  
  @JsonProperty(JSON_PROPERTY_TEST_PLAN_IDS)
  public void setTestPlanIds_JsonNullable(JsonNullable<List<UUID>> testPlanIds) {
    this.testPlanIds = testPlanIds;
  }

  public void setTestPlanIds(List<UUID> testPlanIds) {
    this.testPlanIds = JsonNullable.<List<UUID>>of(testPlanIds);
  }


  public TestPointFilterRequestModel testSuiteIds(List<UUID> testSuiteIds) {
    this.testSuiteIds = JsonNullable.<List<UUID>>of(testSuiteIds);
    return this;
  }

  public TestPointFilterRequestModel addTestSuiteIdsItem(UUID testSuiteIdsItem) {
    if (this.testSuiteIds == null || !this.testSuiteIds.isPresent()) {
      this.testSuiteIds = JsonNullable.<List<UUID>>of(new ArrayList<>());
    }
    try {
      this.testSuiteIds.get().add(testSuiteIdsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Specifies a test point test suite IDs to search for
   * @return testSuiteIds
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<UUID> getTestSuiteIds() {
        return testSuiteIds.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TEST_SUITE_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<UUID>> getTestSuiteIds_JsonNullable() {
    return testSuiteIds;
  }
  
  @JsonProperty(JSON_PROPERTY_TEST_SUITE_IDS)
  public void setTestSuiteIds_JsonNullable(JsonNullable<List<UUID>> testSuiteIds) {
    this.testSuiteIds = testSuiteIds;
  }

  public void setTestSuiteIds(List<UUID> testSuiteIds) {
    this.testSuiteIds = JsonNullable.<List<UUID>>of(testSuiteIds);
  }


  public TestPointFilterRequestModel workItemGlobalIds(List<Long> workItemGlobalIds) {
    this.workItemGlobalIds = JsonNullable.<List<Long>>of(workItemGlobalIds);
    return this;
  }

  public TestPointFilterRequestModel addWorkItemGlobalIdsItem(Long workItemGlobalIdsItem) {
    if (this.workItemGlobalIds == null || !this.workItemGlobalIds.isPresent()) {
      this.workItemGlobalIds = JsonNullable.<List<Long>>of(new ArrayList<>());
    }
    try {
      this.workItemGlobalIds.get().add(workItemGlobalIdsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Specifies a test point work item global IDs to search for
   * @return workItemGlobalIds
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<Long> getWorkItemGlobalIds() {
        return workItemGlobalIds.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_WORK_ITEM_GLOBAL_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<Long>> getWorkItemGlobalIds_JsonNullable() {
    return workItemGlobalIds;
  }
  
  @JsonProperty(JSON_PROPERTY_WORK_ITEM_GLOBAL_IDS)
  public void setWorkItemGlobalIds_JsonNullable(JsonNullable<List<Long>> workItemGlobalIds) {
    this.workItemGlobalIds = workItemGlobalIds;
  }

  public void setWorkItemGlobalIds(List<Long> workItemGlobalIds) {
    this.workItemGlobalIds = JsonNullable.<List<Long>>of(workItemGlobalIds);
  }


  public TestPointFilterRequestModel workItemMedianDuration(Int64RangeSelectorModel workItemMedianDuration) {
    this.workItemMedianDuration = JsonNullable.<Int64RangeSelectorModel>of(workItemMedianDuration);
    return this;
  }

  /**
   * Specifies a test point work item median duration range to search for
   * @return workItemMedianDuration
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Int64RangeSelectorModel getWorkItemMedianDuration() {
        return workItemMedianDuration.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_WORK_ITEM_MEDIAN_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Int64RangeSelectorModel> getWorkItemMedianDuration_JsonNullable() {
    return workItemMedianDuration;
  }
  
  @JsonProperty(JSON_PROPERTY_WORK_ITEM_MEDIAN_DURATION)
  public void setWorkItemMedianDuration_JsonNullable(JsonNullable<Int64RangeSelectorModel> workItemMedianDuration) {
    this.workItemMedianDuration = workItemMedianDuration;
  }

  public void setWorkItemMedianDuration(Int64RangeSelectorModel workItemMedianDuration) {
    this.workItemMedianDuration = JsonNullable.<Int64RangeSelectorModel>of(workItemMedianDuration);
  }


  public TestPointFilterRequestModel workItemIsDeleted(Boolean workItemIsDeleted) {
    this.workItemIsDeleted = JsonNullable.<Boolean>of(workItemIsDeleted);
    return this;
  }

  /**
   * Specifies a test point work item is deleted flag to search for
   * @return workItemIsDeleted
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Boolean getWorkItemIsDeleted() {
        return workItemIsDeleted.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_WORK_ITEM_IS_DELETED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getWorkItemIsDeleted_JsonNullable() {
    return workItemIsDeleted;
  }
  
  @JsonProperty(JSON_PROPERTY_WORK_ITEM_IS_DELETED)
  public void setWorkItemIsDeleted_JsonNullable(JsonNullable<Boolean> workItemIsDeleted) {
    this.workItemIsDeleted = workItemIsDeleted;
  }

  public void setWorkItemIsDeleted(Boolean workItemIsDeleted) {
    this.workItemIsDeleted = JsonNullable.<Boolean>of(workItemIsDeleted);
  }


  @Deprecated
  public TestPointFilterRequestModel statuses(List<TestPointStatus> statuses) {
    this.statuses = JsonNullable.<List<TestPointStatus>>of(statuses);
    return this;
  }

  public TestPointFilterRequestModel addStatusesItem(TestPointStatus statusesItem) {
    if (this.statuses == null || !this.statuses.isPresent()) {
      this.statuses = JsonNullable.<List<TestPointStatus>>of(new ArrayList<>());
    }
    try {
      this.statuses.get().add(statusesItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Specifies a test point statuses to search for
   * @return statuses
   * @deprecated
   */
  @Deprecated
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<TestPointStatus> getStatuses() {
        return statuses.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_STATUSES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<TestPointStatus>> getStatuses_JsonNullable() {
    return statuses;
  }
  
  @JsonProperty(JSON_PROPERTY_STATUSES)
  public void setStatuses_JsonNullable(JsonNullable<List<TestPointStatus>> statuses) {
    this.statuses = statuses;
  }

  @Deprecated
  public void setStatuses(List<TestPointStatus> statuses) {
    this.statuses = JsonNullable.<List<TestPointStatus>>of(statuses);
  }


  public TestPointFilterRequestModel statusCodes(List<String> statusCodes) {
    this.statusCodes = JsonNullable.<List<String>>of(statusCodes);
    return this;
  }

  public TestPointFilterRequestModel addStatusCodesItem(String statusCodesItem) {
    if (this.statusCodes == null || !this.statusCodes.isPresent()) {
      this.statusCodes = JsonNullable.<List<String>>of(new ArrayList<>());
    }
    try {
      this.statusCodes.get().add(statusCodesItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Specifies a test point status codes to search for
   * @return statusCodes
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<String> getStatusCodes() {
        return statusCodes.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_STATUS_CODES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<String>> getStatusCodes_JsonNullable() {
    return statusCodes;
  }
  
  @JsonProperty(JSON_PROPERTY_STATUS_CODES)
  public void setStatusCodes_JsonNullable(JsonNullable<List<String>> statusCodes) {
    this.statusCodes = statusCodes;
  }

  public void setStatusCodes(List<String> statusCodes) {
    this.statusCodes = JsonNullable.<List<String>>of(statusCodes);
  }


  public TestPointFilterRequestModel priorities(List<WorkItemPriorityModel> priorities) {
    this.priorities = JsonNullable.<List<WorkItemPriorityModel>>of(priorities);
    return this;
  }

  public TestPointFilterRequestModel addPrioritiesItem(WorkItemPriorityModel prioritiesItem) {
    if (this.priorities == null || !this.priorities.isPresent()) {
      this.priorities = JsonNullable.<List<WorkItemPriorityModel>>of(new ArrayList<>());
    }
    try {
      this.priorities.get().add(prioritiesItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Specifies a test point priorities to search for
   * @return priorities
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<WorkItemPriorityModel> getPriorities() {
        return priorities.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PRIORITIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<WorkItemPriorityModel>> getPriorities_JsonNullable() {
    return priorities;
  }
  
  @JsonProperty(JSON_PROPERTY_PRIORITIES)
  public void setPriorities_JsonNullable(JsonNullable<List<WorkItemPriorityModel>> priorities) {
    this.priorities = priorities;
  }

  public void setPriorities(List<WorkItemPriorityModel> priorities) {
    this.priorities = JsonNullable.<List<WorkItemPriorityModel>>of(priorities);
  }


  public TestPointFilterRequestModel sourceTypes(List<WorkItemSourceTypeModel> sourceTypes) {
    this.sourceTypes = JsonNullable.<List<WorkItemSourceTypeModel>>of(sourceTypes);
    return this;
  }

  public TestPointFilterRequestModel addSourceTypesItem(WorkItemSourceTypeModel sourceTypesItem) {
    if (this.sourceTypes == null || !this.sourceTypes.isPresent()) {
      this.sourceTypes = JsonNullable.<List<WorkItemSourceTypeModel>>of(new ArrayList<>());
    }
    try {
      this.sourceTypes.get().add(sourceTypesItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Specifies a test point source types to search for
   * @return sourceTypes
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<WorkItemSourceTypeModel> getSourceTypes() {
        return sourceTypes.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SOURCE_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<WorkItemSourceTypeModel>> getSourceTypes_JsonNullable() {
    return sourceTypes;
  }
  
  @JsonProperty(JSON_PROPERTY_SOURCE_TYPES)
  public void setSourceTypes_JsonNullable(JsonNullable<List<WorkItemSourceTypeModel>> sourceTypes) {
    this.sourceTypes = sourceTypes;
  }

  public void setSourceTypes(List<WorkItemSourceTypeModel> sourceTypes) {
    this.sourceTypes = JsonNullable.<List<WorkItemSourceTypeModel>>of(sourceTypes);
  }


  public TestPointFilterRequestModel isAutomated(Boolean isAutomated) {
    this.isAutomated = JsonNullable.<Boolean>of(isAutomated);
    return this;
  }

  /**
   * Specifies a test point automation status to search for
   * @return isAutomated
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Boolean getIsAutomated() {
        return isAutomated.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_IS_AUTOMATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getIsAutomated_JsonNullable() {
    return isAutomated;
  }
  
  @JsonProperty(JSON_PROPERTY_IS_AUTOMATED)
  public void setIsAutomated_JsonNullable(JsonNullable<Boolean> isAutomated) {
    this.isAutomated = isAutomated;
  }

  public void setIsAutomated(Boolean isAutomated) {
    this.isAutomated = JsonNullable.<Boolean>of(isAutomated);
  }


  public TestPointFilterRequestModel name(String name) {
    this.name = JsonNullable.<String>of(name);
    return this;
  }

  /**
   * Specifies a test point name to search for
   * @return name
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getName() {
        return name.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getName_JsonNullable() {
    return name;
  }
  
  @JsonProperty(JSON_PROPERTY_NAME)
  public void setName_JsonNullable(JsonNullable<String> name) {
    this.name = name;
  }

  public void setName(String name) {
    this.name = JsonNullable.<String>of(name);
  }


  public TestPointFilterRequestModel configurationIds(List<UUID> configurationIds) {
    this.configurationIds = JsonNullable.<List<UUID>>of(configurationIds);
    return this;
  }

  public TestPointFilterRequestModel addConfigurationIdsItem(UUID configurationIdsItem) {
    if (this.configurationIds == null || !this.configurationIds.isPresent()) {
      this.configurationIds = JsonNullable.<List<UUID>>of(new ArrayList<>());
    }
    try {
      this.configurationIds.get().add(configurationIdsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Specifies a test point configuration IDs to search for
   * @return configurationIds
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<UUID> getConfigurationIds() {
        return configurationIds.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CONFIGURATION_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<UUID>> getConfigurationIds_JsonNullable() {
    return configurationIds;
  }
  
  @JsonProperty(JSON_PROPERTY_CONFIGURATION_IDS)
  public void setConfigurationIds_JsonNullable(JsonNullable<List<UUID>> configurationIds) {
    this.configurationIds = configurationIds;
  }

  public void setConfigurationIds(List<UUID> configurationIds) {
    this.configurationIds = JsonNullable.<List<UUID>>of(configurationIds);
  }


  public TestPointFilterRequestModel testerIds(List<UUID> testerIds) {
    this.testerIds = JsonNullable.<List<UUID>>of(testerIds);
    return this;
  }

  public TestPointFilterRequestModel addTesterIdsItem(UUID testerIdsItem) {
    if (this.testerIds == null || !this.testerIds.isPresent()) {
      this.testerIds = JsonNullable.<List<UUID>>of(new ArrayList<>());
    }
    try {
      this.testerIds.get().add(testerIdsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Specifies a test point assigned user IDs to search for
   * @return testerIds
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<UUID> getTesterIds() {
        return testerIds.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TESTER_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<UUID>> getTesterIds_JsonNullable() {
    return testerIds;
  }
  
  @JsonProperty(JSON_PROPERTY_TESTER_IDS)
  public void setTesterIds_JsonNullable(JsonNullable<List<UUID>> testerIds) {
    this.testerIds = testerIds;
  }

  public void setTesterIds(List<UUID> testerIds) {
    this.testerIds = JsonNullable.<List<UUID>>of(testerIds);
  }


  public TestPointFilterRequestModel duration(Int64RangeSelectorModel duration) {
    this.duration = JsonNullable.<Int64RangeSelectorModel>of(duration);
    return this;
  }

  /**
   * Specifies a test point range of duration to search for
   * @return duration
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Int64RangeSelectorModel getDuration() {
        return duration.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Int64RangeSelectorModel> getDuration_JsonNullable() {
    return duration;
  }
  
  @JsonProperty(JSON_PROPERTY_DURATION)
  public void setDuration_JsonNullable(JsonNullable<Int64RangeSelectorModel> duration) {
    this.duration = duration;
  }

  public void setDuration(Int64RangeSelectorModel duration) {
    this.duration = JsonNullable.<Int64RangeSelectorModel>of(duration);
  }


  public TestPointFilterRequestModel sectionIds(List<UUID> sectionIds) {
    this.sectionIds = JsonNullable.<List<UUID>>of(sectionIds);
    return this;
  }

  public TestPointFilterRequestModel addSectionIdsItem(UUID sectionIdsItem) {
    if (this.sectionIds == null || !this.sectionIds.isPresent()) {
      this.sectionIds = JsonNullable.<List<UUID>>of(new ArrayList<>());
    }
    try {
      this.sectionIds.get().add(sectionIdsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Specifies a test point work item section IDs to search for
   * @return sectionIds
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<UUID> getSectionIds() {
        return sectionIds.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SECTION_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<UUID>> getSectionIds_JsonNullable() {
    return sectionIds;
  }
  
  @JsonProperty(JSON_PROPERTY_SECTION_IDS)
  public void setSectionIds_JsonNullable(JsonNullable<List<UUID>> sectionIds) {
    this.sectionIds = sectionIds;
  }

  public void setSectionIds(List<UUID> sectionIds) {
    this.sectionIds = JsonNullable.<List<UUID>>of(sectionIds);
  }


  public TestPointFilterRequestModel createdDate(DateTimeRangeSelectorModel createdDate) {
    this.createdDate = JsonNullable.<DateTimeRangeSelectorModel>of(createdDate);
    return this;
  }

  /**
   * Specifies a test point range of creation date to search for
   * @return createdDate
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public DateTimeRangeSelectorModel getCreatedDate() {
        return createdDate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CREATED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<DateTimeRangeSelectorModel> getCreatedDate_JsonNullable() {
    return createdDate;
  }
  
  @JsonProperty(JSON_PROPERTY_CREATED_DATE)
  public void setCreatedDate_JsonNullable(JsonNullable<DateTimeRangeSelectorModel> createdDate) {
    this.createdDate = createdDate;
  }

  public void setCreatedDate(DateTimeRangeSelectorModel createdDate) {
    this.createdDate = JsonNullable.<DateTimeRangeSelectorModel>of(createdDate);
  }


  public TestPointFilterRequestModel createdByIds(List<UUID> createdByIds) {
    this.createdByIds = JsonNullable.<List<UUID>>of(createdByIds);
    return this;
  }

  public TestPointFilterRequestModel addCreatedByIdsItem(UUID createdByIdsItem) {
    if (this.createdByIds == null || !this.createdByIds.isPresent()) {
      this.createdByIds = JsonNullable.<List<UUID>>of(new ArrayList<>());
    }
    try {
      this.createdByIds.get().add(createdByIdsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Specifies a test point creator IDs to search for
   * @return createdByIds
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<UUID> getCreatedByIds() {
        return createdByIds.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CREATED_BY_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<UUID>> getCreatedByIds_JsonNullable() {
    return createdByIds;
  }
  
  @JsonProperty(JSON_PROPERTY_CREATED_BY_IDS)
  public void setCreatedByIds_JsonNullable(JsonNullable<List<UUID>> createdByIds) {
    this.createdByIds = createdByIds;
  }

  public void setCreatedByIds(List<UUID> createdByIds) {
    this.createdByIds = JsonNullable.<List<UUID>>of(createdByIds);
  }


  public TestPointFilterRequestModel modifiedDate(DateTimeRangeSelectorModel modifiedDate) {
    this.modifiedDate = JsonNullable.<DateTimeRangeSelectorModel>of(modifiedDate);
    return this;
  }

  /**
   * Specifies a test point range of last modification date to search for
   * @return modifiedDate
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public DateTimeRangeSelectorModel getModifiedDate() {
        return modifiedDate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MODIFIED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<DateTimeRangeSelectorModel> getModifiedDate_JsonNullable() {
    return modifiedDate;
  }
  
  @JsonProperty(JSON_PROPERTY_MODIFIED_DATE)
  public void setModifiedDate_JsonNullable(JsonNullable<DateTimeRangeSelectorModel> modifiedDate) {
    this.modifiedDate = modifiedDate;
  }

  public void setModifiedDate(DateTimeRangeSelectorModel modifiedDate) {
    this.modifiedDate = JsonNullable.<DateTimeRangeSelectorModel>of(modifiedDate);
  }


  public TestPointFilterRequestModel modifiedByIds(List<UUID> modifiedByIds) {
    this.modifiedByIds = JsonNullable.<List<UUID>>of(modifiedByIds);
    return this;
  }

  public TestPointFilterRequestModel addModifiedByIdsItem(UUID modifiedByIdsItem) {
    if (this.modifiedByIds == null || !this.modifiedByIds.isPresent()) {
      this.modifiedByIds = JsonNullable.<List<UUID>>of(new ArrayList<>());
    }
    try {
      this.modifiedByIds.get().add(modifiedByIdsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Specifies a test point last editor IDs to search for
   * @return modifiedByIds
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<UUID> getModifiedByIds() {
        return modifiedByIds.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MODIFIED_BY_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<UUID>> getModifiedByIds_JsonNullable() {
    return modifiedByIds;
  }
  
  @JsonProperty(JSON_PROPERTY_MODIFIED_BY_IDS)
  public void setModifiedByIds_JsonNullable(JsonNullable<List<UUID>> modifiedByIds) {
    this.modifiedByIds = modifiedByIds;
  }

  public void setModifiedByIds(List<UUID> modifiedByIds) {
    this.modifiedByIds = JsonNullable.<List<UUID>>of(modifiedByIds);
  }


  public TestPointFilterRequestModel tags(List<String> tags) {
    this.tags = JsonNullable.<List<String>>of(tags);
    return this;
  }

  public TestPointFilterRequestModel addTagsItem(String tagsItem) {
    if (this.tags == null || !this.tags.isPresent()) {
      this.tags = JsonNullable.<List<String>>of(new ArrayList<>());
    }
    try {
      this.tags.get().add(tagsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Specifies a test point tags to search for
   * @return tags
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<String> getTags() {
        return tags.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<String>> getTags_JsonNullable() {
    return tags;
  }
  
  @JsonProperty(JSON_PROPERTY_TAGS)
  public void setTags_JsonNullable(JsonNullable<List<String>> tags) {
    this.tags = tags;
  }

  public void setTags(List<String> tags) {
    this.tags = JsonNullable.<List<String>>of(tags);
  }


  public TestPointFilterRequestModel attributes(Map<String, Set<String>> attributes) {
    this.attributes = JsonNullable.<Map<String, Set<String>>>of(attributes);
    return this;
  }

  public TestPointFilterRequestModel putAttributesItem(String key, Set<String> attributesItem) {
    if (this.attributes == null || !this.attributes.isPresent()) {
      this.attributes = JsonNullable.<Map<String, Set<String>>>of(new HashMap<>());
    }
    try {
      this.attributes.get().put(key, attributesItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Specifies a test point attributes to search for
   * @return attributes
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Map<String, Set<String>> getAttributes() {
        return attributes.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ATTRIBUTES)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Map<String, Set<String>>> getAttributes_JsonNullable() {
    return attributes;
  }
  
  @JsonProperty(JSON_PROPERTY_ATTRIBUTES)
  public void setAttributes_JsonNullable(JsonNullable<Map<String, Set<String>>> attributes) {
    this.attributes = attributes;
  }

  public void setAttributes(Map<String, Set<String>> attributes) {
    this.attributes = JsonNullable.<Map<String, Set<String>>>of(attributes);
  }


  public TestPointFilterRequestModel workItemCreatedDate(DateTimeRangeSelectorModel workItemCreatedDate) {
    this.workItemCreatedDate = JsonNullable.<DateTimeRangeSelectorModel>of(workItemCreatedDate);
    return this;
  }

  /**
   * Specifies a work item range of creation date to search for
   * @return workItemCreatedDate
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public DateTimeRangeSelectorModel getWorkItemCreatedDate() {
        return workItemCreatedDate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_WORK_ITEM_CREATED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<DateTimeRangeSelectorModel> getWorkItemCreatedDate_JsonNullable() {
    return workItemCreatedDate;
  }
  
  @JsonProperty(JSON_PROPERTY_WORK_ITEM_CREATED_DATE)
  public void setWorkItemCreatedDate_JsonNullable(JsonNullable<DateTimeRangeSelectorModel> workItemCreatedDate) {
    this.workItemCreatedDate = workItemCreatedDate;
  }

  public void setWorkItemCreatedDate(DateTimeRangeSelectorModel workItemCreatedDate) {
    this.workItemCreatedDate = JsonNullable.<DateTimeRangeSelectorModel>of(workItemCreatedDate);
  }


  public TestPointFilterRequestModel workItemCreatedByIds(List<UUID> workItemCreatedByIds) {
    this.workItemCreatedByIds = JsonNullable.<List<UUID>>of(workItemCreatedByIds);
    return this;
  }

  public TestPointFilterRequestModel addWorkItemCreatedByIdsItem(UUID workItemCreatedByIdsItem) {
    if (this.workItemCreatedByIds == null || !this.workItemCreatedByIds.isPresent()) {
      this.workItemCreatedByIds = JsonNullable.<List<UUID>>of(new ArrayList<>());
    }
    try {
      this.workItemCreatedByIds.get().add(workItemCreatedByIdsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Specifies a work item creator IDs to search for
   * @return workItemCreatedByIds
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<UUID> getWorkItemCreatedByIds() {
        return workItemCreatedByIds.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_WORK_ITEM_CREATED_BY_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<UUID>> getWorkItemCreatedByIds_JsonNullable() {
    return workItemCreatedByIds;
  }
  
  @JsonProperty(JSON_PROPERTY_WORK_ITEM_CREATED_BY_IDS)
  public void setWorkItemCreatedByIds_JsonNullable(JsonNullable<List<UUID>> workItemCreatedByIds) {
    this.workItemCreatedByIds = workItemCreatedByIds;
  }

  public void setWorkItemCreatedByIds(List<UUID> workItemCreatedByIds) {
    this.workItemCreatedByIds = JsonNullable.<List<UUID>>of(workItemCreatedByIds);
  }


  public TestPointFilterRequestModel workItemModifiedDate(DateTimeRangeSelectorModel workItemModifiedDate) {
    this.workItemModifiedDate = JsonNullable.<DateTimeRangeSelectorModel>of(workItemModifiedDate);
    return this;
  }

  /**
   * Specifies a work item range of last modification date to search for
   * @return workItemModifiedDate
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public DateTimeRangeSelectorModel getWorkItemModifiedDate() {
        return workItemModifiedDate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_WORK_ITEM_MODIFIED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<DateTimeRangeSelectorModel> getWorkItemModifiedDate_JsonNullable() {
    return workItemModifiedDate;
  }
  
  @JsonProperty(JSON_PROPERTY_WORK_ITEM_MODIFIED_DATE)
  public void setWorkItemModifiedDate_JsonNullable(JsonNullable<DateTimeRangeSelectorModel> workItemModifiedDate) {
    this.workItemModifiedDate = workItemModifiedDate;
  }

  public void setWorkItemModifiedDate(DateTimeRangeSelectorModel workItemModifiedDate) {
    this.workItemModifiedDate = JsonNullable.<DateTimeRangeSelectorModel>of(workItemModifiedDate);
  }


  public TestPointFilterRequestModel workItemModifiedByIds(List<UUID> workItemModifiedByIds) {
    this.workItemModifiedByIds = JsonNullable.<List<UUID>>of(workItemModifiedByIds);
    return this;
  }

  public TestPointFilterRequestModel addWorkItemModifiedByIdsItem(UUID workItemModifiedByIdsItem) {
    if (this.workItemModifiedByIds == null || !this.workItemModifiedByIds.isPresent()) {
      this.workItemModifiedByIds = JsonNullable.<List<UUID>>of(new ArrayList<>());
    }
    try {
      this.workItemModifiedByIds.get().add(workItemModifiedByIdsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Specifies a work item last editor IDs to search for
   * @return workItemModifiedByIds
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<UUID> getWorkItemModifiedByIds() {
        return workItemModifiedByIds.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_WORK_ITEM_MODIFIED_BY_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<UUID>> getWorkItemModifiedByIds_JsonNullable() {
    return workItemModifiedByIds;
  }
  
  @JsonProperty(JSON_PROPERTY_WORK_ITEM_MODIFIED_BY_IDS)
  public void setWorkItemModifiedByIds_JsonNullable(JsonNullable<List<UUID>> workItemModifiedByIds) {
    this.workItemModifiedByIds = workItemModifiedByIds;
  }

  public void setWorkItemModifiedByIds(List<UUID> workItemModifiedByIds) {
    this.workItemModifiedByIds = JsonNullable.<List<UUID>>of(workItemModifiedByIds);
  }


  /**
   * Return true if this TestPointFilterRequestModel object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestPointFilterRequestModel testPointFilterRequestModel = (TestPointFilterRequestModel) o;
    return equalsNullable(this.testPlanIds, testPointFilterRequestModel.testPlanIds) &&
        equalsNullable(this.testSuiteIds, testPointFilterRequestModel.testSuiteIds) &&
        equalsNullable(this.workItemGlobalIds, testPointFilterRequestModel.workItemGlobalIds) &&
        equalsNullable(this.workItemMedianDuration, testPointFilterRequestModel.workItemMedianDuration) &&
        equalsNullable(this.workItemIsDeleted, testPointFilterRequestModel.workItemIsDeleted) &&
        equalsNullable(this.statuses, testPointFilterRequestModel.statuses) &&
        equalsNullable(this.statusCodes, testPointFilterRequestModel.statusCodes) &&
        equalsNullable(this.priorities, testPointFilterRequestModel.priorities) &&
        equalsNullable(this.sourceTypes, testPointFilterRequestModel.sourceTypes) &&
        equalsNullable(this.isAutomated, testPointFilterRequestModel.isAutomated) &&
        equalsNullable(this.name, testPointFilterRequestModel.name) &&
        equalsNullable(this.configurationIds, testPointFilterRequestModel.configurationIds) &&
        equalsNullable(this.testerIds, testPointFilterRequestModel.testerIds) &&
        equalsNullable(this.duration, testPointFilterRequestModel.duration) &&
        equalsNullable(this.sectionIds, testPointFilterRequestModel.sectionIds) &&
        equalsNullable(this.createdDate, testPointFilterRequestModel.createdDate) &&
        equalsNullable(this.createdByIds, testPointFilterRequestModel.createdByIds) &&
        equalsNullable(this.modifiedDate, testPointFilterRequestModel.modifiedDate) &&
        equalsNullable(this.modifiedByIds, testPointFilterRequestModel.modifiedByIds) &&
        equalsNullable(this.tags, testPointFilterRequestModel.tags) &&
        equalsNullable(this.attributes, testPointFilterRequestModel.attributes) &&
        equalsNullable(this.workItemCreatedDate, testPointFilterRequestModel.workItemCreatedDate) &&
        equalsNullable(this.workItemCreatedByIds, testPointFilterRequestModel.workItemCreatedByIds) &&
        equalsNullable(this.workItemModifiedDate, testPointFilterRequestModel.workItemModifiedDate) &&
        equalsNullable(this.workItemModifiedByIds, testPointFilterRequestModel.workItemModifiedByIds);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(testPlanIds), hashCodeNullable(testSuiteIds), hashCodeNullable(workItemGlobalIds), hashCodeNullable(workItemMedianDuration), hashCodeNullable(workItemIsDeleted), hashCodeNullable(statuses), hashCodeNullable(statusCodes), hashCodeNullable(priorities), hashCodeNullable(sourceTypes), hashCodeNullable(isAutomated), hashCodeNullable(name), hashCodeNullable(configurationIds), hashCodeNullable(testerIds), hashCodeNullable(duration), hashCodeNullable(sectionIds), hashCodeNullable(createdDate), hashCodeNullable(createdByIds), hashCodeNullable(modifiedDate), hashCodeNullable(modifiedByIds), hashCodeNullable(tags), hashCodeNullable(attributes), hashCodeNullable(workItemCreatedDate), hashCodeNullable(workItemCreatedByIds), hashCodeNullable(workItemModifiedDate), hashCodeNullable(workItemModifiedByIds));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestPointFilterRequestModel {\n");
    sb.append("    testPlanIds: ").append(toIndentedString(testPlanIds)).append("\n");
    sb.append("    testSuiteIds: ").append(toIndentedString(testSuiteIds)).append("\n");
    sb.append("    workItemGlobalIds: ").append(toIndentedString(workItemGlobalIds)).append("\n");
    sb.append("    workItemMedianDuration: ").append(toIndentedString(workItemMedianDuration)).append("\n");
    sb.append("    workItemIsDeleted: ").append(toIndentedString(workItemIsDeleted)).append("\n");
    sb.append("    statuses: ").append(toIndentedString(statuses)).append("\n");
    sb.append("    statusCodes: ").append(toIndentedString(statusCodes)).append("\n");
    sb.append("    priorities: ").append(toIndentedString(priorities)).append("\n");
    sb.append("    sourceTypes: ").append(toIndentedString(sourceTypes)).append("\n");
    sb.append("    isAutomated: ").append(toIndentedString(isAutomated)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    configurationIds: ").append(toIndentedString(configurationIds)).append("\n");
    sb.append("    testerIds: ").append(toIndentedString(testerIds)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    sectionIds: ").append(toIndentedString(sectionIds)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    createdByIds: ").append(toIndentedString(createdByIds)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("    modifiedByIds: ").append(toIndentedString(modifiedByIds)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    workItemCreatedDate: ").append(toIndentedString(workItemCreatedDate)).append("\n");
    sb.append("    workItemCreatedByIds: ").append(toIndentedString(workItemCreatedByIds)).append("\n");
    sb.append("    workItemModifiedDate: ").append(toIndentedString(workItemModifiedDate)).append("\n");
    sb.append("    workItemModifiedByIds: ").append(toIndentedString(workItemModifiedByIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

