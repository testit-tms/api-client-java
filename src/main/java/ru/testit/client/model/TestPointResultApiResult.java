/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import ru.testit.client.model.TestResultShortApiResult;
import ru.testit.client.model.TestStatusApiResult;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import ru.testit.client.invoker.JSON;

/**
 * TestPointResultApiResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0")
public class TestPointResultApiResult {
  public static final String SERIALIZED_NAME_TEST_POINT_ID = "testPointId";
  @SerializedName(SERIALIZED_NAME_TEST_POINT_ID)
  private UUID testPointId;

  public static final String SERIALIZED_NAME_AGGREGATED_OUTCOME = "aggregatedOutcome";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_AGGREGATED_OUTCOME)
  private String aggregatedOutcome;

  public static final String SERIALIZED_NAME_AGGREGATED_STATUS = "aggregatedStatus";
  @SerializedName(SERIALIZED_NAME_AGGREGATED_STATUS)
  private TestStatusApiResult aggregatedStatus;

  public static final String SERIALIZED_NAME_WORK_ITEM_GLOBAL_ID = "workItemGlobalId";
  @SerializedName(SERIALIZED_NAME_WORK_ITEM_GLOBAL_ID)
  private Long workItemGlobalId;

  public static final String SERIALIZED_NAME_WORK_ITEM_NAME = "workItemName";
  @SerializedName(SERIALIZED_NAME_WORK_ITEM_NAME)
  private String workItemName;

  public static final String SERIALIZED_NAME_CONFIGURATION_NAME = "configurationName";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_NAME)
  private String configurationName;

  public static final String SERIALIZED_NAME_TEST_RESULTS = "testResults";
  @SerializedName(SERIALIZED_NAME_TEST_RESULTS)
  private List<TestResultShortApiResult> testResults = new ArrayList<>();

  public TestPointResultApiResult() {
  }

  public TestPointResultApiResult testPointId(UUID testPointId) {
    this.testPointId = testPointId;
    return this;
  }

  /**
   * Get testPointId
   * @return testPointId
   */
  @javax.annotation.Nullable
  public UUID getTestPointId() {
    return testPointId;
  }

  public void setTestPointId(UUID testPointId) {
    this.testPointId = testPointId;
  }


  @Deprecated
  public TestPointResultApiResult aggregatedOutcome(String aggregatedOutcome) {
    this.aggregatedOutcome = aggregatedOutcome;
    return this;
  }

  /**
   * Get aggregatedOutcome
   * @return aggregatedOutcome
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getAggregatedOutcome() {
    return aggregatedOutcome;
  }

  @Deprecated
  public void setAggregatedOutcome(String aggregatedOutcome) {
    this.aggregatedOutcome = aggregatedOutcome;
  }


  public TestPointResultApiResult aggregatedStatus(TestStatusApiResult aggregatedStatus) {
    this.aggregatedStatus = aggregatedStatus;
    return this;
  }

  /**
   * Get aggregatedStatus
   * @return aggregatedStatus
   */
  @javax.annotation.Nullable
  public TestStatusApiResult getAggregatedStatus() {
    return aggregatedStatus;
  }

  public void setAggregatedStatus(TestStatusApiResult aggregatedStatus) {
    this.aggregatedStatus = aggregatedStatus;
  }


  public TestPointResultApiResult workItemGlobalId(Long workItemGlobalId) {
    this.workItemGlobalId = workItemGlobalId;
    return this;
  }

  /**
   * Get workItemGlobalId
   * @return workItemGlobalId
   */
  @javax.annotation.Nullable
  public Long getWorkItemGlobalId() {
    return workItemGlobalId;
  }

  public void setWorkItemGlobalId(Long workItemGlobalId) {
    this.workItemGlobalId = workItemGlobalId;
  }


  public TestPointResultApiResult workItemName(String workItemName) {
    this.workItemName = workItemName;
    return this;
  }

  /**
   * Get workItemName
   * @return workItemName
   */
  @javax.annotation.Nullable
  public String getWorkItemName() {
    return workItemName;
  }

  public void setWorkItemName(String workItemName) {
    this.workItemName = workItemName;
  }


  public TestPointResultApiResult configurationName(String configurationName) {
    this.configurationName = configurationName;
    return this;
  }

  /**
   * Get configurationName
   * @return configurationName
   */
  @javax.annotation.Nullable
  public String getConfigurationName() {
    return configurationName;
  }

  public void setConfigurationName(String configurationName) {
    this.configurationName = configurationName;
  }


  public TestPointResultApiResult testResults(List<TestResultShortApiResult> testResults) {
    this.testResults = testResults;
    return this;
  }

  public TestPointResultApiResult addTestResultsItem(TestResultShortApiResult testResultsItem) {
    if (this.testResults == null) {
      this.testResults = new ArrayList<>();
    }
    this.testResults.add(testResultsItem);
    return this;
  }

  /**
   * Get testResults
   * @return testResults
   */
  @javax.annotation.Nonnull
  public List<TestResultShortApiResult> getTestResults() {
    return testResults;
  }

  public void setTestResults(List<TestResultShortApiResult> testResults) {
    this.testResults = testResults;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestPointResultApiResult testPointResultApiResult = (TestPointResultApiResult) o;
    return Objects.equals(this.testPointId, testPointResultApiResult.testPointId) &&
        Objects.equals(this.aggregatedOutcome, testPointResultApiResult.aggregatedOutcome) &&
        Objects.equals(this.aggregatedStatus, testPointResultApiResult.aggregatedStatus) &&
        Objects.equals(this.workItemGlobalId, testPointResultApiResult.workItemGlobalId) &&
        Objects.equals(this.workItemName, testPointResultApiResult.workItemName) &&
        Objects.equals(this.configurationName, testPointResultApiResult.configurationName) &&
        Objects.equals(this.testResults, testPointResultApiResult.testResults);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(testPointId, aggregatedOutcome, aggregatedStatus, workItemGlobalId, workItemName, configurationName, testResults);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestPointResultApiResult {\n");
    sb.append("    testPointId: ").append(toIndentedString(testPointId)).append("\n");
    sb.append("    aggregatedOutcome: ").append(toIndentedString(aggregatedOutcome)).append("\n");
    sb.append("    aggregatedStatus: ").append(toIndentedString(aggregatedStatus)).append("\n");
    sb.append("    workItemGlobalId: ").append(toIndentedString(workItemGlobalId)).append("\n");
    sb.append("    workItemName: ").append(toIndentedString(workItemName)).append("\n");
    sb.append("    configurationName: ").append(toIndentedString(configurationName)).append("\n");
    sb.append("    testResults: ").append(toIndentedString(testResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("testPointId");
    openapiFields.add("aggregatedOutcome");
    openapiFields.add("aggregatedStatus");
    openapiFields.add("workItemGlobalId");
    openapiFields.add("workItemName");
    openapiFields.add("configurationName");
    openapiFields.add("testResults");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("testResults");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestPointResultApiResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestPointResultApiResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestPointResultApiResult is not found in the empty JSON string", TestPointResultApiResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestPointResultApiResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestPointResultApiResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TestPointResultApiResult.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("testPointId") != null && !jsonObj.get("testPointId").isJsonNull()) && !jsonObj.get("testPointId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testPointId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testPointId").toString()));
      }
      if ((jsonObj.get("aggregatedOutcome") != null && !jsonObj.get("aggregatedOutcome").isJsonNull()) && !jsonObj.get("aggregatedOutcome").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aggregatedOutcome` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aggregatedOutcome").toString()));
      }
      // validate the optional field `aggregatedStatus`
      if (jsonObj.get("aggregatedStatus") != null && !jsonObj.get("aggregatedStatus").isJsonNull()) {
        TestStatusApiResult.validateJsonElement(jsonObj.get("aggregatedStatus"));
      }
      if ((jsonObj.get("workItemName") != null && !jsonObj.get("workItemName").isJsonNull()) && !jsonObj.get("workItemName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workItemName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workItemName").toString()));
      }
      if ((jsonObj.get("configurationName") != null && !jsonObj.get("configurationName").isJsonNull()) && !jsonObj.get("configurationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configurationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configurationName").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("testResults").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `testResults` to be an array in the JSON string but got `%s`", jsonObj.get("testResults").toString()));
      }

      JsonArray jsonArraytestResults = jsonObj.getAsJsonArray("testResults");
      // validate the required field `testResults` (array)
      for (int i = 0; i < jsonArraytestResults.size(); i++) {
        TestResultShortApiResult.validateJsonElement(jsonArraytestResults.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestPointResultApiResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestPointResultApiResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestPointResultApiResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestPointResultApiResult.class));

       return (TypeAdapter<T>) new TypeAdapter<TestPointResultApiResult>() {
           @Override
           public void write(JsonWriter out, TestPointResultApiResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestPointResultApiResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestPointResultApiResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestPointResultApiResult
   * @throws IOException if the JSON string is invalid with respect to TestPointResultApiResult
   */
  public static TestPointResultApiResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestPointResultApiResult.class);
  }

  /**
   * Convert an instance of TestPointResultApiResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

