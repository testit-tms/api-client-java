/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import ru.testit.client.invoker.JSON;


/**
 * TestPointSelector
 */
@JsonPropertyOrder({
  TestPointSelector.JSON_PROPERTY_CONFIGURATION_ID,
  TestPointSelector.JSON_PROPERTY_WORK_ITEM_IDS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0")
public class TestPointSelector {
  public static final String JSON_PROPERTY_CONFIGURATION_ID = "configurationId";
  private UUID configurationId;

  public static final String JSON_PROPERTY_WORK_ITEM_IDS = "workItemIds";
  private List<UUID> workItemIds = new ArrayList<>();

  public TestPointSelector() { 
  }

  public TestPointSelector configurationId(UUID configurationId) {
    this.configurationId = configurationId;
    return this;
  }

  /**
   * Specifies the configuration GUIDs, from which test points are created. You can specify several GUIDs.
   * @return configurationId
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CONFIGURATION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getConfigurationId() {
    return configurationId;
  }


  @JsonProperty(JSON_PROPERTY_CONFIGURATION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConfigurationId(UUID configurationId) {
    this.configurationId = configurationId;
  }


  public TestPointSelector workItemIds(List<UUID> workItemIds) {
    this.workItemIds = workItemIds;
    return this;
  }

  public TestPointSelector addWorkItemIdsItem(UUID workItemIdsItem) {
    if (this.workItemIds == null) {
      this.workItemIds = new ArrayList<>();
    }
    this.workItemIds.add(workItemIdsItem);
    return this;
  }

  /**
   * Specifies the work item GUIDs, from which test points are created. You can specify several GUIDs.
   * @return workItemIds
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_WORK_ITEM_IDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<UUID> getWorkItemIds() {
    return workItemIds;
  }


  @JsonProperty(JSON_PROPERTY_WORK_ITEM_IDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setWorkItemIds(List<UUID> workItemIds) {
    this.workItemIds = workItemIds;
  }


  /**
   * Return true if this TestPointSelector object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestPointSelector testPointSelector = (TestPointSelector) o;
    return Objects.equals(this.configurationId, testPointSelector.configurationId) &&
        Objects.equals(this.workItemIds, testPointSelector.workItemIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(configurationId, workItemIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestPointSelector {\n");
    sb.append("    configurationId: ").append(toIndentedString(configurationId)).append("\n");
    sb.append("    workItemIds: ").append(toIndentedString(workItemIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

