/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import ru.testit.client.model.IterationModel;
import ru.testit.client.model.LastTestResultModel;
import ru.testit.client.model.TestStatusApiResult;
import ru.testit.client.model.WorkItemPriorityModel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import ru.testit.client.invoker.JSON;

/**
 * TestPointWithLastResultResponseModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0")
public class TestPointWithLastResultResponseModel {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_WORK_ITEM_NAME = "workItemName";
  @SerializedName(SERIALIZED_NAME_WORK_ITEM_NAME)
  private String workItemName;

  public static final String SERIALIZED_NAME_IS_AUTOMATED = "isAutomated";
  @SerializedName(SERIALIZED_NAME_IS_AUTOMATED)
  private Boolean isAutomated;

  public static final String SERIALIZED_NAME_TESTER_ID = "testerId";
  @SerializedName(SERIALIZED_NAME_TESTER_ID)
  private UUID testerId;

  public static final String SERIALIZED_NAME_WORK_ITEM_ID = "workItemId";
  @SerializedName(SERIALIZED_NAME_WORK_ITEM_ID)
  private UUID workItemId;

  public static final String SERIALIZED_NAME_CONFIGURATION_ID = "configurationId";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_ID)
  private UUID configurationId;

  public static final String SERIALIZED_NAME_TEST_SUITE_ID = "testSuiteId";
  @SerializedName(SERIALIZED_NAME_TEST_SUITE_ID)
  private UUID testSuiteId;

  public static final String SERIALIZED_NAME_LAST_TEST_RESULT = "lastTestResult";
  @SerializedName(SERIALIZED_NAME_LAST_TEST_RESULT)
  private LastTestResultModel lastTestResult;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_STATUS_MODEL = "statusModel";
  @SerializedName(SERIALIZED_NAME_STATUS_MODEL)
  private TestStatusApiResult statusModel;

  public static final String SERIALIZED_NAME_WORK_ITEM_GLOBAL_ID = "workItemGlobalId";
  @SerializedName(SERIALIZED_NAME_WORK_ITEM_GLOBAL_ID)
  private Long workItemGlobalId;

  public static final String SERIALIZED_NAME_WORK_ITEM_ENTITY_TYPE_NAME = "workItemEntityTypeName";
  @SerializedName(SERIALIZED_NAME_WORK_ITEM_ENTITY_TYPE_NAME)
  private String workItemEntityTypeName;

  public static final String SERIALIZED_NAME_SECTION_ID = "sectionId";
  @SerializedName(SERIALIZED_NAME_SECTION_ID)
  private UUID sectionId;

  public static final String SERIALIZED_NAME_SECTION_NAME = "sectionName";
  @SerializedName(SERIALIZED_NAME_SECTION_NAME)
  private String sectionName;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_MODIFIED_DATE = "modifiedDate";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE)
  private OffsetDateTime modifiedDate;

  public static final String SERIALIZED_NAME_CREATED_BY_ID = "createdById";
  @SerializedName(SERIALIZED_NAME_CREATED_BY_ID)
  private UUID createdById;

  public static final String SERIALIZED_NAME_MODIFIED_BY_ID = "modifiedById";
  @SerializedName(SERIALIZED_NAME_MODIFIED_BY_ID)
  private UUID modifiedById;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Map<String, Object> attributes;

  public static final String SERIALIZED_NAME_TAG_NAMES = "tagNames";
  @SerializedName(SERIALIZED_NAME_TAG_NAMES)
  private List<String> tagNames;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private WorkItemPriorityModel priority;

  public static final String SERIALIZED_NAME_TEST_SUITE_NAME_BREAD_CRUMBS = "testSuiteNameBreadCrumbs";
  @SerializedName(SERIALIZED_NAME_TEST_SUITE_NAME_BREAD_CRUMBS)
  private List<String> testSuiteNameBreadCrumbs;

  public static final String SERIALIZED_NAME_GROUP_COUNT = "groupCount";
  @SerializedName(SERIALIZED_NAME_GROUP_COUNT)
  private Integer groupCount;

  public static final String SERIALIZED_NAME_ITERATION = "iteration";
  @SerializedName(SERIALIZED_NAME_ITERATION)
  private IterationModel iteration;

  public TestPointWithLastResultResponseModel() {
  }

  public TestPointWithLastResultResponseModel id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public TestPointWithLastResultResponseModel workItemName(String workItemName) {
    this.workItemName = workItemName;
    return this;
  }

  /**
   * Get workItemName
   * @return workItemName
   */
  @javax.annotation.Nullable
  public String getWorkItemName() {
    return workItemName;
  }

  public void setWorkItemName(String workItemName) {
    this.workItemName = workItemName;
  }


  public TestPointWithLastResultResponseModel isAutomated(Boolean isAutomated) {
    this.isAutomated = isAutomated;
    return this;
  }

  /**
   * Get isAutomated
   * @return isAutomated
   */
  @javax.annotation.Nonnull
  public Boolean getIsAutomated() {
    return isAutomated;
  }

  public void setIsAutomated(Boolean isAutomated) {
    this.isAutomated = isAutomated;
  }


  public TestPointWithLastResultResponseModel testerId(UUID testerId) {
    this.testerId = testerId;
    return this;
  }

  /**
   * Get testerId
   * @return testerId
   */
  @javax.annotation.Nullable
  public UUID getTesterId() {
    return testerId;
  }

  public void setTesterId(UUID testerId) {
    this.testerId = testerId;
  }


  public TestPointWithLastResultResponseModel workItemId(UUID workItemId) {
    this.workItemId = workItemId;
    return this;
  }

  /**
   * Get workItemId
   * @return workItemId
   */
  @javax.annotation.Nonnull
  public UUID getWorkItemId() {
    return workItemId;
  }

  public void setWorkItemId(UUID workItemId) {
    this.workItemId = workItemId;
  }


  public TestPointWithLastResultResponseModel configurationId(UUID configurationId) {
    this.configurationId = configurationId;
    return this;
  }

  /**
   * Get configurationId
   * @return configurationId
   */
  @javax.annotation.Nullable
  public UUID getConfigurationId() {
    return configurationId;
  }

  public void setConfigurationId(UUID configurationId) {
    this.configurationId = configurationId;
  }


  public TestPointWithLastResultResponseModel testSuiteId(UUID testSuiteId) {
    this.testSuiteId = testSuiteId;
    return this;
  }

  /**
   * Get testSuiteId
   * @return testSuiteId
   */
  @javax.annotation.Nonnull
  public UUID getTestSuiteId() {
    return testSuiteId;
  }

  public void setTestSuiteId(UUID testSuiteId) {
    this.testSuiteId = testSuiteId;
  }


  public TestPointWithLastResultResponseModel lastTestResult(LastTestResultModel lastTestResult) {
    this.lastTestResult = lastTestResult;
    return this;
  }

  /**
   * Get lastTestResult
   * @return lastTestResult
   */
  @javax.annotation.Nullable
  public LastTestResultModel getLastTestResult() {
    return lastTestResult;
  }

  public void setLastTestResult(LastTestResultModel lastTestResult) {
    this.lastTestResult = lastTestResult;
  }


  @Deprecated
  public TestPointWithLastResultResponseModel status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  @Deprecated
  public void setStatus(String status) {
    this.status = status;
  }


  public TestPointWithLastResultResponseModel statusModel(TestStatusApiResult statusModel) {
    this.statusModel = statusModel;
    return this;
  }

  /**
   * Get statusModel
   * @return statusModel
   */
  @javax.annotation.Nullable
  public TestStatusApiResult getStatusModel() {
    return statusModel;
  }

  public void setStatusModel(TestStatusApiResult statusModel) {
    this.statusModel = statusModel;
  }


  public TestPointWithLastResultResponseModel workItemGlobalId(Long workItemGlobalId) {
    this.workItemGlobalId = workItemGlobalId;
    return this;
  }

  /**
   * Get workItemGlobalId
   * @return workItemGlobalId
   */
  @javax.annotation.Nullable
  public Long getWorkItemGlobalId() {
    return workItemGlobalId;
  }

  public void setWorkItemGlobalId(Long workItemGlobalId) {
    this.workItemGlobalId = workItemGlobalId;
  }


  public TestPointWithLastResultResponseModel workItemEntityTypeName(String workItemEntityTypeName) {
    this.workItemEntityTypeName = workItemEntityTypeName;
    return this;
  }

  /**
   * Get workItemEntityTypeName
   * @return workItemEntityTypeName
   */
  @javax.annotation.Nullable
  public String getWorkItemEntityTypeName() {
    return workItemEntityTypeName;
  }

  public void setWorkItemEntityTypeName(String workItemEntityTypeName) {
    this.workItemEntityTypeName = workItemEntityTypeName;
  }


  public TestPointWithLastResultResponseModel sectionId(UUID sectionId) {
    this.sectionId = sectionId;
    return this;
  }

  /**
   * Get sectionId
   * @return sectionId
   */
  @javax.annotation.Nonnull
  public UUID getSectionId() {
    return sectionId;
  }

  public void setSectionId(UUID sectionId) {
    this.sectionId = sectionId;
  }


  public TestPointWithLastResultResponseModel sectionName(String sectionName) {
    this.sectionName = sectionName;
    return this;
  }

  /**
   * Get sectionName
   * @return sectionName
   */
  @javax.annotation.Nullable
  public String getSectionName() {
    return sectionName;
  }

  public void setSectionName(String sectionName) {
    this.sectionName = sectionName;
  }


  public TestPointWithLastResultResponseModel createdDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Get createdDate
   * @return createdDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public TestPointWithLastResultResponseModel modifiedDate(OffsetDateTime modifiedDate) {
    this.modifiedDate = modifiedDate;
    return this;
  }

  /**
   * Get modifiedDate
   * @return modifiedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedDate() {
    return modifiedDate;
  }

  public void setModifiedDate(OffsetDateTime modifiedDate) {
    this.modifiedDate = modifiedDate;
  }


  public TestPointWithLastResultResponseModel createdById(UUID createdById) {
    this.createdById = createdById;
    return this;
  }

  /**
   * Get createdById
   * @return createdById
   */
  @javax.annotation.Nonnull
  public UUID getCreatedById() {
    return createdById;
  }

  public void setCreatedById(UUID createdById) {
    this.createdById = createdById;
  }


  public TestPointWithLastResultResponseModel modifiedById(UUID modifiedById) {
    this.modifiedById = modifiedById;
    return this;
  }

  /**
   * Get modifiedById
   * @return modifiedById
   */
  @javax.annotation.Nullable
  public UUID getModifiedById() {
    return modifiedById;
  }

  public void setModifiedById(UUID modifiedById) {
    this.modifiedById = modifiedById;
  }


  public TestPointWithLastResultResponseModel attributes(Map<String, Object> attributes) {
    this.attributes = attributes;
    return this;
  }

  public TestPointWithLastResultResponseModel putAttributesItem(String key, Object attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  public Map<String, Object> getAttributes() {
    return attributes;
  }

  public void setAttributes(Map<String, Object> attributes) {
    this.attributes = attributes;
  }


  public TestPointWithLastResultResponseModel tagNames(List<String> tagNames) {
    this.tagNames = tagNames;
    return this;
  }

  public TestPointWithLastResultResponseModel addTagNamesItem(String tagNamesItem) {
    if (this.tagNames == null) {
      this.tagNames = new ArrayList<>();
    }
    this.tagNames.add(tagNamesItem);
    return this;
  }

  /**
   * Get tagNames
   * @return tagNames
   */
  @javax.annotation.Nullable
  public List<String> getTagNames() {
    return tagNames;
  }

  public void setTagNames(List<String> tagNames) {
    this.tagNames = tagNames;
  }


  public TestPointWithLastResultResponseModel duration(Integer duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Get duration
   * @return duration
   */
  @javax.annotation.Nonnull
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(Integer duration) {
    this.duration = duration;
  }


  public TestPointWithLastResultResponseModel priority(WorkItemPriorityModel priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Get priority
   * @return priority
   */
  @javax.annotation.Nonnull
  public WorkItemPriorityModel getPriority() {
    return priority;
  }

  public void setPriority(WorkItemPriorityModel priority) {
    this.priority = priority;
  }


  public TestPointWithLastResultResponseModel testSuiteNameBreadCrumbs(List<String> testSuiteNameBreadCrumbs) {
    this.testSuiteNameBreadCrumbs = testSuiteNameBreadCrumbs;
    return this;
  }

  public TestPointWithLastResultResponseModel addTestSuiteNameBreadCrumbsItem(String testSuiteNameBreadCrumbsItem) {
    if (this.testSuiteNameBreadCrumbs == null) {
      this.testSuiteNameBreadCrumbs = new ArrayList<>();
    }
    this.testSuiteNameBreadCrumbs.add(testSuiteNameBreadCrumbsItem);
    return this;
  }

  /**
   * Get testSuiteNameBreadCrumbs
   * @return testSuiteNameBreadCrumbs
   */
  @javax.annotation.Nullable
  public List<String> getTestSuiteNameBreadCrumbs() {
    return testSuiteNameBreadCrumbs;
  }

  public void setTestSuiteNameBreadCrumbs(List<String> testSuiteNameBreadCrumbs) {
    this.testSuiteNameBreadCrumbs = testSuiteNameBreadCrumbs;
  }


  public TestPointWithLastResultResponseModel groupCount(Integer groupCount) {
    this.groupCount = groupCount;
    return this;
  }

  /**
   * Get groupCount
   * @return groupCount
   */
  @javax.annotation.Nullable
  public Integer getGroupCount() {
    return groupCount;
  }

  public void setGroupCount(Integer groupCount) {
    this.groupCount = groupCount;
  }


  public TestPointWithLastResultResponseModel iteration(IterationModel iteration) {
    this.iteration = iteration;
    return this;
  }

  /**
   * Get iteration
   * @return iteration
   */
  @javax.annotation.Nullable
  public IterationModel getIteration() {
    return iteration;
  }

  public void setIteration(IterationModel iteration) {
    this.iteration = iteration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestPointWithLastResultResponseModel testPointWithLastResultResponseModel = (TestPointWithLastResultResponseModel) o;
    return Objects.equals(this.id, testPointWithLastResultResponseModel.id) &&
        Objects.equals(this.workItemName, testPointWithLastResultResponseModel.workItemName) &&
        Objects.equals(this.isAutomated, testPointWithLastResultResponseModel.isAutomated) &&
        Objects.equals(this.testerId, testPointWithLastResultResponseModel.testerId) &&
        Objects.equals(this.workItemId, testPointWithLastResultResponseModel.workItemId) &&
        Objects.equals(this.configurationId, testPointWithLastResultResponseModel.configurationId) &&
        Objects.equals(this.testSuiteId, testPointWithLastResultResponseModel.testSuiteId) &&
        Objects.equals(this.lastTestResult, testPointWithLastResultResponseModel.lastTestResult) &&
        Objects.equals(this.status, testPointWithLastResultResponseModel.status) &&
        Objects.equals(this.statusModel, testPointWithLastResultResponseModel.statusModel) &&
        Objects.equals(this.workItemGlobalId, testPointWithLastResultResponseModel.workItemGlobalId) &&
        Objects.equals(this.workItemEntityTypeName, testPointWithLastResultResponseModel.workItemEntityTypeName) &&
        Objects.equals(this.sectionId, testPointWithLastResultResponseModel.sectionId) &&
        Objects.equals(this.sectionName, testPointWithLastResultResponseModel.sectionName) &&
        Objects.equals(this.createdDate, testPointWithLastResultResponseModel.createdDate) &&
        Objects.equals(this.modifiedDate, testPointWithLastResultResponseModel.modifiedDate) &&
        Objects.equals(this.createdById, testPointWithLastResultResponseModel.createdById) &&
        Objects.equals(this.modifiedById, testPointWithLastResultResponseModel.modifiedById) &&
        Objects.equals(this.attributes, testPointWithLastResultResponseModel.attributes) &&
        Objects.equals(this.tagNames, testPointWithLastResultResponseModel.tagNames) &&
        Objects.equals(this.duration, testPointWithLastResultResponseModel.duration) &&
        Objects.equals(this.priority, testPointWithLastResultResponseModel.priority) &&
        Objects.equals(this.testSuiteNameBreadCrumbs, testPointWithLastResultResponseModel.testSuiteNameBreadCrumbs) &&
        Objects.equals(this.groupCount, testPointWithLastResultResponseModel.groupCount) &&
        Objects.equals(this.iteration, testPointWithLastResultResponseModel.iteration);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, workItemName, isAutomated, testerId, workItemId, configurationId, testSuiteId, lastTestResult, status, statusModel, workItemGlobalId, workItemEntityTypeName, sectionId, sectionName, createdDate, modifiedDate, createdById, modifiedById, attributes, tagNames, duration, priority, testSuiteNameBreadCrumbs, groupCount, iteration);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestPointWithLastResultResponseModel {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    workItemName: ").append(toIndentedString(workItemName)).append("\n");
    sb.append("    isAutomated: ").append(toIndentedString(isAutomated)).append("\n");
    sb.append("    testerId: ").append(toIndentedString(testerId)).append("\n");
    sb.append("    workItemId: ").append(toIndentedString(workItemId)).append("\n");
    sb.append("    configurationId: ").append(toIndentedString(configurationId)).append("\n");
    sb.append("    testSuiteId: ").append(toIndentedString(testSuiteId)).append("\n");
    sb.append("    lastTestResult: ").append(toIndentedString(lastTestResult)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusModel: ").append(toIndentedString(statusModel)).append("\n");
    sb.append("    workItemGlobalId: ").append(toIndentedString(workItemGlobalId)).append("\n");
    sb.append("    workItemEntityTypeName: ").append(toIndentedString(workItemEntityTypeName)).append("\n");
    sb.append("    sectionId: ").append(toIndentedString(sectionId)).append("\n");
    sb.append("    sectionName: ").append(toIndentedString(sectionName)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("    createdById: ").append(toIndentedString(createdById)).append("\n");
    sb.append("    modifiedById: ").append(toIndentedString(modifiedById)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    tagNames: ").append(toIndentedString(tagNames)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    testSuiteNameBreadCrumbs: ").append(toIndentedString(testSuiteNameBreadCrumbs)).append("\n");
    sb.append("    groupCount: ").append(toIndentedString(groupCount)).append("\n");
    sb.append("    iteration: ").append(toIndentedString(iteration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("workItemName");
    openapiFields.add("isAutomated");
    openapiFields.add("testerId");
    openapiFields.add("workItemId");
    openapiFields.add("configurationId");
    openapiFields.add("testSuiteId");
    openapiFields.add("lastTestResult");
    openapiFields.add("status");
    openapiFields.add("statusModel");
    openapiFields.add("workItemGlobalId");
    openapiFields.add("workItemEntityTypeName");
    openapiFields.add("sectionId");
    openapiFields.add("sectionName");
    openapiFields.add("createdDate");
    openapiFields.add("modifiedDate");
    openapiFields.add("createdById");
    openapiFields.add("modifiedById");
    openapiFields.add("attributes");
    openapiFields.add("tagNames");
    openapiFields.add("duration");
    openapiFields.add("priority");
    openapiFields.add("testSuiteNameBreadCrumbs");
    openapiFields.add("groupCount");
    openapiFields.add("iteration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("isAutomated");
    openapiRequiredFields.add("workItemId");
    openapiRequiredFields.add("testSuiteId");
    openapiRequiredFields.add("sectionId");
    openapiRequiredFields.add("createdById");
    openapiRequiredFields.add("duration");
    openapiRequiredFields.add("priority");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestPointWithLastResultResponseModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestPointWithLastResultResponseModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestPointWithLastResultResponseModel is not found in the empty JSON string", TestPointWithLastResultResponseModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestPointWithLastResultResponseModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestPointWithLastResultResponseModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TestPointWithLastResultResponseModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("workItemName") != null && !jsonObj.get("workItemName").isJsonNull()) && !jsonObj.get("workItemName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workItemName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workItemName").toString()));
      }
      if ((jsonObj.get("testerId") != null && !jsonObj.get("testerId").isJsonNull()) && !jsonObj.get("testerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testerId").toString()));
      }
      if (!jsonObj.get("workItemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workItemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workItemId").toString()));
      }
      if ((jsonObj.get("configurationId") != null && !jsonObj.get("configurationId").isJsonNull()) && !jsonObj.get("configurationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configurationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configurationId").toString()));
      }
      if (!jsonObj.get("testSuiteId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testSuiteId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testSuiteId").toString()));
      }
      // validate the optional field `lastTestResult`
      if (jsonObj.get("lastTestResult") != null && !jsonObj.get("lastTestResult").isJsonNull()) {
        LastTestResultModel.validateJsonElement(jsonObj.get("lastTestResult"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `statusModel`
      if (jsonObj.get("statusModel") != null && !jsonObj.get("statusModel").isJsonNull()) {
        TestStatusApiResult.validateJsonElement(jsonObj.get("statusModel"));
      }
      if ((jsonObj.get("workItemEntityTypeName") != null && !jsonObj.get("workItemEntityTypeName").isJsonNull()) && !jsonObj.get("workItemEntityTypeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workItemEntityTypeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workItemEntityTypeName").toString()));
      }
      if (!jsonObj.get("sectionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sectionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sectionId").toString()));
      }
      if ((jsonObj.get("sectionName") != null && !jsonObj.get("sectionName").isJsonNull()) && !jsonObj.get("sectionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sectionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sectionName").toString()));
      }
      if (!jsonObj.get("createdById").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdById` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdById").toString()));
      }
      if ((jsonObj.get("modifiedById") != null && !jsonObj.get("modifiedById").isJsonNull()) && !jsonObj.get("modifiedById").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedById` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modifiedById").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tagNames") != null && !jsonObj.get("tagNames").isJsonNull() && !jsonObj.get("tagNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagNames` to be an array in the JSON string but got `%s`", jsonObj.get("tagNames").toString()));
      }
      // validate the required field `priority`
      WorkItemPriorityModel.validateJsonElement(jsonObj.get("priority"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("testSuiteNameBreadCrumbs") != null && !jsonObj.get("testSuiteNameBreadCrumbs").isJsonNull() && !jsonObj.get("testSuiteNameBreadCrumbs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `testSuiteNameBreadCrumbs` to be an array in the JSON string but got `%s`", jsonObj.get("testSuiteNameBreadCrumbs").toString()));
      }
      // validate the optional field `iteration`
      if (jsonObj.get("iteration") != null && !jsonObj.get("iteration").isJsonNull()) {
        IterationModel.validateJsonElement(jsonObj.get("iteration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestPointWithLastResultResponseModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestPointWithLastResultResponseModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestPointWithLastResultResponseModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestPointWithLastResultResponseModel.class));

       return (TypeAdapter<T>) new TypeAdapter<TestPointWithLastResultResponseModel>() {
           @Override
           public void write(JsonWriter out, TestPointWithLastResultResponseModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestPointWithLastResultResponseModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestPointWithLastResultResponseModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestPointWithLastResultResponseModel
   * @throws IOException if the JSON string is invalid with respect to TestPointWithLastResultResponseModel
   */
  public static TestPointWithLastResultResponseModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestPointWithLastResultResponseModel.class);
  }

  /**
   * Convert an instance of TestPointWithLastResultResponseModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

