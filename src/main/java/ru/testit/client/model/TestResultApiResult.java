/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import ru.testit.client.model.AttachmentApiResult;
import ru.testit.client.model.AutoTestModel;
import ru.testit.client.model.AutoTestStepResultsApiResult;
import ru.testit.client.model.LinkApiResult;
import ru.testit.client.model.StepCommentApiResult;
import ru.testit.client.model.TestPointShortApiResult;
import ru.testit.client.model.TestResultFailureClassApiResult;
import ru.testit.client.model.TestStatusApiResult;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import ru.testit.client.invoker.JSON;

/**
 * TestResultApiResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class TestResultApiResult {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private UUID id;

  public static final String SERIALIZED_NAME_STARTED_ON = "startedOn";
  @SerializedName(SERIALIZED_NAME_STARTED_ON)
  @javax.annotation.Nullable
  private OffsetDateTime startedOn;

  public static final String SERIALIZED_NAME_COMPLETED_ON = "completedOn";
  @SerializedName(SERIALIZED_NAME_COMPLETED_ON)
  @javax.annotation.Nullable
  private OffsetDateTime completedOn;

  public static final String SERIALIZED_NAME_DURATION_IN_MS = "durationInMs";
  @SerializedName(SERIALIZED_NAME_DURATION_IN_MS)
  @javax.annotation.Nullable
  private Long durationInMs;

  public static final String SERIALIZED_NAME_TRACES = "traces";
  @SerializedName(SERIALIZED_NAME_TRACES)
  @javax.annotation.Nullable
  private String traces;

  public static final String SERIALIZED_NAME_FAILURE_TYPE = "failureType";
  @SerializedName(SERIALIZED_NAME_FAILURE_TYPE)
  @javax.annotation.Nullable
  private String failureType;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  @javax.annotation.Nullable
  private String message;

  public static final String SERIALIZED_NAME_RUN_BY_USER_ID = "runByUserId";
  @SerializedName(SERIALIZED_NAME_RUN_BY_USER_ID)
  @javax.annotation.Nullable
  private UUID runByUserId;

  public static final String SERIALIZED_NAME_STOPPED_BY_USER_ID = "stoppedByUserId";
  @SerializedName(SERIALIZED_NAME_STOPPED_BY_USER_ID)
  @javax.annotation.Nullable
  private UUID stoppedByUserId;

  public static final String SERIALIZED_NAME_OUTCOME = "outcome";
  @SerializedName(SERIALIZED_NAME_OUTCOME)
  @javax.annotation.Nonnull
  private String outcome;

  public static final String SERIALIZED_NAME_AUTO_TEST_ID = "autoTestId";
  @SerializedName(SERIALIZED_NAME_AUTO_TEST_ID)
  @javax.annotation.Nullable
  private UUID autoTestId;

  public static final String SERIALIZED_NAME_TEST_POINT_ID = "testPointId";
  @SerializedName(SERIALIZED_NAME_TEST_POINT_ID)
  @javax.annotation.Nullable
  private UUID testPointId;

  public static final String SERIALIZED_NAME_TEST_RUN_ID = "testRunId";
  @SerializedName(SERIALIZED_NAME_TEST_RUN_ID)
  @javax.annotation.Nonnull
  private UUID testRunId;

  public static final String SERIALIZED_NAME_CONFIGURATION_ID = "configurationId";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_ID)
  @javax.annotation.Nonnull
  private UUID configurationId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private TestStatusApiResult status;

  public static final String SERIALIZED_NAME_TEST_POINT = "testPoint";
  @SerializedName(SERIALIZED_NAME_TEST_POINT)
  @javax.annotation.Nullable
  private TestPointShortApiResult testPoint;

  public static final String SERIALIZED_NAME_AUTO_TEST = "autoTest";
  @SerializedName(SERIALIZED_NAME_AUTO_TEST)
  @javax.annotation.Nullable
  private AutoTestModel autoTest;

  public static final String SERIALIZED_NAME_AUTO_TEST_STEP_RESULTS = "autoTestStepResults";
  @SerializedName(SERIALIZED_NAME_AUTO_TEST_STEP_RESULTS)
  @javax.annotation.Nullable
  private List<AutoTestStepResultsApiResult> autoTestStepResults;

  public static final String SERIALIZED_NAME_SETUP_RESULTS = "setupResults";
  @SerializedName(SERIALIZED_NAME_SETUP_RESULTS)
  @javax.annotation.Nullable
  private List<AutoTestStepResultsApiResult> setupResults;

  public static final String SERIALIZED_NAME_TEARDOWN_RESULTS = "teardownResults";
  @SerializedName(SERIALIZED_NAME_TEARDOWN_RESULTS)
  @javax.annotation.Nullable
  private List<AutoTestStepResultsApiResult> teardownResults;

  public static final String SERIALIZED_NAME_WORK_ITEM_VERSION_ID = "workItemVersionId";
  @SerializedName(SERIALIZED_NAME_WORK_ITEM_VERSION_ID)
  @javax.annotation.Nullable
  private UUID workItemVersionId;

  public static final String SERIALIZED_NAME_WORK_ITEM_VERSION_NUMBER = "workItemVersionNumber";
  @SerializedName(SERIALIZED_NAME_WORK_ITEM_VERSION_NUMBER)
  @javax.annotation.Nullable
  private Integer workItemVersionNumber;

  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  @javax.annotation.Nonnull
  private List<AttachmentApiResult> attachments = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  @javax.annotation.Nonnull
  private List<LinkApiResult> links = new ArrayList<>();

  public static final String SERIALIZED_NAME_FAILURE_CLASSES = "failureClasses";
  @SerializedName(SERIALIZED_NAME_FAILURE_CLASSES)
  @javax.annotation.Nonnull
  private List<TestResultFailureClassApiResult> failureClasses = new ArrayList<>();

  public static final String SERIALIZED_NAME_STEP_COMMENTS = "stepComments";
  @SerializedName(SERIALIZED_NAME_STEP_COMMENTS)
  @javax.annotation.Nullable
  private List<StepCommentApiResult> stepComments;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  @javax.annotation.Nullable
  private Map<String, String> parameters;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  @javax.annotation.Nullable
  private Map<String, String> properties;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  @javax.annotation.Nonnull
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_MODIFIED_DATE = "modifiedDate";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime modifiedDate;

  public static final String SERIALIZED_NAME_CREATED_BY_ID = "createdById";
  @SerializedName(SERIALIZED_NAME_CREATED_BY_ID)
  @javax.annotation.Nonnull
  private UUID createdById;

  public static final String SERIALIZED_NAME_MODIFIED_BY_ID = "modifiedById";
  @SerializedName(SERIALIZED_NAME_MODIFIED_BY_ID)
  @javax.annotation.Nullable
  private UUID modifiedById;

  public static final String SERIALIZED_NAME_IS_DELETED = "isDeleted";
  @SerializedName(SERIALIZED_NAME_IS_DELETED)
  @javax.annotation.Nonnull
  private Boolean isDeleted;

  public TestResultApiResult() {
  }

  public TestResultApiResult id(@javax.annotation.Nonnull UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull UUID id) {
    this.id = id;
  }


  public TestResultApiResult startedOn(@javax.annotation.Nullable OffsetDateTime startedOn) {
    this.startedOn = startedOn;
    return this;
  }

  /**
   * Get startedOn
   * @return startedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartedOn() {
    return startedOn;
  }

  public void setStartedOn(@javax.annotation.Nullable OffsetDateTime startedOn) {
    this.startedOn = startedOn;
  }


  public TestResultApiResult completedOn(@javax.annotation.Nullable OffsetDateTime completedOn) {
    this.completedOn = completedOn;
    return this;
  }

  /**
   * Get completedOn
   * @return completedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCompletedOn() {
    return completedOn;
  }

  public void setCompletedOn(@javax.annotation.Nullable OffsetDateTime completedOn) {
    this.completedOn = completedOn;
  }


  public TestResultApiResult durationInMs(@javax.annotation.Nullable Long durationInMs) {
    this.durationInMs = durationInMs;
    return this;
  }

  /**
   * Get durationInMs
   * @return durationInMs
   */
  @javax.annotation.Nullable
  public Long getDurationInMs() {
    return durationInMs;
  }

  public void setDurationInMs(@javax.annotation.Nullable Long durationInMs) {
    this.durationInMs = durationInMs;
  }


  public TestResultApiResult traces(@javax.annotation.Nullable String traces) {
    this.traces = traces;
    return this;
  }

  /**
   * Get traces
   * @return traces
   */
  @javax.annotation.Nullable
  public String getTraces() {
    return traces;
  }

  public void setTraces(@javax.annotation.Nullable String traces) {
    this.traces = traces;
  }


  public TestResultApiResult failureType(@javax.annotation.Nullable String failureType) {
    this.failureType = failureType;
    return this;
  }

  /**
   * Get failureType
   * @return failureType
   */
  @javax.annotation.Nullable
  public String getFailureType() {
    return failureType;
  }

  public void setFailureType(@javax.annotation.Nullable String failureType) {
    this.failureType = failureType;
  }


  public TestResultApiResult message(@javax.annotation.Nullable String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(@javax.annotation.Nullable String message) {
    this.message = message;
  }


  public TestResultApiResult runByUserId(@javax.annotation.Nullable UUID runByUserId) {
    this.runByUserId = runByUserId;
    return this;
  }

  /**
   * Get runByUserId
   * @return runByUserId
   */
  @javax.annotation.Nullable
  public UUID getRunByUserId() {
    return runByUserId;
  }

  public void setRunByUserId(@javax.annotation.Nullable UUID runByUserId) {
    this.runByUserId = runByUserId;
  }


  public TestResultApiResult stoppedByUserId(@javax.annotation.Nullable UUID stoppedByUserId) {
    this.stoppedByUserId = stoppedByUserId;
    return this;
  }

  /**
   * Get stoppedByUserId
   * @return stoppedByUserId
   */
  @javax.annotation.Nullable
  public UUID getStoppedByUserId() {
    return stoppedByUserId;
  }

  public void setStoppedByUserId(@javax.annotation.Nullable UUID stoppedByUserId) {
    this.stoppedByUserId = stoppedByUserId;
  }


  public TestResultApiResult outcome(@javax.annotation.Nonnull String outcome) {
    this.outcome = outcome;
    return this;
  }

  /**
   * Get outcome
   * @return outcome
   */
  @javax.annotation.Nonnull
  public String getOutcome() {
    return outcome;
  }

  public void setOutcome(@javax.annotation.Nonnull String outcome) {
    this.outcome = outcome;
  }


  public TestResultApiResult autoTestId(@javax.annotation.Nullable UUID autoTestId) {
    this.autoTestId = autoTestId;
    return this;
  }

  /**
   * Get autoTestId
   * @return autoTestId
   */
  @javax.annotation.Nullable
  public UUID getAutoTestId() {
    return autoTestId;
  }

  public void setAutoTestId(@javax.annotation.Nullable UUID autoTestId) {
    this.autoTestId = autoTestId;
  }


  public TestResultApiResult testPointId(@javax.annotation.Nullable UUID testPointId) {
    this.testPointId = testPointId;
    return this;
  }

  /**
   * Get testPointId
   * @return testPointId
   */
  @javax.annotation.Nullable
  public UUID getTestPointId() {
    return testPointId;
  }

  public void setTestPointId(@javax.annotation.Nullable UUID testPointId) {
    this.testPointId = testPointId;
  }


  public TestResultApiResult testRunId(@javax.annotation.Nonnull UUID testRunId) {
    this.testRunId = testRunId;
    return this;
  }

  /**
   * Get testRunId
   * @return testRunId
   */
  @javax.annotation.Nonnull
  public UUID getTestRunId() {
    return testRunId;
  }

  public void setTestRunId(@javax.annotation.Nonnull UUID testRunId) {
    this.testRunId = testRunId;
  }


  public TestResultApiResult configurationId(@javax.annotation.Nonnull UUID configurationId) {
    this.configurationId = configurationId;
    return this;
  }

  /**
   * Get configurationId
   * @return configurationId
   */
  @javax.annotation.Nonnull
  public UUID getConfigurationId() {
    return configurationId;
  }

  public void setConfigurationId(@javax.annotation.Nonnull UUID configurationId) {
    this.configurationId = configurationId;
  }


  public TestResultApiResult status(@javax.annotation.Nonnull TestStatusApiResult status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public TestStatusApiResult getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull TestStatusApiResult status) {
    this.status = status;
  }


  public TestResultApiResult testPoint(@javax.annotation.Nullable TestPointShortApiResult testPoint) {
    this.testPoint = testPoint;
    return this;
  }

  /**
   * Get testPoint
   * @return testPoint
   */
  @javax.annotation.Nullable
  public TestPointShortApiResult getTestPoint() {
    return testPoint;
  }

  public void setTestPoint(@javax.annotation.Nullable TestPointShortApiResult testPoint) {
    this.testPoint = testPoint;
  }


  public TestResultApiResult autoTest(@javax.annotation.Nullable AutoTestModel autoTest) {
    this.autoTest = autoTest;
    return this;
  }

  /**
   * Get autoTest
   * @return autoTest
   */
  @javax.annotation.Nullable
  public AutoTestModel getAutoTest() {
    return autoTest;
  }

  public void setAutoTest(@javax.annotation.Nullable AutoTestModel autoTest) {
    this.autoTest = autoTest;
  }


  public TestResultApiResult autoTestStepResults(@javax.annotation.Nullable List<AutoTestStepResultsApiResult> autoTestStepResults) {
    this.autoTestStepResults = autoTestStepResults;
    return this;
  }

  public TestResultApiResult addAutoTestStepResultsItem(AutoTestStepResultsApiResult autoTestStepResultsItem) {
    if (this.autoTestStepResults == null) {
      this.autoTestStepResults = new ArrayList<>();
    }
    this.autoTestStepResults.add(autoTestStepResultsItem);
    return this;
  }

  /**
   * Get autoTestStepResults
   * @return autoTestStepResults
   */
  @javax.annotation.Nullable
  public List<AutoTestStepResultsApiResult> getAutoTestStepResults() {
    return autoTestStepResults;
  }

  public void setAutoTestStepResults(@javax.annotation.Nullable List<AutoTestStepResultsApiResult> autoTestStepResults) {
    this.autoTestStepResults = autoTestStepResults;
  }


  public TestResultApiResult setupResults(@javax.annotation.Nullable List<AutoTestStepResultsApiResult> setupResults) {
    this.setupResults = setupResults;
    return this;
  }

  public TestResultApiResult addSetupResultsItem(AutoTestStepResultsApiResult setupResultsItem) {
    if (this.setupResults == null) {
      this.setupResults = new ArrayList<>();
    }
    this.setupResults.add(setupResultsItem);
    return this;
  }

  /**
   * Get setupResults
   * @return setupResults
   */
  @javax.annotation.Nullable
  public List<AutoTestStepResultsApiResult> getSetupResults() {
    return setupResults;
  }

  public void setSetupResults(@javax.annotation.Nullable List<AutoTestStepResultsApiResult> setupResults) {
    this.setupResults = setupResults;
  }


  public TestResultApiResult teardownResults(@javax.annotation.Nullable List<AutoTestStepResultsApiResult> teardownResults) {
    this.teardownResults = teardownResults;
    return this;
  }

  public TestResultApiResult addTeardownResultsItem(AutoTestStepResultsApiResult teardownResultsItem) {
    if (this.teardownResults == null) {
      this.teardownResults = new ArrayList<>();
    }
    this.teardownResults.add(teardownResultsItem);
    return this;
  }

  /**
   * Get teardownResults
   * @return teardownResults
   */
  @javax.annotation.Nullable
  public List<AutoTestStepResultsApiResult> getTeardownResults() {
    return teardownResults;
  }

  public void setTeardownResults(@javax.annotation.Nullable List<AutoTestStepResultsApiResult> teardownResults) {
    this.teardownResults = teardownResults;
  }


  public TestResultApiResult workItemVersionId(@javax.annotation.Nullable UUID workItemVersionId) {
    this.workItemVersionId = workItemVersionId;
    return this;
  }

  /**
   * Get workItemVersionId
   * @return workItemVersionId
   */
  @javax.annotation.Nullable
  public UUID getWorkItemVersionId() {
    return workItemVersionId;
  }

  public void setWorkItemVersionId(@javax.annotation.Nullable UUID workItemVersionId) {
    this.workItemVersionId = workItemVersionId;
  }


  public TestResultApiResult workItemVersionNumber(@javax.annotation.Nullable Integer workItemVersionNumber) {
    this.workItemVersionNumber = workItemVersionNumber;
    return this;
  }

  /**
   * Get workItemVersionNumber
   * @return workItemVersionNumber
   */
  @javax.annotation.Nullable
  public Integer getWorkItemVersionNumber() {
    return workItemVersionNumber;
  }

  public void setWorkItemVersionNumber(@javax.annotation.Nullable Integer workItemVersionNumber) {
    this.workItemVersionNumber = workItemVersionNumber;
  }


  public TestResultApiResult attachments(@javax.annotation.Nonnull List<AttachmentApiResult> attachments) {
    this.attachments = attachments;
    return this;
  }

  public TestResultApiResult addAttachmentsItem(AttachmentApiResult attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * Get attachments
   * @return attachments
   */
  @javax.annotation.Nonnull
  public List<AttachmentApiResult> getAttachments() {
    return attachments;
  }

  public void setAttachments(@javax.annotation.Nonnull List<AttachmentApiResult> attachments) {
    this.attachments = attachments;
  }


  public TestResultApiResult links(@javax.annotation.Nonnull List<LinkApiResult> links) {
    this.links = links;
    return this;
  }

  public TestResultApiResult addLinksItem(LinkApiResult linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nonnull
  public List<LinkApiResult> getLinks() {
    return links;
  }

  public void setLinks(@javax.annotation.Nonnull List<LinkApiResult> links) {
    this.links = links;
  }


  public TestResultApiResult failureClasses(@javax.annotation.Nonnull List<TestResultFailureClassApiResult> failureClasses) {
    this.failureClasses = failureClasses;
    return this;
  }

  public TestResultApiResult addFailureClassesItem(TestResultFailureClassApiResult failureClassesItem) {
    if (this.failureClasses == null) {
      this.failureClasses = new ArrayList<>();
    }
    this.failureClasses.add(failureClassesItem);
    return this;
  }

  /**
   * Get failureClasses
   * @return failureClasses
   */
  @javax.annotation.Nonnull
  public List<TestResultFailureClassApiResult> getFailureClasses() {
    return failureClasses;
  }

  public void setFailureClasses(@javax.annotation.Nonnull List<TestResultFailureClassApiResult> failureClasses) {
    this.failureClasses = failureClasses;
  }


  public TestResultApiResult stepComments(@javax.annotation.Nullable List<StepCommentApiResult> stepComments) {
    this.stepComments = stepComments;
    return this;
  }

  public TestResultApiResult addStepCommentsItem(StepCommentApiResult stepCommentsItem) {
    if (this.stepComments == null) {
      this.stepComments = new ArrayList<>();
    }
    this.stepComments.add(stepCommentsItem);
    return this;
  }

  /**
   * Get stepComments
   * @return stepComments
   */
  @javax.annotation.Nullable
  public List<StepCommentApiResult> getStepComments() {
    return stepComments;
  }

  public void setStepComments(@javax.annotation.Nullable List<StepCommentApiResult> stepComments) {
    this.stepComments = stepComments;
  }


  public TestResultApiResult parameters(@javax.annotation.Nullable Map<String, String> parameters) {
    this.parameters = parameters;
    return this;
  }

  public TestResultApiResult putParametersItem(String key, String parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

  /**
   * Get parameters
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map<String, String> getParameters() {
    return parameters;
  }

  public void setParameters(@javax.annotation.Nullable Map<String, String> parameters) {
    this.parameters = parameters;
  }


  public TestResultApiResult properties(@javax.annotation.Nullable Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public TestResultApiResult putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * Get properties
   * @return properties
   */
  @javax.annotation.Nullable
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(@javax.annotation.Nullable Map<String, String> properties) {
    this.properties = properties;
  }


  public TestResultApiResult createdDate(@javax.annotation.Nonnull OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Get createdDate
   * @return createdDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(@javax.annotation.Nonnull OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public TestResultApiResult modifiedDate(@javax.annotation.Nullable OffsetDateTime modifiedDate) {
    this.modifiedDate = modifiedDate;
    return this;
  }

  /**
   * Get modifiedDate
   * @return modifiedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedDate() {
    return modifiedDate;
  }

  public void setModifiedDate(@javax.annotation.Nullable OffsetDateTime modifiedDate) {
    this.modifiedDate = modifiedDate;
  }


  public TestResultApiResult createdById(@javax.annotation.Nonnull UUID createdById) {
    this.createdById = createdById;
    return this;
  }

  /**
   * Get createdById
   * @return createdById
   */
  @javax.annotation.Nonnull
  public UUID getCreatedById() {
    return createdById;
  }

  public void setCreatedById(@javax.annotation.Nonnull UUID createdById) {
    this.createdById = createdById;
  }


  public TestResultApiResult modifiedById(@javax.annotation.Nullable UUID modifiedById) {
    this.modifiedById = modifiedById;
    return this;
  }

  /**
   * Get modifiedById
   * @return modifiedById
   */
  @javax.annotation.Nullable
  public UUID getModifiedById() {
    return modifiedById;
  }

  public void setModifiedById(@javax.annotation.Nullable UUID modifiedById) {
    this.modifiedById = modifiedById;
  }


  public TestResultApiResult isDeleted(@javax.annotation.Nonnull Boolean isDeleted) {
    this.isDeleted = isDeleted;
    return this;
  }

  /**
   * Get isDeleted
   * @return isDeleted
   */
  @javax.annotation.Nonnull
  public Boolean getIsDeleted() {
    return isDeleted;
  }

  public void setIsDeleted(@javax.annotation.Nonnull Boolean isDeleted) {
    this.isDeleted = isDeleted;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestResultApiResult testResultApiResult = (TestResultApiResult) o;
    return Objects.equals(this.id, testResultApiResult.id) &&
        Objects.equals(this.startedOn, testResultApiResult.startedOn) &&
        Objects.equals(this.completedOn, testResultApiResult.completedOn) &&
        Objects.equals(this.durationInMs, testResultApiResult.durationInMs) &&
        Objects.equals(this.traces, testResultApiResult.traces) &&
        Objects.equals(this.failureType, testResultApiResult.failureType) &&
        Objects.equals(this.message, testResultApiResult.message) &&
        Objects.equals(this.runByUserId, testResultApiResult.runByUserId) &&
        Objects.equals(this.stoppedByUserId, testResultApiResult.stoppedByUserId) &&
        Objects.equals(this.outcome, testResultApiResult.outcome) &&
        Objects.equals(this.autoTestId, testResultApiResult.autoTestId) &&
        Objects.equals(this.testPointId, testResultApiResult.testPointId) &&
        Objects.equals(this.testRunId, testResultApiResult.testRunId) &&
        Objects.equals(this.configurationId, testResultApiResult.configurationId) &&
        Objects.equals(this.status, testResultApiResult.status) &&
        Objects.equals(this.testPoint, testResultApiResult.testPoint) &&
        Objects.equals(this.autoTest, testResultApiResult.autoTest) &&
        Objects.equals(this.autoTestStepResults, testResultApiResult.autoTestStepResults) &&
        Objects.equals(this.setupResults, testResultApiResult.setupResults) &&
        Objects.equals(this.teardownResults, testResultApiResult.teardownResults) &&
        Objects.equals(this.workItemVersionId, testResultApiResult.workItemVersionId) &&
        Objects.equals(this.workItemVersionNumber, testResultApiResult.workItemVersionNumber) &&
        Objects.equals(this.attachments, testResultApiResult.attachments) &&
        Objects.equals(this.links, testResultApiResult.links) &&
        Objects.equals(this.failureClasses, testResultApiResult.failureClasses) &&
        Objects.equals(this.stepComments, testResultApiResult.stepComments) &&
        Objects.equals(this.parameters, testResultApiResult.parameters) &&
        Objects.equals(this.properties, testResultApiResult.properties) &&
        Objects.equals(this.createdDate, testResultApiResult.createdDate) &&
        Objects.equals(this.modifiedDate, testResultApiResult.modifiedDate) &&
        Objects.equals(this.createdById, testResultApiResult.createdById) &&
        Objects.equals(this.modifiedById, testResultApiResult.modifiedById) &&
        Objects.equals(this.isDeleted, testResultApiResult.isDeleted);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, startedOn, completedOn, durationInMs, traces, failureType, message, runByUserId, stoppedByUserId, outcome, autoTestId, testPointId, testRunId, configurationId, status, testPoint, autoTest, autoTestStepResults, setupResults, teardownResults, workItemVersionId, workItemVersionNumber, attachments, links, failureClasses, stepComments, parameters, properties, createdDate, modifiedDate, createdById, modifiedById, isDeleted);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestResultApiResult {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    startedOn: ").append(toIndentedString(startedOn)).append("\n");
    sb.append("    completedOn: ").append(toIndentedString(completedOn)).append("\n");
    sb.append("    durationInMs: ").append(toIndentedString(durationInMs)).append("\n");
    sb.append("    traces: ").append(toIndentedString(traces)).append("\n");
    sb.append("    failureType: ").append(toIndentedString(failureType)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    runByUserId: ").append(toIndentedString(runByUserId)).append("\n");
    sb.append("    stoppedByUserId: ").append(toIndentedString(stoppedByUserId)).append("\n");
    sb.append("    outcome: ").append(toIndentedString(outcome)).append("\n");
    sb.append("    autoTestId: ").append(toIndentedString(autoTestId)).append("\n");
    sb.append("    testPointId: ").append(toIndentedString(testPointId)).append("\n");
    sb.append("    testRunId: ").append(toIndentedString(testRunId)).append("\n");
    sb.append("    configurationId: ").append(toIndentedString(configurationId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    testPoint: ").append(toIndentedString(testPoint)).append("\n");
    sb.append("    autoTest: ").append(toIndentedString(autoTest)).append("\n");
    sb.append("    autoTestStepResults: ").append(toIndentedString(autoTestStepResults)).append("\n");
    sb.append("    setupResults: ").append(toIndentedString(setupResults)).append("\n");
    sb.append("    teardownResults: ").append(toIndentedString(teardownResults)).append("\n");
    sb.append("    workItemVersionId: ").append(toIndentedString(workItemVersionId)).append("\n");
    sb.append("    workItemVersionNumber: ").append(toIndentedString(workItemVersionNumber)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    failureClasses: ").append(toIndentedString(failureClasses)).append("\n");
    sb.append("    stepComments: ").append(toIndentedString(stepComments)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("    createdById: ").append(toIndentedString(createdById)).append("\n");
    sb.append("    modifiedById: ").append(toIndentedString(modifiedById)).append("\n");
    sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("startedOn");
    openapiFields.add("completedOn");
    openapiFields.add("durationInMs");
    openapiFields.add("traces");
    openapiFields.add("failureType");
    openapiFields.add("message");
    openapiFields.add("runByUserId");
    openapiFields.add("stoppedByUserId");
    openapiFields.add("outcome");
    openapiFields.add("autoTestId");
    openapiFields.add("testPointId");
    openapiFields.add("testRunId");
    openapiFields.add("configurationId");
    openapiFields.add("status");
    openapiFields.add("testPoint");
    openapiFields.add("autoTest");
    openapiFields.add("autoTestStepResults");
    openapiFields.add("setupResults");
    openapiFields.add("teardownResults");
    openapiFields.add("workItemVersionId");
    openapiFields.add("workItemVersionNumber");
    openapiFields.add("attachments");
    openapiFields.add("links");
    openapiFields.add("failureClasses");
    openapiFields.add("stepComments");
    openapiFields.add("parameters");
    openapiFields.add("properties");
    openapiFields.add("createdDate");
    openapiFields.add("modifiedDate");
    openapiFields.add("createdById");
    openapiFields.add("modifiedById");
    openapiFields.add("isDeleted");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("outcome");
    openapiRequiredFields.add("testRunId");
    openapiRequiredFields.add("configurationId");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("attachments");
    openapiRequiredFields.add("links");
    openapiRequiredFields.add("failureClasses");
    openapiRequiredFields.add("createdDate");
    openapiRequiredFields.add("createdById");
    openapiRequiredFields.add("isDeleted");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestResultApiResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestResultApiResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestResultApiResult is not found in the empty JSON string", TestResultApiResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestResultApiResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestResultApiResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TestResultApiResult.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("traces") != null && !jsonObj.get("traces").isJsonNull()) && !jsonObj.get("traces").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `traces` to be a primitive type in the JSON string but got `%s`", jsonObj.get("traces").toString()));
      }
      if ((jsonObj.get("failureType") != null && !jsonObj.get("failureType").isJsonNull()) && !jsonObj.get("failureType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failureType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failureType").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("runByUserId") != null && !jsonObj.get("runByUserId").isJsonNull()) && !jsonObj.get("runByUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runByUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runByUserId").toString()));
      }
      if ((jsonObj.get("stoppedByUserId") != null && !jsonObj.get("stoppedByUserId").isJsonNull()) && !jsonObj.get("stoppedByUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stoppedByUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stoppedByUserId").toString()));
      }
      if (!jsonObj.get("outcome").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outcome` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outcome").toString()));
      }
      if ((jsonObj.get("autoTestId") != null && !jsonObj.get("autoTestId").isJsonNull()) && !jsonObj.get("autoTestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoTestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autoTestId").toString()));
      }
      if ((jsonObj.get("testPointId") != null && !jsonObj.get("testPointId").isJsonNull()) && !jsonObj.get("testPointId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testPointId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testPointId").toString()));
      }
      if (!jsonObj.get("testRunId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testRunId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testRunId").toString()));
      }
      if (!jsonObj.get("configurationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configurationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configurationId").toString()));
      }
      // validate the required field `status`
      TestStatusApiResult.validateJsonElement(jsonObj.get("status"));
      // validate the optional field `testPoint`
      if (jsonObj.get("testPoint") != null && !jsonObj.get("testPoint").isJsonNull()) {
        TestPointShortApiResult.validateJsonElement(jsonObj.get("testPoint"));
      }
      // validate the optional field `autoTest`
      if (jsonObj.get("autoTest") != null && !jsonObj.get("autoTest").isJsonNull()) {
        AutoTestModel.validateJsonElement(jsonObj.get("autoTest"));
      }
      if (jsonObj.get("autoTestStepResults") != null && !jsonObj.get("autoTestStepResults").isJsonNull()) {
        JsonArray jsonArrayautoTestStepResults = jsonObj.getAsJsonArray("autoTestStepResults");
        if (jsonArrayautoTestStepResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("autoTestStepResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `autoTestStepResults` to be an array in the JSON string but got `%s`", jsonObj.get("autoTestStepResults").toString()));
          }

          // validate the optional field `autoTestStepResults` (array)
          for (int i = 0; i < jsonArrayautoTestStepResults.size(); i++) {
            AutoTestStepResultsApiResult.validateJsonElement(jsonArrayautoTestStepResults.get(i));
          };
        }
      }
      if (jsonObj.get("setupResults") != null && !jsonObj.get("setupResults").isJsonNull()) {
        JsonArray jsonArraysetupResults = jsonObj.getAsJsonArray("setupResults");
        if (jsonArraysetupResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("setupResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `setupResults` to be an array in the JSON string but got `%s`", jsonObj.get("setupResults").toString()));
          }

          // validate the optional field `setupResults` (array)
          for (int i = 0; i < jsonArraysetupResults.size(); i++) {
            AutoTestStepResultsApiResult.validateJsonElement(jsonArraysetupResults.get(i));
          };
        }
      }
      if (jsonObj.get("teardownResults") != null && !jsonObj.get("teardownResults").isJsonNull()) {
        JsonArray jsonArrayteardownResults = jsonObj.getAsJsonArray("teardownResults");
        if (jsonArrayteardownResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("teardownResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `teardownResults` to be an array in the JSON string but got `%s`", jsonObj.get("teardownResults").toString()));
          }

          // validate the optional field `teardownResults` (array)
          for (int i = 0; i < jsonArrayteardownResults.size(); i++) {
            AutoTestStepResultsApiResult.validateJsonElement(jsonArrayteardownResults.get(i));
          };
        }
      }
      if ((jsonObj.get("workItemVersionId") != null && !jsonObj.get("workItemVersionId").isJsonNull()) && !jsonObj.get("workItemVersionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workItemVersionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workItemVersionId").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("attachments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
      }

      JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("attachments");
      // validate the required field `attachments` (array)
      for (int i = 0; i < jsonArrayattachments.size(); i++) {
        AttachmentApiResult.validateJsonElement(jsonArrayattachments.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("links").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
      }

      JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
      // validate the required field `links` (array)
      for (int i = 0; i < jsonArraylinks.size(); i++) {
        LinkApiResult.validateJsonElement(jsonArraylinks.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("failureClasses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `failureClasses` to be an array in the JSON string but got `%s`", jsonObj.get("failureClasses").toString()));
      }

      JsonArray jsonArrayfailureClasses = jsonObj.getAsJsonArray("failureClasses");
      // validate the required field `failureClasses` (array)
      for (int i = 0; i < jsonArrayfailureClasses.size(); i++) {
        TestResultFailureClassApiResult.validateJsonElement(jsonArrayfailureClasses.get(i));
      };
      if (jsonObj.get("stepComments") != null && !jsonObj.get("stepComments").isJsonNull()) {
        JsonArray jsonArraystepComments = jsonObj.getAsJsonArray("stepComments");
        if (jsonArraystepComments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("stepComments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `stepComments` to be an array in the JSON string but got `%s`", jsonObj.get("stepComments").toString()));
          }

          // validate the optional field `stepComments` (array)
          for (int i = 0; i < jsonArraystepComments.size(); i++) {
            StepCommentApiResult.validateJsonElement(jsonArraystepComments.get(i));
          };
        }
      }
      if (!jsonObj.get("createdById").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdById` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdById").toString()));
      }
      if ((jsonObj.get("modifiedById") != null && !jsonObj.get("modifiedById").isJsonNull()) && !jsonObj.get("modifiedById").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedById` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modifiedById").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestResultApiResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestResultApiResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestResultApiResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestResultApiResult.class));

       return (TypeAdapter<T>) new TypeAdapter<TestResultApiResult>() {
           @Override
           public void write(JsonWriter out, TestResultApiResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestResultApiResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestResultApiResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestResultApiResult
   * @throws IOException if the JSON string is invalid with respect to TestResultApiResult
   */
  public static TestResultApiResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestResultApiResult.class);
  }

  /**
   * Convert an instance of TestResultApiResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

