/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import ru.testit.client.model.Attachment;
import ru.testit.client.model.AutoTest;
import ru.testit.client.model.AutoTestStepResult;
import ru.testit.client.model.Link;
import ru.testit.client.model.StepComment;
import ru.testit.client.model.StepResult;
import ru.testit.client.model.TestPoint;
import ru.testit.client.model.TestResultOutcome;
import ru.testit.client.model.TestStatusApiResult;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import ru.testit.client.invoker.JSON;

/**
 * TestResultResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class TestResultResponse {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private UUID id;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  @javax.annotation.Nonnull
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_MODIFIED_DATE = "modifiedDate";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime modifiedDate;

  public static final String SERIALIZED_NAME_CREATED_BY_ID = "createdById";
  @SerializedName(SERIALIZED_NAME_CREATED_BY_ID)
  @javax.annotation.Nonnull
  private UUID createdById;

  public static final String SERIALIZED_NAME_MODIFIED_BY_ID = "modifiedById";
  @SerializedName(SERIALIZED_NAME_MODIFIED_BY_ID)
  @javax.annotation.Nullable
  private UUID modifiedById;

  public static final String SERIALIZED_NAME_STEP_COMMENTS = "stepComments";
  @SerializedName(SERIALIZED_NAME_STEP_COMMENTS)
  @javax.annotation.Nullable
  private List<StepComment> stepComments;

  public static final String SERIALIZED_NAME_FAILURE_CLASS_IDS = "failureClassIds";
  @SerializedName(SERIALIZED_NAME_FAILURE_CLASS_IDS)
  @javax.annotation.Nonnull
  private List<UUID> failureClassIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_OUTCOME = "outcome";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_OUTCOME)
  @javax.annotation.Nullable
  private TestResultOutcome outcome;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private TestStatusApiResult status;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  @javax.annotation.Nullable
  private String comment;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  @javax.annotation.Nullable
  private List<Link> links;

  public static final String SERIALIZED_NAME_STEP_RESULTS = "stepResults";
  @SerializedName(SERIALIZED_NAME_STEP_RESULTS)
  @javax.annotation.Nullable
  private List<StepResult> stepResults;

  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  @javax.annotation.Nullable
  private List<Attachment> attachments;

  public static final String SERIALIZED_NAME_AUTO_TEST_ID = "autoTestId";
  @SerializedName(SERIALIZED_NAME_AUTO_TEST_ID)
  @javax.annotation.Nullable
  private UUID autoTestId;

  public static final String SERIALIZED_NAME_CONFIGURATION_ID = "configurationId";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_ID)
  @javax.annotation.Nonnull
  private UUID configurationId;

  public static final String SERIALIZED_NAME_STARTED_ON = "startedOn";
  @SerializedName(SERIALIZED_NAME_STARTED_ON)
  @javax.annotation.Nullable
  private OffsetDateTime startedOn;

  public static final String SERIALIZED_NAME_COMPLETED_ON = "completedOn";
  @SerializedName(SERIALIZED_NAME_COMPLETED_ON)
  @javax.annotation.Nullable
  private OffsetDateTime completedOn;

  public static final String SERIALIZED_NAME_DURATION_IN_MS = "durationInMs";
  @SerializedName(SERIALIZED_NAME_DURATION_IN_MS)
  @javax.annotation.Nullable
  private Long durationInMs;

  public static final String SERIALIZED_NAME_TRACES = "traces";
  @SerializedName(SERIALIZED_NAME_TRACES)
  @javax.annotation.Nullable
  private String traces;

  public static final String SERIALIZED_NAME_FAILURE_TYPE = "failureType";
  @SerializedName(SERIALIZED_NAME_FAILURE_TYPE)
  @javax.annotation.Nullable
  private String failureType;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  @javax.annotation.Nullable
  private String message;

  public static final String SERIALIZED_NAME_RUN_BY_USER_ID = "runByUserId";
  @SerializedName(SERIALIZED_NAME_RUN_BY_USER_ID)
  @javax.annotation.Nullable
  private UUID runByUserId;

  public static final String SERIALIZED_NAME_STOPPED_BY_USER_ID = "stoppedByUserId";
  @SerializedName(SERIALIZED_NAME_STOPPED_BY_USER_ID)
  @javax.annotation.Nullable
  private UUID stoppedByUserId;

  public static final String SERIALIZED_NAME_TEST_POINT_ID = "testPointId";
  @SerializedName(SERIALIZED_NAME_TEST_POINT_ID)
  @javax.annotation.Nonnull
  private UUID testPointId;

  public static final String SERIALIZED_NAME_TEST_RUN_ID = "testRunId";
  @SerializedName(SERIALIZED_NAME_TEST_RUN_ID)
  @javax.annotation.Nonnull
  private UUID testRunId;

  public static final String SERIALIZED_NAME_TEST_POINT = "testPoint";
  @SerializedName(SERIALIZED_NAME_TEST_POINT)
  @javax.annotation.Nullable
  private TestPoint testPoint;

  public static final String SERIALIZED_NAME_AUTO_TEST = "autoTest";
  @SerializedName(SERIALIZED_NAME_AUTO_TEST)
  @javax.annotation.Nullable
  private AutoTest autoTest;

  public static final String SERIALIZED_NAME_AUTO_TEST_STEP_RESULTS = "autoTestStepResults";
  @SerializedName(SERIALIZED_NAME_AUTO_TEST_STEP_RESULTS)
  @javax.annotation.Nullable
  private List<AutoTestStepResult> autoTestStepResults;

  public static final String SERIALIZED_NAME_SETUP_RESULTS = "setupResults";
  @SerializedName(SERIALIZED_NAME_SETUP_RESULTS)
  @javax.annotation.Nullable
  private List<AutoTestStepResult> setupResults;

  public static final String SERIALIZED_NAME_TEARDOWN_RESULTS = "teardownResults";
  @SerializedName(SERIALIZED_NAME_TEARDOWN_RESULTS)
  @javax.annotation.Nullable
  private List<AutoTestStepResult> teardownResults;

  public static final String SERIALIZED_NAME_WORK_ITEM_VERSION_ID = "workItemVersionId";
  @SerializedName(SERIALIZED_NAME_WORK_ITEM_VERSION_ID)
  @javax.annotation.Nonnull
  private UUID workItemVersionId;

  public static final String SERIALIZED_NAME_WORK_ITEM_VERSION_NUMBER = "workItemVersionNumber";
  @SerializedName(SERIALIZED_NAME_WORK_ITEM_VERSION_NUMBER)
  @javax.annotation.Nullable
  private Integer workItemVersionNumber;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  @javax.annotation.Nullable
  private Map<String, String> parameters;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  @javax.annotation.Nullable
  private Map<String, String> properties;

  public TestResultResponse() {
  }

  public TestResultResponse id(@javax.annotation.Nonnull UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull UUID id) {
    this.id = id;
  }


  public TestResultResponse createdDate(@javax.annotation.Nonnull OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Get createdDate
   * @return createdDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(@javax.annotation.Nonnull OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public TestResultResponse modifiedDate(@javax.annotation.Nullable OffsetDateTime modifiedDate) {
    this.modifiedDate = modifiedDate;
    return this;
  }

  /**
   * Get modifiedDate
   * @return modifiedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedDate() {
    return modifiedDate;
  }

  public void setModifiedDate(@javax.annotation.Nullable OffsetDateTime modifiedDate) {
    this.modifiedDate = modifiedDate;
  }


  public TestResultResponse createdById(@javax.annotation.Nonnull UUID createdById) {
    this.createdById = createdById;
    return this;
  }

  /**
   * Get createdById
   * @return createdById
   */
  @javax.annotation.Nonnull
  public UUID getCreatedById() {
    return createdById;
  }

  public void setCreatedById(@javax.annotation.Nonnull UUID createdById) {
    this.createdById = createdById;
  }


  public TestResultResponse modifiedById(@javax.annotation.Nullable UUID modifiedById) {
    this.modifiedById = modifiedById;
    return this;
  }

  /**
   * Get modifiedById
   * @return modifiedById
   */
  @javax.annotation.Nullable
  public UUID getModifiedById() {
    return modifiedById;
  }

  public void setModifiedById(@javax.annotation.Nullable UUID modifiedById) {
    this.modifiedById = modifiedById;
  }


  public TestResultResponse stepComments(@javax.annotation.Nullable List<StepComment> stepComments) {
    this.stepComments = stepComments;
    return this;
  }

  public TestResultResponse addStepCommentsItem(StepComment stepCommentsItem) {
    if (this.stepComments == null) {
      this.stepComments = new ArrayList<>();
    }
    this.stepComments.add(stepCommentsItem);
    return this;
  }

  /**
   * Get stepComments
   * @return stepComments
   */
  @javax.annotation.Nullable
  public List<StepComment> getStepComments() {
    return stepComments;
  }

  public void setStepComments(@javax.annotation.Nullable List<StepComment> stepComments) {
    this.stepComments = stepComments;
  }


  public TestResultResponse failureClassIds(@javax.annotation.Nonnull List<UUID> failureClassIds) {
    this.failureClassIds = failureClassIds;
    return this;
  }

  public TestResultResponse addFailureClassIdsItem(UUID failureClassIdsItem) {
    if (this.failureClassIds == null) {
      this.failureClassIds = new ArrayList<>();
    }
    this.failureClassIds.add(failureClassIdsItem);
    return this;
  }

  /**
   * Get failureClassIds
   * @return failureClassIds
   */
  @javax.annotation.Nonnull
  public List<UUID> getFailureClassIds() {
    return failureClassIds;
  }

  public void setFailureClassIds(@javax.annotation.Nonnull List<UUID> failureClassIds) {
    this.failureClassIds = failureClassIds;
  }


  @Deprecated
  public TestResultResponse outcome(@javax.annotation.Nullable TestResultOutcome outcome) {
    this.outcome = outcome;
    return this;
  }

  /**
   * Get outcome
   * @return outcome
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public TestResultOutcome getOutcome() {
    return outcome;
  }

  @Deprecated
  public void setOutcome(@javax.annotation.Nullable TestResultOutcome outcome) {
    this.outcome = outcome;
  }


  public TestResultResponse status(@javax.annotation.Nullable TestStatusApiResult status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public TestStatusApiResult getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable TestStatusApiResult status) {
    this.status = status;
  }


  public TestResultResponse comment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
  }


  public TestResultResponse links(@javax.annotation.Nullable List<Link> links) {
    this.links = links;
    return this;
  }

  public TestResultResponse addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public List<Link> getLinks() {
    return links;
  }

  public void setLinks(@javax.annotation.Nullable List<Link> links) {
    this.links = links;
  }


  public TestResultResponse stepResults(@javax.annotation.Nullable List<StepResult> stepResults) {
    this.stepResults = stepResults;
    return this;
  }

  public TestResultResponse addStepResultsItem(StepResult stepResultsItem) {
    if (this.stepResults == null) {
      this.stepResults = new ArrayList<>();
    }
    this.stepResults.add(stepResultsItem);
    return this;
  }

  /**
   * Get stepResults
   * @return stepResults
   */
  @javax.annotation.Nullable
  public List<StepResult> getStepResults() {
    return stepResults;
  }

  public void setStepResults(@javax.annotation.Nullable List<StepResult> stepResults) {
    this.stepResults = stepResults;
  }


  public TestResultResponse attachments(@javax.annotation.Nullable List<Attachment> attachments) {
    this.attachments = attachments;
    return this;
  }

  public TestResultResponse addAttachmentsItem(Attachment attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * Get attachments
   * @return attachments
   */
  @javax.annotation.Nullable
  public List<Attachment> getAttachments() {
    return attachments;
  }

  public void setAttachments(@javax.annotation.Nullable List<Attachment> attachments) {
    this.attachments = attachments;
  }


  public TestResultResponse autoTestId(@javax.annotation.Nullable UUID autoTestId) {
    this.autoTestId = autoTestId;
    return this;
  }

  /**
   * Get autoTestId
   * @return autoTestId
   */
  @javax.annotation.Nullable
  public UUID getAutoTestId() {
    return autoTestId;
  }

  public void setAutoTestId(@javax.annotation.Nullable UUID autoTestId) {
    this.autoTestId = autoTestId;
  }


  public TestResultResponse configurationId(@javax.annotation.Nonnull UUID configurationId) {
    this.configurationId = configurationId;
    return this;
  }

  /**
   * Get configurationId
   * @return configurationId
   */
  @javax.annotation.Nonnull
  public UUID getConfigurationId() {
    return configurationId;
  }

  public void setConfigurationId(@javax.annotation.Nonnull UUID configurationId) {
    this.configurationId = configurationId;
  }


  public TestResultResponse startedOn(@javax.annotation.Nullable OffsetDateTime startedOn) {
    this.startedOn = startedOn;
    return this;
  }

  /**
   * Get startedOn
   * @return startedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartedOn() {
    return startedOn;
  }

  public void setStartedOn(@javax.annotation.Nullable OffsetDateTime startedOn) {
    this.startedOn = startedOn;
  }


  public TestResultResponse completedOn(@javax.annotation.Nullable OffsetDateTime completedOn) {
    this.completedOn = completedOn;
    return this;
  }

  /**
   * Get completedOn
   * @return completedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCompletedOn() {
    return completedOn;
  }

  public void setCompletedOn(@javax.annotation.Nullable OffsetDateTime completedOn) {
    this.completedOn = completedOn;
  }


  public TestResultResponse durationInMs(@javax.annotation.Nullable Long durationInMs) {
    this.durationInMs = durationInMs;
    return this;
  }

  /**
   * Get durationInMs
   * @return durationInMs
   */
  @javax.annotation.Nullable
  public Long getDurationInMs() {
    return durationInMs;
  }

  public void setDurationInMs(@javax.annotation.Nullable Long durationInMs) {
    this.durationInMs = durationInMs;
  }


  public TestResultResponse traces(@javax.annotation.Nullable String traces) {
    this.traces = traces;
    return this;
  }

  /**
   * Get traces
   * @return traces
   */
  @javax.annotation.Nullable
  public String getTraces() {
    return traces;
  }

  public void setTraces(@javax.annotation.Nullable String traces) {
    this.traces = traces;
  }


  public TestResultResponse failureType(@javax.annotation.Nullable String failureType) {
    this.failureType = failureType;
    return this;
  }

  /**
   * Get failureType
   * @return failureType
   */
  @javax.annotation.Nullable
  public String getFailureType() {
    return failureType;
  }

  public void setFailureType(@javax.annotation.Nullable String failureType) {
    this.failureType = failureType;
  }


  public TestResultResponse message(@javax.annotation.Nullable String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(@javax.annotation.Nullable String message) {
    this.message = message;
  }


  public TestResultResponse runByUserId(@javax.annotation.Nullable UUID runByUserId) {
    this.runByUserId = runByUserId;
    return this;
  }

  /**
   * Get runByUserId
   * @return runByUserId
   */
  @javax.annotation.Nullable
  public UUID getRunByUserId() {
    return runByUserId;
  }

  public void setRunByUserId(@javax.annotation.Nullable UUID runByUserId) {
    this.runByUserId = runByUserId;
  }


  public TestResultResponse stoppedByUserId(@javax.annotation.Nullable UUID stoppedByUserId) {
    this.stoppedByUserId = stoppedByUserId;
    return this;
  }

  /**
   * Get stoppedByUserId
   * @return stoppedByUserId
   */
  @javax.annotation.Nullable
  public UUID getStoppedByUserId() {
    return stoppedByUserId;
  }

  public void setStoppedByUserId(@javax.annotation.Nullable UUID stoppedByUserId) {
    this.stoppedByUserId = stoppedByUserId;
  }


  public TestResultResponse testPointId(@javax.annotation.Nonnull UUID testPointId) {
    this.testPointId = testPointId;
    return this;
  }

  /**
   * Get testPointId
   * @return testPointId
   */
  @javax.annotation.Nonnull
  public UUID getTestPointId() {
    return testPointId;
  }

  public void setTestPointId(@javax.annotation.Nonnull UUID testPointId) {
    this.testPointId = testPointId;
  }


  public TestResultResponse testRunId(@javax.annotation.Nonnull UUID testRunId) {
    this.testRunId = testRunId;
    return this;
  }

  /**
   * Get testRunId
   * @return testRunId
   */
  @javax.annotation.Nonnull
  public UUID getTestRunId() {
    return testRunId;
  }

  public void setTestRunId(@javax.annotation.Nonnull UUID testRunId) {
    this.testRunId = testRunId;
  }


  public TestResultResponse testPoint(@javax.annotation.Nullable TestPoint testPoint) {
    this.testPoint = testPoint;
    return this;
  }

  /**
   * Get testPoint
   * @return testPoint
   */
  @javax.annotation.Nullable
  public TestPoint getTestPoint() {
    return testPoint;
  }

  public void setTestPoint(@javax.annotation.Nullable TestPoint testPoint) {
    this.testPoint = testPoint;
  }


  public TestResultResponse autoTest(@javax.annotation.Nullable AutoTest autoTest) {
    this.autoTest = autoTest;
    return this;
  }

  /**
   * Get autoTest
   * @return autoTest
   */
  @javax.annotation.Nullable
  public AutoTest getAutoTest() {
    return autoTest;
  }

  public void setAutoTest(@javax.annotation.Nullable AutoTest autoTest) {
    this.autoTest = autoTest;
  }


  public TestResultResponse autoTestStepResults(@javax.annotation.Nullable List<AutoTestStepResult> autoTestStepResults) {
    this.autoTestStepResults = autoTestStepResults;
    return this;
  }

  public TestResultResponse addAutoTestStepResultsItem(AutoTestStepResult autoTestStepResultsItem) {
    if (this.autoTestStepResults == null) {
      this.autoTestStepResults = new ArrayList<>();
    }
    this.autoTestStepResults.add(autoTestStepResultsItem);
    return this;
  }

  /**
   * Get autoTestStepResults
   * @return autoTestStepResults
   */
  @javax.annotation.Nullable
  public List<AutoTestStepResult> getAutoTestStepResults() {
    return autoTestStepResults;
  }

  public void setAutoTestStepResults(@javax.annotation.Nullable List<AutoTestStepResult> autoTestStepResults) {
    this.autoTestStepResults = autoTestStepResults;
  }


  public TestResultResponse setupResults(@javax.annotation.Nullable List<AutoTestStepResult> setupResults) {
    this.setupResults = setupResults;
    return this;
  }

  public TestResultResponse addSetupResultsItem(AutoTestStepResult setupResultsItem) {
    if (this.setupResults == null) {
      this.setupResults = new ArrayList<>();
    }
    this.setupResults.add(setupResultsItem);
    return this;
  }

  /**
   * Get setupResults
   * @return setupResults
   */
  @javax.annotation.Nullable
  public List<AutoTestStepResult> getSetupResults() {
    return setupResults;
  }

  public void setSetupResults(@javax.annotation.Nullable List<AutoTestStepResult> setupResults) {
    this.setupResults = setupResults;
  }


  public TestResultResponse teardownResults(@javax.annotation.Nullable List<AutoTestStepResult> teardownResults) {
    this.teardownResults = teardownResults;
    return this;
  }

  public TestResultResponse addTeardownResultsItem(AutoTestStepResult teardownResultsItem) {
    if (this.teardownResults == null) {
      this.teardownResults = new ArrayList<>();
    }
    this.teardownResults.add(teardownResultsItem);
    return this;
  }

  /**
   * Get teardownResults
   * @return teardownResults
   */
  @javax.annotation.Nullable
  public List<AutoTestStepResult> getTeardownResults() {
    return teardownResults;
  }

  public void setTeardownResults(@javax.annotation.Nullable List<AutoTestStepResult> teardownResults) {
    this.teardownResults = teardownResults;
  }


  public TestResultResponse workItemVersionId(@javax.annotation.Nonnull UUID workItemVersionId) {
    this.workItemVersionId = workItemVersionId;
    return this;
  }

  /**
   * Get workItemVersionId
   * @return workItemVersionId
   */
  @javax.annotation.Nonnull
  public UUID getWorkItemVersionId() {
    return workItemVersionId;
  }

  public void setWorkItemVersionId(@javax.annotation.Nonnull UUID workItemVersionId) {
    this.workItemVersionId = workItemVersionId;
  }


  public TestResultResponse workItemVersionNumber(@javax.annotation.Nullable Integer workItemVersionNumber) {
    this.workItemVersionNumber = workItemVersionNumber;
    return this;
  }

  /**
   * Get workItemVersionNumber
   * @return workItemVersionNumber
   */
  @javax.annotation.Nullable
  public Integer getWorkItemVersionNumber() {
    return workItemVersionNumber;
  }

  public void setWorkItemVersionNumber(@javax.annotation.Nullable Integer workItemVersionNumber) {
    this.workItemVersionNumber = workItemVersionNumber;
  }


  public TestResultResponse parameters(@javax.annotation.Nullable Map<String, String> parameters) {
    this.parameters = parameters;
    return this;
  }

  public TestResultResponse putParametersItem(String key, String parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

  /**
   * Get parameters
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map<String, String> getParameters() {
    return parameters;
  }

  public void setParameters(@javax.annotation.Nullable Map<String, String> parameters) {
    this.parameters = parameters;
  }


  public TestResultResponse properties(@javax.annotation.Nullable Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public TestResultResponse putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * Get properties
   * @return properties
   */
  @javax.annotation.Nullable
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(@javax.annotation.Nullable Map<String, String> properties) {
    this.properties = properties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestResultResponse testResultResponse = (TestResultResponse) o;
    return Objects.equals(this.id, testResultResponse.id) &&
        Objects.equals(this.createdDate, testResultResponse.createdDate) &&
        Objects.equals(this.modifiedDate, testResultResponse.modifiedDate) &&
        Objects.equals(this.createdById, testResultResponse.createdById) &&
        Objects.equals(this.modifiedById, testResultResponse.modifiedById) &&
        Objects.equals(this.stepComments, testResultResponse.stepComments) &&
        Objects.equals(this.failureClassIds, testResultResponse.failureClassIds) &&
        Objects.equals(this.outcome, testResultResponse.outcome) &&
        Objects.equals(this.status, testResultResponse.status) &&
        Objects.equals(this.comment, testResultResponse.comment) &&
        Objects.equals(this.links, testResultResponse.links) &&
        Objects.equals(this.stepResults, testResultResponse.stepResults) &&
        Objects.equals(this.attachments, testResultResponse.attachments) &&
        Objects.equals(this.autoTestId, testResultResponse.autoTestId) &&
        Objects.equals(this.configurationId, testResultResponse.configurationId) &&
        Objects.equals(this.startedOn, testResultResponse.startedOn) &&
        Objects.equals(this.completedOn, testResultResponse.completedOn) &&
        Objects.equals(this.durationInMs, testResultResponse.durationInMs) &&
        Objects.equals(this.traces, testResultResponse.traces) &&
        Objects.equals(this.failureType, testResultResponse.failureType) &&
        Objects.equals(this.message, testResultResponse.message) &&
        Objects.equals(this.runByUserId, testResultResponse.runByUserId) &&
        Objects.equals(this.stoppedByUserId, testResultResponse.stoppedByUserId) &&
        Objects.equals(this.testPointId, testResultResponse.testPointId) &&
        Objects.equals(this.testRunId, testResultResponse.testRunId) &&
        Objects.equals(this.testPoint, testResultResponse.testPoint) &&
        Objects.equals(this.autoTest, testResultResponse.autoTest) &&
        Objects.equals(this.autoTestStepResults, testResultResponse.autoTestStepResults) &&
        Objects.equals(this.setupResults, testResultResponse.setupResults) &&
        Objects.equals(this.teardownResults, testResultResponse.teardownResults) &&
        Objects.equals(this.workItemVersionId, testResultResponse.workItemVersionId) &&
        Objects.equals(this.workItemVersionNumber, testResultResponse.workItemVersionNumber) &&
        Objects.equals(this.parameters, testResultResponse.parameters) &&
        Objects.equals(this.properties, testResultResponse.properties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, createdDate, modifiedDate, createdById, modifiedById, stepComments, failureClassIds, outcome, status, comment, links, stepResults, attachments, autoTestId, configurationId, startedOn, completedOn, durationInMs, traces, failureType, message, runByUserId, stoppedByUserId, testPointId, testRunId, testPoint, autoTest, autoTestStepResults, setupResults, teardownResults, workItemVersionId, workItemVersionNumber, parameters, properties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestResultResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("    createdById: ").append(toIndentedString(createdById)).append("\n");
    sb.append("    modifiedById: ").append(toIndentedString(modifiedById)).append("\n");
    sb.append("    stepComments: ").append(toIndentedString(stepComments)).append("\n");
    sb.append("    failureClassIds: ").append(toIndentedString(failureClassIds)).append("\n");
    sb.append("    outcome: ").append(toIndentedString(outcome)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    stepResults: ").append(toIndentedString(stepResults)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    autoTestId: ").append(toIndentedString(autoTestId)).append("\n");
    sb.append("    configurationId: ").append(toIndentedString(configurationId)).append("\n");
    sb.append("    startedOn: ").append(toIndentedString(startedOn)).append("\n");
    sb.append("    completedOn: ").append(toIndentedString(completedOn)).append("\n");
    sb.append("    durationInMs: ").append(toIndentedString(durationInMs)).append("\n");
    sb.append("    traces: ").append(toIndentedString(traces)).append("\n");
    sb.append("    failureType: ").append(toIndentedString(failureType)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    runByUserId: ").append(toIndentedString(runByUserId)).append("\n");
    sb.append("    stoppedByUserId: ").append(toIndentedString(stoppedByUserId)).append("\n");
    sb.append("    testPointId: ").append(toIndentedString(testPointId)).append("\n");
    sb.append("    testRunId: ").append(toIndentedString(testRunId)).append("\n");
    sb.append("    testPoint: ").append(toIndentedString(testPoint)).append("\n");
    sb.append("    autoTest: ").append(toIndentedString(autoTest)).append("\n");
    sb.append("    autoTestStepResults: ").append(toIndentedString(autoTestStepResults)).append("\n");
    sb.append("    setupResults: ").append(toIndentedString(setupResults)).append("\n");
    sb.append("    teardownResults: ").append(toIndentedString(teardownResults)).append("\n");
    sb.append("    workItemVersionId: ").append(toIndentedString(workItemVersionId)).append("\n");
    sb.append("    workItemVersionNumber: ").append(toIndentedString(workItemVersionNumber)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("createdDate");
    openapiFields.add("modifiedDate");
    openapiFields.add("createdById");
    openapiFields.add("modifiedById");
    openapiFields.add("stepComments");
    openapiFields.add("failureClassIds");
    openapiFields.add("outcome");
    openapiFields.add("status");
    openapiFields.add("comment");
    openapiFields.add("links");
    openapiFields.add("stepResults");
    openapiFields.add("attachments");
    openapiFields.add("autoTestId");
    openapiFields.add("configurationId");
    openapiFields.add("startedOn");
    openapiFields.add("completedOn");
    openapiFields.add("durationInMs");
    openapiFields.add("traces");
    openapiFields.add("failureType");
    openapiFields.add("message");
    openapiFields.add("runByUserId");
    openapiFields.add("stoppedByUserId");
    openapiFields.add("testPointId");
    openapiFields.add("testRunId");
    openapiFields.add("testPoint");
    openapiFields.add("autoTest");
    openapiFields.add("autoTestStepResults");
    openapiFields.add("setupResults");
    openapiFields.add("teardownResults");
    openapiFields.add("workItemVersionId");
    openapiFields.add("workItemVersionNumber");
    openapiFields.add("parameters");
    openapiFields.add("properties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("createdDate");
    openapiRequiredFields.add("createdById");
    openapiRequiredFields.add("failureClassIds");
    openapiRequiredFields.add("configurationId");
    openapiRequiredFields.add("testPointId");
    openapiRequiredFields.add("testRunId");
    openapiRequiredFields.add("workItemVersionId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestResultResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestResultResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestResultResponse is not found in the empty JSON string", TestResultResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestResultResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestResultResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TestResultResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("createdById").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdById` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdById").toString()));
      }
      if ((jsonObj.get("modifiedById") != null && !jsonObj.get("modifiedById").isJsonNull()) && !jsonObj.get("modifiedById").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedById` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modifiedById").toString()));
      }
      if (jsonObj.get("stepComments") != null && !jsonObj.get("stepComments").isJsonNull()) {
        JsonArray jsonArraystepComments = jsonObj.getAsJsonArray("stepComments");
        if (jsonArraystepComments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("stepComments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `stepComments` to be an array in the JSON string but got `%s`", jsonObj.get("stepComments").toString()));
          }

          // validate the optional field `stepComments` (array)
          for (int i = 0; i < jsonArraystepComments.size(); i++) {
            StepComment.validateJsonElement(jsonArraystepComments.get(i));
          };
        }
      }
      // ensure the required json array is present
      if (jsonObj.get("failureClassIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("failureClassIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `failureClassIds` to be an array in the JSON string but got `%s`", jsonObj.get("failureClassIds").toString()));
      }
      // validate the optional field `outcome`
      if (jsonObj.get("outcome") != null && !jsonObj.get("outcome").isJsonNull()) {
        TestResultOutcome.validateJsonElement(jsonObj.get("outcome"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        TestStatusApiResult.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            Link.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
      if (jsonObj.get("stepResults") != null && !jsonObj.get("stepResults").isJsonNull()) {
        JsonArray jsonArraystepResults = jsonObj.getAsJsonArray("stepResults");
        if (jsonArraystepResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("stepResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `stepResults` to be an array in the JSON string but got `%s`", jsonObj.get("stepResults").toString()));
          }

          // validate the optional field `stepResults` (array)
          for (int i = 0; i < jsonArraystepResults.size(); i++) {
            StepResult.validateJsonElement(jsonArraystepResults.get(i));
          };
        }
      }
      if (jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonNull()) {
        JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("attachments");
        if (jsonArrayattachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
          }

          // validate the optional field `attachments` (array)
          for (int i = 0; i < jsonArrayattachments.size(); i++) {
            Attachment.validateJsonElement(jsonArrayattachments.get(i));
          };
        }
      }
      if ((jsonObj.get("autoTestId") != null && !jsonObj.get("autoTestId").isJsonNull()) && !jsonObj.get("autoTestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoTestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autoTestId").toString()));
      }
      if (!jsonObj.get("configurationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configurationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configurationId").toString()));
      }
      if ((jsonObj.get("traces") != null && !jsonObj.get("traces").isJsonNull()) && !jsonObj.get("traces").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `traces` to be a primitive type in the JSON string but got `%s`", jsonObj.get("traces").toString()));
      }
      if ((jsonObj.get("failureType") != null && !jsonObj.get("failureType").isJsonNull()) && !jsonObj.get("failureType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failureType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failureType").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("runByUserId") != null && !jsonObj.get("runByUserId").isJsonNull()) && !jsonObj.get("runByUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runByUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runByUserId").toString()));
      }
      if ((jsonObj.get("stoppedByUserId") != null && !jsonObj.get("stoppedByUserId").isJsonNull()) && !jsonObj.get("stoppedByUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stoppedByUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stoppedByUserId").toString()));
      }
      if (!jsonObj.get("testPointId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testPointId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testPointId").toString()));
      }
      if (!jsonObj.get("testRunId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testRunId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testRunId").toString()));
      }
      // validate the optional field `testPoint`
      if (jsonObj.get("testPoint") != null && !jsonObj.get("testPoint").isJsonNull()) {
        TestPoint.validateJsonElement(jsonObj.get("testPoint"));
      }
      // validate the optional field `autoTest`
      if (jsonObj.get("autoTest") != null && !jsonObj.get("autoTest").isJsonNull()) {
        AutoTest.validateJsonElement(jsonObj.get("autoTest"));
      }
      if (jsonObj.get("autoTestStepResults") != null && !jsonObj.get("autoTestStepResults").isJsonNull()) {
        JsonArray jsonArrayautoTestStepResults = jsonObj.getAsJsonArray("autoTestStepResults");
        if (jsonArrayautoTestStepResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("autoTestStepResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `autoTestStepResults` to be an array in the JSON string but got `%s`", jsonObj.get("autoTestStepResults").toString()));
          }

          // validate the optional field `autoTestStepResults` (array)
          for (int i = 0; i < jsonArrayautoTestStepResults.size(); i++) {
            AutoTestStepResult.validateJsonElement(jsonArrayautoTestStepResults.get(i));
          };
        }
      }
      if (jsonObj.get("setupResults") != null && !jsonObj.get("setupResults").isJsonNull()) {
        JsonArray jsonArraysetupResults = jsonObj.getAsJsonArray("setupResults");
        if (jsonArraysetupResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("setupResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `setupResults` to be an array in the JSON string but got `%s`", jsonObj.get("setupResults").toString()));
          }

          // validate the optional field `setupResults` (array)
          for (int i = 0; i < jsonArraysetupResults.size(); i++) {
            AutoTestStepResult.validateJsonElement(jsonArraysetupResults.get(i));
          };
        }
      }
      if (jsonObj.get("teardownResults") != null && !jsonObj.get("teardownResults").isJsonNull()) {
        JsonArray jsonArrayteardownResults = jsonObj.getAsJsonArray("teardownResults");
        if (jsonArrayteardownResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("teardownResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `teardownResults` to be an array in the JSON string but got `%s`", jsonObj.get("teardownResults").toString()));
          }

          // validate the optional field `teardownResults` (array)
          for (int i = 0; i < jsonArrayteardownResults.size(); i++) {
            AutoTestStepResult.validateJsonElement(jsonArrayteardownResults.get(i));
          };
        }
      }
      if (!jsonObj.get("workItemVersionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workItemVersionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workItemVersionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestResultResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestResultResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestResultResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestResultResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<TestResultResponse>() {
           @Override
           public void write(JsonWriter out, TestResultResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestResultResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestResultResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestResultResponse
   * @throws IOException if the JSON string is invalid with respect to TestResultResponse
   */
  public static TestResultResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestResultResponse.class);
  }

  /**
   * Convert an instance of TestResultResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

