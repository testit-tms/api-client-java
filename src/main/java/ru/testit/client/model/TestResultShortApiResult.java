/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import ru.testit.client.model.AttachmentApiResult;
import ru.testit.client.model.AutoTestShortApiResult;
import ru.testit.client.model.TestPointShortApiResult;
import ru.testit.client.model.TestStatusApiResult;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import ru.testit.client.invoker.JSON;


/**
 * TestResultShortApiResult
 */
@JsonPropertyOrder({
  TestResultShortApiResult.JSON_PROPERTY_ID,
  TestResultShortApiResult.JSON_PROPERTY_OUTCOME,
  TestResultShortApiResult.JSON_PROPERTY_STATUS,
  TestResultShortApiResult.JSON_PROPERTY_CREATED_DATE,
  TestResultShortApiResult.JSON_PROPERTY_ATTACHMENTS,
  TestResultShortApiResult.JSON_PROPERTY_TRACES,
  TestResultShortApiResult.JSON_PROPERTY_FAILURE_TYPE,
  TestResultShortApiResult.JSON_PROPERTY_MESSAGE,
  TestResultShortApiResult.JSON_PROPERTY_TEST_POINT,
  TestResultShortApiResult.JSON_PROPERTY_AUTO_TEST
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0")
public class TestResultShortApiResult {
  public static final String JSON_PROPERTY_ID = "id";
  private UUID id;

  public static final String JSON_PROPERTY_OUTCOME = "outcome";
  private String outcome;

  public static final String JSON_PROPERTY_STATUS = "status";
  private TestStatusApiResult status;

  public static final String JSON_PROPERTY_CREATED_DATE = "createdDate";
  private OffsetDateTime createdDate;

  public static final String JSON_PROPERTY_ATTACHMENTS = "attachments";
  private List<AttachmentApiResult> attachments = new ArrayList<>();

  public static final String JSON_PROPERTY_TRACES = "traces";
  private JsonNullable<String> traces = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_FAILURE_TYPE = "failureType";
  private JsonNullable<String> failureType = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_MESSAGE = "message";
  private JsonNullable<String> message = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_TEST_POINT = "testPoint";
  private JsonNullable<TestPointShortApiResult> testPoint = JsonNullable.<TestPointShortApiResult>undefined();

  public static final String JSON_PROPERTY_AUTO_TEST = "autoTest";
  private JsonNullable<AutoTestShortApiResult> autoTest = JsonNullable.<AutoTestShortApiResult>undefined();

  public TestResultShortApiResult() { 
  }

  public TestResultShortApiResult id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(UUID id) {
    this.id = id;
  }


  public TestResultShortApiResult outcome(String outcome) {
    this.outcome = outcome;
    return this;
  }

  /**
   * Get outcome
   * @return outcome
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_OUTCOME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getOutcome() {
    return outcome;
  }


  @JsonProperty(JSON_PROPERTY_OUTCOME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOutcome(String outcome) {
    this.outcome = outcome;
  }


  public TestResultShortApiResult status(TestStatusApiResult status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TestStatusApiResult getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatus(TestStatusApiResult status) {
    this.status = status;
  }


  public TestResultShortApiResult createdDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Get createdDate
   * @return createdDate
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public TestResultShortApiResult attachments(List<AttachmentApiResult> attachments) {
    this.attachments = attachments;
    return this;
  }

  public TestResultShortApiResult addAttachmentsItem(AttachmentApiResult attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * Get attachments
   * @return attachments
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ATTACHMENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<AttachmentApiResult> getAttachments() {
    return attachments;
  }


  @JsonProperty(JSON_PROPERTY_ATTACHMENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAttachments(List<AttachmentApiResult> attachments) {
    this.attachments = attachments;
  }


  public TestResultShortApiResult traces(String traces) {
    this.traces = JsonNullable.<String>of(traces);
    return this;
  }

  /**
   * Get traces
   * @return traces
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getTraces() {
        return traces.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TRACES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getTraces_JsonNullable() {
    return traces;
  }
  
  @JsonProperty(JSON_PROPERTY_TRACES)
  public void setTraces_JsonNullable(JsonNullable<String> traces) {
    this.traces = traces;
  }

  public void setTraces(String traces) {
    this.traces = JsonNullable.<String>of(traces);
  }


  public TestResultShortApiResult failureType(String failureType) {
    this.failureType = JsonNullable.<String>of(failureType);
    return this;
  }

  /**
   * Get failureType
   * @return failureType
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getFailureType() {
        return failureType.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FAILURE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getFailureType_JsonNullable() {
    return failureType;
  }
  
  @JsonProperty(JSON_PROPERTY_FAILURE_TYPE)
  public void setFailureType_JsonNullable(JsonNullable<String> failureType) {
    this.failureType = failureType;
  }

  public void setFailureType(String failureType) {
    this.failureType = JsonNullable.<String>of(failureType);
  }


  public TestResultShortApiResult message(String message) {
    this.message = JsonNullable.<String>of(message);
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getMessage() {
        return message.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getMessage_JsonNullable() {
    return message;
  }
  
  @JsonProperty(JSON_PROPERTY_MESSAGE)
  public void setMessage_JsonNullable(JsonNullable<String> message) {
    this.message = message;
  }

  public void setMessage(String message) {
    this.message = JsonNullable.<String>of(message);
  }


  public TestResultShortApiResult testPoint(TestPointShortApiResult testPoint) {
    this.testPoint = JsonNullable.<TestPointShortApiResult>of(testPoint);
    return this;
  }

  /**
   * Get testPoint
   * @return testPoint
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public TestPointShortApiResult getTestPoint() {
        return testPoint.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TEST_POINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<TestPointShortApiResult> getTestPoint_JsonNullable() {
    return testPoint;
  }
  
  @JsonProperty(JSON_PROPERTY_TEST_POINT)
  public void setTestPoint_JsonNullable(JsonNullable<TestPointShortApiResult> testPoint) {
    this.testPoint = testPoint;
  }

  public void setTestPoint(TestPointShortApiResult testPoint) {
    this.testPoint = JsonNullable.<TestPointShortApiResult>of(testPoint);
  }


  public TestResultShortApiResult autoTest(AutoTestShortApiResult autoTest) {
    this.autoTest = JsonNullable.<AutoTestShortApiResult>of(autoTest);
    return this;
  }

  /**
   * Get autoTest
   * @return autoTest
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public AutoTestShortApiResult getAutoTest() {
        return autoTest.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AUTO_TEST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<AutoTestShortApiResult> getAutoTest_JsonNullable() {
    return autoTest;
  }
  
  @JsonProperty(JSON_PROPERTY_AUTO_TEST)
  public void setAutoTest_JsonNullable(JsonNullable<AutoTestShortApiResult> autoTest) {
    this.autoTest = autoTest;
  }

  public void setAutoTest(AutoTestShortApiResult autoTest) {
    this.autoTest = JsonNullable.<AutoTestShortApiResult>of(autoTest);
  }


  /**
   * Return true if this TestResultShortApiResult object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestResultShortApiResult testResultShortApiResult = (TestResultShortApiResult) o;
    return Objects.equals(this.id, testResultShortApiResult.id) &&
        Objects.equals(this.outcome, testResultShortApiResult.outcome) &&
        Objects.equals(this.status, testResultShortApiResult.status) &&
        Objects.equals(this.createdDate, testResultShortApiResult.createdDate) &&
        Objects.equals(this.attachments, testResultShortApiResult.attachments) &&
        equalsNullable(this.traces, testResultShortApiResult.traces) &&
        equalsNullable(this.failureType, testResultShortApiResult.failureType) &&
        equalsNullable(this.message, testResultShortApiResult.message) &&
        equalsNullable(this.testPoint, testResultShortApiResult.testPoint) &&
        equalsNullable(this.autoTest, testResultShortApiResult.autoTest);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, outcome, status, createdDate, attachments, hashCodeNullable(traces), hashCodeNullable(failureType), hashCodeNullable(message), hashCodeNullable(testPoint), hashCodeNullable(autoTest));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestResultShortApiResult {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    outcome: ").append(toIndentedString(outcome)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    traces: ").append(toIndentedString(traces)).append("\n");
    sb.append("    failureType: ").append(toIndentedString(failureType)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    testPoint: ").append(toIndentedString(testPoint)).append("\n");
    sb.append("    autoTest: ").append(toIndentedString(autoTest)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

