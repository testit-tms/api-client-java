/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import ru.testit.client.model.AttachmentApiResult;
import ru.testit.client.model.AutoTestResultReasonShort;
import ru.testit.client.model.LinkShort;
import ru.testit.client.model.TestStatusApiResult;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import ru.testit.client.invoker.JSON;


/**
 * TestResultShortResponse
 */
@JsonPropertyOrder({
  TestResultShortResponse.JSON_PROPERTY_ID,
  TestResultShortResponse.JSON_PROPERTY_NAME,
  TestResultShortResponse.JSON_PROPERTY_AUTOTEST_GLOBAL_ID,
  TestResultShortResponse.JSON_PROPERTY_TEST_RUN_ID,
  TestResultShortResponse.JSON_PROPERTY_CONFIGURATION_ID,
  TestResultShortResponse.JSON_PROPERTY_CONFIGURATION_NAME,
  TestResultShortResponse.JSON_PROPERTY_RESULT_REASONS,
  TestResultShortResponse.JSON_PROPERTY_DATE,
  TestResultShortResponse.JSON_PROPERTY_CREATED_DATE,
  TestResultShortResponse.JSON_PROPERTY_LINKS,
  TestResultShortResponse.JSON_PROPERTY_ATTACHMENTS,
  TestResultShortResponse.JSON_PROPERTY_RERUN_COMPLETED_COUNT,
  TestResultShortResponse.JSON_PROPERTY_OUTCOME,
  TestResultShortResponse.JSON_PROPERTY_STATUS,
  TestResultShortResponse.JSON_PROPERTY_COMMENT,
  TestResultShortResponse.JSON_PROPERTY_MODIFIED_DATE,
  TestResultShortResponse.JSON_PROPERTY_STARTED_ON,
  TestResultShortResponse.JSON_PROPERTY_COMPLETED_ON,
  TestResultShortResponse.JSON_PROPERTY_DURATION
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0")
public class TestResultShortResponse {
  public static final String JSON_PROPERTY_ID = "id";
  private UUID id;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_AUTOTEST_GLOBAL_ID = "autotestGlobalId";
  private Long autotestGlobalId;

  public static final String JSON_PROPERTY_TEST_RUN_ID = "testRunId";
  private UUID testRunId;

  public static final String JSON_PROPERTY_CONFIGURATION_ID = "configurationId";
  private UUID configurationId;

  public static final String JSON_PROPERTY_CONFIGURATION_NAME = "configurationName";
  private String configurationName;

  public static final String JSON_PROPERTY_RESULT_REASONS = "resultReasons";
  private List<AutoTestResultReasonShort> resultReasons = new ArrayList<>();

  public static final String JSON_PROPERTY_DATE = "date";
  @Deprecated
  private OffsetDateTime date;

  public static final String JSON_PROPERTY_CREATED_DATE = "createdDate";
  private OffsetDateTime createdDate;

  public static final String JSON_PROPERTY_LINKS = "links";
  private List<LinkShort> links = new ArrayList<>();

  public static final String JSON_PROPERTY_ATTACHMENTS = "attachments";
  private List<AttachmentApiResult> attachments = new ArrayList<>();

  public static final String JSON_PROPERTY_RERUN_COMPLETED_COUNT = "rerunCompletedCount";
  private Integer rerunCompletedCount;

  public static final String JSON_PROPERTY_OUTCOME = "outcome";
  @Deprecated
  private JsonNullable<String> outcome = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_STATUS = "status";
  private JsonNullable<TestStatusApiResult> status = JsonNullable.<TestStatusApiResult>undefined();

  public static final String JSON_PROPERTY_COMMENT = "comment";
  private JsonNullable<String> comment = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_MODIFIED_DATE = "modifiedDate";
  private JsonNullable<OffsetDateTime> modifiedDate = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_STARTED_ON = "startedOn";
  private JsonNullable<OffsetDateTime> startedOn = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_COMPLETED_ON = "completedOn";
  private JsonNullable<OffsetDateTime> completedOn = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_DURATION = "duration";
  private JsonNullable<Long> duration = JsonNullable.<Long>undefined();

  public TestResultShortResponse() { 
  }

  public TestResultShortResponse id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Unique ID of the test result
   * @return id
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(UUID id) {
    this.id = id;
  }


  public TestResultShortResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of autotest represented by the test result
   * @return name
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public TestResultShortResponse autotestGlobalId(Long autotestGlobalId) {
    this.autotestGlobalId = autotestGlobalId;
    return this;
  }

  /**
   * Global ID of autotest represented by the test result
   * @return autotestGlobalId
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AUTOTEST_GLOBAL_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getAutotestGlobalId() {
    return autotestGlobalId;
  }


  @JsonProperty(JSON_PROPERTY_AUTOTEST_GLOBAL_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAutotestGlobalId(Long autotestGlobalId) {
    this.autotestGlobalId = autotestGlobalId;
  }


  public TestResultShortResponse testRunId(UUID testRunId) {
    this.testRunId = testRunId;
    return this;
  }

  /**
   * Unique ID of test run where the test result is located
   * @return testRunId
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TEST_RUN_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getTestRunId() {
    return testRunId;
  }


  @JsonProperty(JSON_PROPERTY_TEST_RUN_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTestRunId(UUID testRunId) {
    this.testRunId = testRunId;
  }


  public TestResultShortResponse configurationId(UUID configurationId) {
    this.configurationId = configurationId;
    return this;
  }

  /**
   * Unique ID of configuration which the test result uses
   * @return configurationId
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CONFIGURATION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getConfigurationId() {
    return configurationId;
  }


  @JsonProperty(JSON_PROPERTY_CONFIGURATION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConfigurationId(UUID configurationId) {
    this.configurationId = configurationId;
  }


  public TestResultShortResponse configurationName(String configurationName) {
    this.configurationName = configurationName;
    return this;
  }

  /**
   * Name of configuration which the test result uses
   * @return configurationName
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CONFIGURATION_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getConfigurationName() {
    return configurationName;
  }


  @JsonProperty(JSON_PROPERTY_CONFIGURATION_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConfigurationName(String configurationName) {
    this.configurationName = configurationName;
  }


  public TestResultShortResponse resultReasons(List<AutoTestResultReasonShort> resultReasons) {
    this.resultReasons = resultReasons;
    return this;
  }

  public TestResultShortResponse addResultReasonsItem(AutoTestResultReasonShort resultReasonsItem) {
    if (this.resultReasons == null) {
      this.resultReasons = new ArrayList<>();
    }
    this.resultReasons.add(resultReasonsItem);
    return this;
  }

  /**
   * Collection of result reasons which the test result have
   * @return resultReasons
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RESULT_REASONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<AutoTestResultReasonShort> getResultReasons() {
    return resultReasons;
  }


  @JsonProperty(JSON_PROPERTY_RESULT_REASONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setResultReasons(List<AutoTestResultReasonShort> resultReasons) {
    this.resultReasons = resultReasons;
  }


  @Deprecated
  public TestResultShortResponse date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

  /**
   * Date when the test result was completed or started or created
   * @return date
   * @deprecated
   */
  @Deprecated
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getDate() {
    return date;
  }


  @Deprecated
  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public TestResultShortResponse createdDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Date when the test result has been created
   * @return createdDate
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public TestResultShortResponse links(List<LinkShort> links) {
    this.links = links;
    return this;
  }

  public TestResultShortResponse addLinksItem(LinkShort linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

  /**
   * Collection of links attached to the test result
   * @return links
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LINKS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<LinkShort> getLinks() {
    return links;
  }


  @JsonProperty(JSON_PROPERTY_LINKS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLinks(List<LinkShort> links) {
    this.links = links;
  }


  public TestResultShortResponse attachments(List<AttachmentApiResult> attachments) {
    this.attachments = attachments;
    return this;
  }

  public TestResultShortResponse addAttachmentsItem(AttachmentApiResult attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * Collection of files attached to the test result
   * @return attachments
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ATTACHMENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<AttachmentApiResult> getAttachments() {
    return attachments;
  }


  @JsonProperty(JSON_PROPERTY_ATTACHMENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAttachments(List<AttachmentApiResult> attachments) {
    this.attachments = attachments;
  }


  public TestResultShortResponse rerunCompletedCount(Integer rerunCompletedCount) {
    this.rerunCompletedCount = rerunCompletedCount;
    return this;
  }

  /**
   * Run count
   * @return rerunCompletedCount
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RERUN_COMPLETED_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getRerunCompletedCount() {
    return rerunCompletedCount;
  }


  @JsonProperty(JSON_PROPERTY_RERUN_COMPLETED_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRerunCompletedCount(Integer rerunCompletedCount) {
    this.rerunCompletedCount = rerunCompletedCount;
  }


  @Deprecated
  public TestResultShortResponse outcome(String outcome) {
    this.outcome = JsonNullable.<String>of(outcome);
    return this;
  }

  /**
   * Outcome of the test result
   * @return outcome
   * @deprecated
   */
  @Deprecated
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getOutcome() {
        return outcome.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_OUTCOME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getOutcome_JsonNullable() {
    return outcome;
  }
  
  @JsonProperty(JSON_PROPERTY_OUTCOME)
  public void setOutcome_JsonNullable(JsonNullable<String> outcome) {
    this.outcome = outcome;
  }

  @Deprecated
  public void setOutcome(String outcome) {
    this.outcome = JsonNullable.<String>of(outcome);
  }


  public TestResultShortResponse status(TestStatusApiResult status) {
    this.status = JsonNullable.<TestStatusApiResult>of(status);
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public TestStatusApiResult getStatus() {
        return status.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<TestStatusApiResult> getStatus_JsonNullable() {
    return status;
  }
  
  @JsonProperty(JSON_PROPERTY_STATUS)
  public void setStatus_JsonNullable(JsonNullable<TestStatusApiResult> status) {
    this.status = status;
  }

  public void setStatus(TestStatusApiResult status) {
    this.status = JsonNullable.<TestStatusApiResult>of(status);
  }


  public TestResultShortResponse comment(String comment) {
    this.comment = JsonNullable.<String>of(comment);
    return this;
  }

  /**
   * Comment to the test result
   * @return comment
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getComment() {
        return comment.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_COMMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getComment_JsonNullable() {
    return comment;
  }
  
  @JsonProperty(JSON_PROPERTY_COMMENT)
  public void setComment_JsonNullable(JsonNullable<String> comment) {
    this.comment = comment;
  }

  public void setComment(String comment) {
    this.comment = JsonNullable.<String>of(comment);
  }


  public TestResultShortResponse modifiedDate(OffsetDateTime modifiedDate) {
    this.modifiedDate = JsonNullable.<OffsetDateTime>of(modifiedDate);
    return this;
  }

  /**
   * Date when the test result has been modified
   * @return modifiedDate
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public OffsetDateTime getModifiedDate() {
        return modifiedDate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MODIFIED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getModifiedDate_JsonNullable() {
    return modifiedDate;
  }
  
  @JsonProperty(JSON_PROPERTY_MODIFIED_DATE)
  public void setModifiedDate_JsonNullable(JsonNullable<OffsetDateTime> modifiedDate) {
    this.modifiedDate = modifiedDate;
  }

  public void setModifiedDate(OffsetDateTime modifiedDate) {
    this.modifiedDate = JsonNullable.<OffsetDateTime>of(modifiedDate);
  }


  public TestResultShortResponse startedOn(OffsetDateTime startedOn) {
    this.startedOn = JsonNullable.<OffsetDateTime>of(startedOn);
    return this;
  }

  /**
   * Date when the test result has been started
   * @return startedOn
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public OffsetDateTime getStartedOn() {
        return startedOn.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_STARTED_ON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getStartedOn_JsonNullable() {
    return startedOn;
  }
  
  @JsonProperty(JSON_PROPERTY_STARTED_ON)
  public void setStartedOn_JsonNullable(JsonNullable<OffsetDateTime> startedOn) {
    this.startedOn = startedOn;
  }

  public void setStartedOn(OffsetDateTime startedOn) {
    this.startedOn = JsonNullable.<OffsetDateTime>of(startedOn);
  }


  public TestResultShortResponse completedOn(OffsetDateTime completedOn) {
    this.completedOn = JsonNullable.<OffsetDateTime>of(completedOn);
    return this;
  }

  /**
   * Date when the test result has been completed
   * @return completedOn
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public OffsetDateTime getCompletedOn() {
        return completedOn.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_COMPLETED_ON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getCompletedOn_JsonNullable() {
    return completedOn;
  }
  
  @JsonProperty(JSON_PROPERTY_COMPLETED_ON)
  public void setCompletedOn_JsonNullable(JsonNullable<OffsetDateTime> completedOn) {
    this.completedOn = completedOn;
  }

  public void setCompletedOn(OffsetDateTime completedOn) {
    this.completedOn = JsonNullable.<OffsetDateTime>of(completedOn);
  }


  public TestResultShortResponse duration(Long duration) {
    this.duration = JsonNullable.<Long>of(duration);
    return this;
  }

  /**
   * Time which it took to run the test
   * @return duration
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Long getDuration() {
        return duration.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Long> getDuration_JsonNullable() {
    return duration;
  }
  
  @JsonProperty(JSON_PROPERTY_DURATION)
  public void setDuration_JsonNullable(JsonNullable<Long> duration) {
    this.duration = duration;
  }

  public void setDuration(Long duration) {
    this.duration = JsonNullable.<Long>of(duration);
  }


  /**
   * Return true if this TestResultShortResponse object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestResultShortResponse testResultShortResponse = (TestResultShortResponse) o;
    return Objects.equals(this.id, testResultShortResponse.id) &&
        Objects.equals(this.name, testResultShortResponse.name) &&
        Objects.equals(this.autotestGlobalId, testResultShortResponse.autotestGlobalId) &&
        Objects.equals(this.testRunId, testResultShortResponse.testRunId) &&
        Objects.equals(this.configurationId, testResultShortResponse.configurationId) &&
        Objects.equals(this.configurationName, testResultShortResponse.configurationName) &&
        Objects.equals(this.resultReasons, testResultShortResponse.resultReasons) &&
        Objects.equals(this.date, testResultShortResponse.date) &&
        Objects.equals(this.createdDate, testResultShortResponse.createdDate) &&
        Objects.equals(this.links, testResultShortResponse.links) &&
        Objects.equals(this.attachments, testResultShortResponse.attachments) &&
        Objects.equals(this.rerunCompletedCount, testResultShortResponse.rerunCompletedCount) &&
        equalsNullable(this.outcome, testResultShortResponse.outcome) &&
        equalsNullable(this.status, testResultShortResponse.status) &&
        equalsNullable(this.comment, testResultShortResponse.comment) &&
        equalsNullable(this.modifiedDate, testResultShortResponse.modifiedDate) &&
        equalsNullable(this.startedOn, testResultShortResponse.startedOn) &&
        equalsNullable(this.completedOn, testResultShortResponse.completedOn) &&
        equalsNullable(this.duration, testResultShortResponse.duration);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, autotestGlobalId, testRunId, configurationId, configurationName, resultReasons, date, createdDate, links, attachments, rerunCompletedCount, hashCodeNullable(outcome), hashCodeNullable(status), hashCodeNullable(comment), hashCodeNullable(modifiedDate), hashCodeNullable(startedOn), hashCodeNullable(completedOn), hashCodeNullable(duration));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestResultShortResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    autotestGlobalId: ").append(toIndentedString(autotestGlobalId)).append("\n");
    sb.append("    testRunId: ").append(toIndentedString(testRunId)).append("\n");
    sb.append("    configurationId: ").append(toIndentedString(configurationId)).append("\n");
    sb.append("    configurationName: ").append(toIndentedString(configurationName)).append("\n");
    sb.append("    resultReasons: ").append(toIndentedString(resultReasons)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    rerunCompletedCount: ").append(toIndentedString(rerunCompletedCount)).append("\n");
    sb.append("    outcome: ").append(toIndentedString(outcome)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("    startedOn: ").append(toIndentedString(startedOn)).append("\n");
    sb.append("    completedOn: ").append(toIndentedString(completedOn)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

