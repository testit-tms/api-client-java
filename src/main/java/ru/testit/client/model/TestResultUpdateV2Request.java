/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import ru.testit.client.model.AttachmentPutModelAutoTestStepResultsModel;
import ru.testit.client.model.AttachmentUpdateRequest;
import ru.testit.client.model.Link;
import ru.testit.client.model.StepResult;
import ru.testit.client.model.TestResultOutcome;
import ru.testit.client.model.TestResultStepCommentUpdateRequest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import ru.testit.client.invoker.JSON;

/**
 * TestResultUpdateV2Request
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class TestResultUpdateV2Request {
  public static final String SERIALIZED_NAME_FAILURE_CLASS_IDS = "failureClassIds";
  @SerializedName(SERIALIZED_NAME_FAILURE_CLASS_IDS)
  @javax.annotation.Nullable
  private List<UUID> failureClassIds;

  public static final String SERIALIZED_NAME_OUTCOME = "outcome";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_OUTCOME)
  @javax.annotation.Nullable
  private TestResultOutcome outcome;

  public static final String SERIALIZED_NAME_STATUS_CODE = "statusCode";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  @javax.annotation.Nullable
  private String statusCode;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  @javax.annotation.Nullable
  private String comment;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  @javax.annotation.Nullable
  private List<Link> links;

  public static final String SERIALIZED_NAME_STEP_RESULTS = "stepResults";
  @SerializedName(SERIALIZED_NAME_STEP_RESULTS)
  @javax.annotation.Nullable
  private List<StepResult> stepResults;

  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  @javax.annotation.Nullable
  private List<AttachmentUpdateRequest> attachments;

  public static final String SERIALIZED_NAME_DURATION_IN_MS = "durationInMs";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_DURATION_IN_MS)
  @javax.annotation.Nullable
  private Long durationInMs;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  @javax.annotation.Nullable
  private Long duration;

  public static final String SERIALIZED_NAME_STEP_COMMENTS = "stepComments";
  @SerializedName(SERIALIZED_NAME_STEP_COMMENTS)
  @javax.annotation.Nullable
  private List<TestResultStepCommentUpdateRequest> stepComments;

  public static final String SERIALIZED_NAME_SETUP_RESULTS = "setupResults";
  @SerializedName(SERIALIZED_NAME_SETUP_RESULTS)
  @javax.annotation.Nullable
  private List<AttachmentPutModelAutoTestStepResultsModel> setupResults;

  public static final String SERIALIZED_NAME_TEARDOWN_RESULTS = "teardownResults";
  @SerializedName(SERIALIZED_NAME_TEARDOWN_RESULTS)
  @javax.annotation.Nullable
  private List<AttachmentPutModelAutoTestStepResultsModel> teardownResults;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  @javax.annotation.Nullable
  private String message;

  public static final String SERIALIZED_NAME_TRACE = "trace";
  @SerializedName(SERIALIZED_NAME_TRACE)
  @javax.annotation.Nullable
  private String trace;

  public TestResultUpdateV2Request() {
  }

  public TestResultUpdateV2Request failureClassIds(@javax.annotation.Nullable List<UUID> failureClassIds) {
    this.failureClassIds = failureClassIds;
    return this;
  }

  public TestResultUpdateV2Request addFailureClassIdsItem(UUID failureClassIdsItem) {
    if (this.failureClassIds == null) {
      this.failureClassIds = new ArrayList<>();
    }
    this.failureClassIds.add(failureClassIdsItem);
    return this;
  }

  /**
   * Get failureClassIds
   * @return failureClassIds
   */
  @javax.annotation.Nullable
  public List<UUID> getFailureClassIds() {
    return failureClassIds;
  }

  public void setFailureClassIds(@javax.annotation.Nullable List<UUID> failureClassIds) {
    this.failureClassIds = failureClassIds;
  }


  @Deprecated
  public TestResultUpdateV2Request outcome(@javax.annotation.Nullable TestResultOutcome outcome) {
    this.outcome = outcome;
    return this;
  }

  /**
   * Get outcome
   * @return outcome
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public TestResultOutcome getOutcome() {
    return outcome;
  }

  @Deprecated
  public void setOutcome(@javax.annotation.Nullable TestResultOutcome outcome) {
    this.outcome = outcome;
  }


  public TestResultUpdateV2Request statusCode(@javax.annotation.Nullable String statusCode) {
    this.statusCode = statusCode;
    return this;
  }

  /**
   * Get statusCode
   * @return statusCode
   */
  @javax.annotation.Nullable
  public String getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(@javax.annotation.Nullable String statusCode) {
    this.statusCode = statusCode;
  }


  public TestResultUpdateV2Request comment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
  }


  public TestResultUpdateV2Request links(@javax.annotation.Nullable List<Link> links) {
    this.links = links;
    return this;
  }

  public TestResultUpdateV2Request addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public List<Link> getLinks() {
    return links;
  }

  public void setLinks(@javax.annotation.Nullable List<Link> links) {
    this.links = links;
  }


  public TestResultUpdateV2Request stepResults(@javax.annotation.Nullable List<StepResult> stepResults) {
    this.stepResults = stepResults;
    return this;
  }

  public TestResultUpdateV2Request addStepResultsItem(StepResult stepResultsItem) {
    if (this.stepResults == null) {
      this.stepResults = new ArrayList<>();
    }
    this.stepResults.add(stepResultsItem);
    return this;
  }

  /**
   * Get stepResults
   * @return stepResults
   */
  @javax.annotation.Nullable
  public List<StepResult> getStepResults() {
    return stepResults;
  }

  public void setStepResults(@javax.annotation.Nullable List<StepResult> stepResults) {
    this.stepResults = stepResults;
  }


  public TestResultUpdateV2Request attachments(@javax.annotation.Nullable List<AttachmentUpdateRequest> attachments) {
    this.attachments = attachments;
    return this;
  }

  public TestResultUpdateV2Request addAttachmentsItem(AttachmentUpdateRequest attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * Get attachments
   * @return attachments
   */
  @javax.annotation.Nullable
  public List<AttachmentUpdateRequest> getAttachments() {
    return attachments;
  }

  public void setAttachments(@javax.annotation.Nullable List<AttachmentUpdateRequest> attachments) {
    this.attachments = attachments;
  }


  @Deprecated
  public TestResultUpdateV2Request durationInMs(@javax.annotation.Nullable Long durationInMs) {
    this.durationInMs = durationInMs;
    return this;
  }

  /**
   * Get durationInMs
   * minimum: 0
   * @return durationInMs
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Long getDurationInMs() {
    return durationInMs;
  }

  @Deprecated
  public void setDurationInMs(@javax.annotation.Nullable Long durationInMs) {
    this.durationInMs = durationInMs;
  }


  public TestResultUpdateV2Request duration(@javax.annotation.Nullable Long duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Get duration
   * minimum: 0
   * @return duration
   */
  @javax.annotation.Nullable
  public Long getDuration() {
    return duration;
  }

  public void setDuration(@javax.annotation.Nullable Long duration) {
    this.duration = duration;
  }


  public TestResultUpdateV2Request stepComments(@javax.annotation.Nullable List<TestResultStepCommentUpdateRequest> stepComments) {
    this.stepComments = stepComments;
    return this;
  }

  public TestResultUpdateV2Request addStepCommentsItem(TestResultStepCommentUpdateRequest stepCommentsItem) {
    if (this.stepComments == null) {
      this.stepComments = new ArrayList<>();
    }
    this.stepComments.add(stepCommentsItem);
    return this;
  }

  /**
   * Get stepComments
   * @return stepComments
   */
  @javax.annotation.Nullable
  public List<TestResultStepCommentUpdateRequest> getStepComments() {
    return stepComments;
  }

  public void setStepComments(@javax.annotation.Nullable List<TestResultStepCommentUpdateRequest> stepComments) {
    this.stepComments = stepComments;
  }


  public TestResultUpdateV2Request setupResults(@javax.annotation.Nullable List<AttachmentPutModelAutoTestStepResultsModel> setupResults) {
    this.setupResults = setupResults;
    return this;
  }

  public TestResultUpdateV2Request addSetupResultsItem(AttachmentPutModelAutoTestStepResultsModel setupResultsItem) {
    if (this.setupResults == null) {
      this.setupResults = new ArrayList<>();
    }
    this.setupResults.add(setupResultsItem);
    return this;
  }

  /**
   * Get setupResults
   * @return setupResults
   */
  @javax.annotation.Nullable
  public List<AttachmentPutModelAutoTestStepResultsModel> getSetupResults() {
    return setupResults;
  }

  public void setSetupResults(@javax.annotation.Nullable List<AttachmentPutModelAutoTestStepResultsModel> setupResults) {
    this.setupResults = setupResults;
  }


  public TestResultUpdateV2Request teardownResults(@javax.annotation.Nullable List<AttachmentPutModelAutoTestStepResultsModel> teardownResults) {
    this.teardownResults = teardownResults;
    return this;
  }

  public TestResultUpdateV2Request addTeardownResultsItem(AttachmentPutModelAutoTestStepResultsModel teardownResultsItem) {
    if (this.teardownResults == null) {
      this.teardownResults = new ArrayList<>();
    }
    this.teardownResults.add(teardownResultsItem);
    return this;
  }

  /**
   * Get teardownResults
   * @return teardownResults
   */
  @javax.annotation.Nullable
  public List<AttachmentPutModelAutoTestStepResultsModel> getTeardownResults() {
    return teardownResults;
  }

  public void setTeardownResults(@javax.annotation.Nullable List<AttachmentPutModelAutoTestStepResultsModel> teardownResults) {
    this.teardownResults = teardownResults;
  }


  public TestResultUpdateV2Request message(@javax.annotation.Nullable String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(@javax.annotation.Nullable String message) {
    this.message = message;
  }


  public TestResultUpdateV2Request trace(@javax.annotation.Nullable String trace) {
    this.trace = trace;
    return this;
  }

  /**
   * Get trace
   * @return trace
   */
  @javax.annotation.Nullable
  public String getTrace() {
    return trace;
  }

  public void setTrace(@javax.annotation.Nullable String trace) {
    this.trace = trace;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestResultUpdateV2Request testResultUpdateV2Request = (TestResultUpdateV2Request) o;
    return Objects.equals(this.failureClassIds, testResultUpdateV2Request.failureClassIds) &&
        Objects.equals(this.outcome, testResultUpdateV2Request.outcome) &&
        Objects.equals(this.statusCode, testResultUpdateV2Request.statusCode) &&
        Objects.equals(this.comment, testResultUpdateV2Request.comment) &&
        Objects.equals(this.links, testResultUpdateV2Request.links) &&
        Objects.equals(this.stepResults, testResultUpdateV2Request.stepResults) &&
        Objects.equals(this.attachments, testResultUpdateV2Request.attachments) &&
        Objects.equals(this.durationInMs, testResultUpdateV2Request.durationInMs) &&
        Objects.equals(this.duration, testResultUpdateV2Request.duration) &&
        Objects.equals(this.stepComments, testResultUpdateV2Request.stepComments) &&
        Objects.equals(this.setupResults, testResultUpdateV2Request.setupResults) &&
        Objects.equals(this.teardownResults, testResultUpdateV2Request.teardownResults) &&
        Objects.equals(this.message, testResultUpdateV2Request.message) &&
        Objects.equals(this.trace, testResultUpdateV2Request.trace);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(failureClassIds, outcome, statusCode, comment, links, stepResults, attachments, durationInMs, duration, stepComments, setupResults, teardownResults, message, trace);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestResultUpdateV2Request {\n");
    sb.append("    failureClassIds: ").append(toIndentedString(failureClassIds)).append("\n");
    sb.append("    outcome: ").append(toIndentedString(outcome)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    stepResults: ").append(toIndentedString(stepResults)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    durationInMs: ").append(toIndentedString(durationInMs)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    stepComments: ").append(toIndentedString(stepComments)).append("\n");
    sb.append("    setupResults: ").append(toIndentedString(setupResults)).append("\n");
    sb.append("    teardownResults: ").append(toIndentedString(teardownResults)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    trace: ").append(toIndentedString(trace)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("failureClassIds");
    openapiFields.add("outcome");
    openapiFields.add("statusCode");
    openapiFields.add("comment");
    openapiFields.add("links");
    openapiFields.add("stepResults");
    openapiFields.add("attachments");
    openapiFields.add("durationInMs");
    openapiFields.add("duration");
    openapiFields.add("stepComments");
    openapiFields.add("setupResults");
    openapiFields.add("teardownResults");
    openapiFields.add("message");
    openapiFields.add("trace");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestResultUpdateV2Request
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestResultUpdateV2Request.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestResultUpdateV2Request is not found in the empty JSON string", TestResultUpdateV2Request.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestResultUpdateV2Request.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestResultUpdateV2Request` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("failureClassIds") != null && !jsonObj.get("failureClassIds").isJsonNull() && !jsonObj.get("failureClassIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `failureClassIds` to be an array in the JSON string but got `%s`", jsonObj.get("failureClassIds").toString()));
      }
      // validate the optional field `outcome`
      if (jsonObj.get("outcome") != null && !jsonObj.get("outcome").isJsonNull()) {
        TestResultOutcome.validateJsonElement(jsonObj.get("outcome"));
      }
      if ((jsonObj.get("statusCode") != null && !jsonObj.get("statusCode").isJsonNull()) && !jsonObj.get("statusCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusCode").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            Link.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
      if (jsonObj.get("stepResults") != null && !jsonObj.get("stepResults").isJsonNull()) {
        JsonArray jsonArraystepResults = jsonObj.getAsJsonArray("stepResults");
        if (jsonArraystepResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("stepResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `stepResults` to be an array in the JSON string but got `%s`", jsonObj.get("stepResults").toString()));
          }

          // validate the optional field `stepResults` (array)
          for (int i = 0; i < jsonArraystepResults.size(); i++) {
            StepResult.validateJsonElement(jsonArraystepResults.get(i));
          };
        }
      }
      if (jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonNull()) {
        JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("attachments");
        if (jsonArrayattachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
          }

          // validate the optional field `attachments` (array)
          for (int i = 0; i < jsonArrayattachments.size(); i++) {
            AttachmentUpdateRequest.validateJsonElement(jsonArrayattachments.get(i));
          };
        }
      }
      if (jsonObj.get("stepComments") != null && !jsonObj.get("stepComments").isJsonNull()) {
        JsonArray jsonArraystepComments = jsonObj.getAsJsonArray("stepComments");
        if (jsonArraystepComments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("stepComments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `stepComments` to be an array in the JSON string but got `%s`", jsonObj.get("stepComments").toString()));
          }

          // validate the optional field `stepComments` (array)
          for (int i = 0; i < jsonArraystepComments.size(); i++) {
            TestResultStepCommentUpdateRequest.validateJsonElement(jsonArraystepComments.get(i));
          };
        }
      }
      if (jsonObj.get("setupResults") != null && !jsonObj.get("setupResults").isJsonNull()) {
        JsonArray jsonArraysetupResults = jsonObj.getAsJsonArray("setupResults");
        if (jsonArraysetupResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("setupResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `setupResults` to be an array in the JSON string but got `%s`", jsonObj.get("setupResults").toString()));
          }

          // validate the optional field `setupResults` (array)
          for (int i = 0; i < jsonArraysetupResults.size(); i++) {
            AttachmentPutModelAutoTestStepResultsModel.validateJsonElement(jsonArraysetupResults.get(i));
          };
        }
      }
      if (jsonObj.get("teardownResults") != null && !jsonObj.get("teardownResults").isJsonNull()) {
        JsonArray jsonArrayteardownResults = jsonObj.getAsJsonArray("teardownResults");
        if (jsonArrayteardownResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("teardownResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `teardownResults` to be an array in the JSON string but got `%s`", jsonObj.get("teardownResults").toString()));
          }

          // validate the optional field `teardownResults` (array)
          for (int i = 0; i < jsonArrayteardownResults.size(); i++) {
            AttachmentPutModelAutoTestStepResultsModel.validateJsonElement(jsonArrayteardownResults.get(i));
          };
        }
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("trace") != null && !jsonObj.get("trace").isJsonNull()) && !jsonObj.get("trace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trace").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestResultUpdateV2Request.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestResultUpdateV2Request' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestResultUpdateV2Request> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestResultUpdateV2Request.class));

       return (TypeAdapter<T>) new TypeAdapter<TestResultUpdateV2Request>() {
           @Override
           public void write(JsonWriter out, TestResultUpdateV2Request value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestResultUpdateV2Request read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestResultUpdateV2Request given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestResultUpdateV2Request
   * @throws IOException if the JSON string is invalid with respect to TestResultUpdateV2Request
   */
  public static TestResultUpdateV2Request fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestResultUpdateV2Request.class);
  }

  /**
   * Convert an instance of TestResultUpdateV2Request to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

