/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import ru.testit.client.invoker.JSON;


/**
 * Test results counts aggregated by result failure categories
 */
@JsonPropertyOrder({
  TestResultsStatisticsGetModelFailureCategories.JSON_PROPERTY_NO_ANALYTICS,
  TestResultsStatisticsGetModelFailureCategories.JSON_PROPERTY_NO_DEFECT,
  TestResultsStatisticsGetModelFailureCategories.JSON_PROPERTY_INFRASTRUCTURE_DEFECT,
  TestResultsStatisticsGetModelFailureCategories.JSON_PROPERTY_PRODUCT_DEFECT,
  TestResultsStatisticsGetModelFailureCategories.JSON_PROPERTY_TEST_DEFECT
})
@JsonTypeName("TestResultsStatisticsGetModel_failureCategories")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TestResultsStatisticsGetModelFailureCategories {
  public static final String JSON_PROPERTY_NO_ANALYTICS = "noAnalytics";
  private Integer noAnalytics;

  public static final String JSON_PROPERTY_NO_DEFECT = "noDefect";
  private Integer noDefect;

  public static final String JSON_PROPERTY_INFRASTRUCTURE_DEFECT = "infrastructureDefect";
  private Integer infrastructureDefect;

  public static final String JSON_PROPERTY_PRODUCT_DEFECT = "productDefect";
  private Integer productDefect;

  public static final String JSON_PROPERTY_TEST_DEFECT = "testDefect";
  private Integer testDefect;

  public TestResultsStatisticsGetModelFailureCategories() { 
  }

  public TestResultsStatisticsGetModelFailureCategories noAnalytics(Integer noAnalytics) {
    this.noAnalytics = noAnalytics;
    return this;
  }

   /**
   * Number of test results which outcomes were not analyzed
   * @return noAnalytics
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NO_ANALYTICS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getNoAnalytics() {
    return noAnalytics;
  }


  @JsonProperty(JSON_PROPERTY_NO_ANALYTICS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNoAnalytics(Integer noAnalytics) {
    this.noAnalytics = noAnalytics;
  }


  public TestResultsStatisticsGetModelFailureCategories noDefect(Integer noDefect) {
    this.noDefect = noDefect;
    return this;
  }

   /**
   * Number of test results which outcomes were not caused by any defect
   * @return noDefect
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NO_DEFECT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getNoDefect() {
    return noDefect;
  }


  @JsonProperty(JSON_PROPERTY_NO_DEFECT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNoDefect(Integer noDefect) {
    this.noDefect = noDefect;
  }


  public TestResultsStatisticsGetModelFailureCategories infrastructureDefect(Integer infrastructureDefect) {
    this.infrastructureDefect = infrastructureDefect;
    return this;
  }

   /**
   * Number of test results which outcomes were caused by some infrastructure defect
   * @return infrastructureDefect
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INFRASTRUCTURE_DEFECT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getInfrastructureDefect() {
    return infrastructureDefect;
  }


  @JsonProperty(JSON_PROPERTY_INFRASTRUCTURE_DEFECT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInfrastructureDefect(Integer infrastructureDefect) {
    this.infrastructureDefect = infrastructureDefect;
  }


  public TestResultsStatisticsGetModelFailureCategories productDefect(Integer productDefect) {
    this.productDefect = productDefect;
    return this;
  }

   /**
   * Number of test results which outcomes were caused by some tested product defect
   * @return productDefect
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PRODUCT_DEFECT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getProductDefect() {
    return productDefect;
  }


  @JsonProperty(JSON_PROPERTY_PRODUCT_DEFECT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProductDefect(Integer productDefect) {
    this.productDefect = productDefect;
  }


  public TestResultsStatisticsGetModelFailureCategories testDefect(Integer testDefect) {
    this.testDefect = testDefect;
    return this;
  }

   /**
   * Number of test results which outcomes were caused by test itself
   * @return testDefect
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TEST_DEFECT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getTestDefect() {
    return testDefect;
  }


  @JsonProperty(JSON_PROPERTY_TEST_DEFECT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTestDefect(Integer testDefect) {
    this.testDefect = testDefect;
  }


  /**
   * Return true if this TestResultsStatisticsGetModel_failureCategories object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestResultsStatisticsGetModelFailureCategories testResultsStatisticsGetModelFailureCategories = (TestResultsStatisticsGetModelFailureCategories) o;
    return Objects.equals(this.noAnalytics, testResultsStatisticsGetModelFailureCategories.noAnalytics) &&
        Objects.equals(this.noDefect, testResultsStatisticsGetModelFailureCategories.noDefect) &&
        Objects.equals(this.infrastructureDefect, testResultsStatisticsGetModelFailureCategories.infrastructureDefect) &&
        Objects.equals(this.productDefect, testResultsStatisticsGetModelFailureCategories.productDefect) &&
        Objects.equals(this.testDefect, testResultsStatisticsGetModelFailureCategories.testDefect);
  }

  @Override
  public int hashCode() {
    return Objects.hash(noAnalytics, noDefect, infrastructureDefect, productDefect, testDefect);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestResultsStatisticsGetModelFailureCategories {\n");
    sb.append("    noAnalytics: ").append(toIndentedString(noAnalytics)).append("\n");
    sb.append("    noDefect: ").append(toIndentedString(noDefect)).append("\n");
    sb.append("    infrastructureDefect: ").append(toIndentedString(infrastructureDefect)).append("\n");
    sb.append("    productDefect: ").append(toIndentedString(productDefect)).append("\n");
    sb.append("    testDefect: ").append(toIndentedString(testDefect)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

