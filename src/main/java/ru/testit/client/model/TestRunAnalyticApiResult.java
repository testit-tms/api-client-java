/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import ru.testit.client.model.TestRunGroupByFailureClassApiResult;
import ru.testit.client.model.TestRunGroupByStatusApiResult;
import ru.testit.client.model.TestRunGroupByStatusTypeApiResult;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import ru.testit.client.invoker.JSON;

/**
 * TestRunAnalyticApiResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0")
public class TestRunAnalyticApiResult {
  public static final String SERIALIZED_NAME_COUNT_GROUP_BY_STATUS = "countGroupByStatus";
  @SerializedName(SERIALIZED_NAME_COUNT_GROUP_BY_STATUS)
  private List<TestRunGroupByStatusApiResult> countGroupByStatus = new ArrayList<>();

  public static final String SERIALIZED_NAME_COUNT_GROUP_BY_STATUS_TYPE = "countGroupByStatusType";
  @SerializedName(SERIALIZED_NAME_COUNT_GROUP_BY_STATUS_TYPE)
  private List<TestRunGroupByStatusTypeApiResult> countGroupByStatusType = new ArrayList<>();

  public static final String SERIALIZED_NAME_COUNT_GROUP_BY_FAILURE_CLASS = "countGroupByFailureClass";
  @SerializedName(SERIALIZED_NAME_COUNT_GROUP_BY_FAILURE_CLASS)
  private List<TestRunGroupByFailureClassApiResult> countGroupByFailureClass = new ArrayList<>();

  public TestRunAnalyticApiResult() {
  }

  public TestRunAnalyticApiResult countGroupByStatus(List<TestRunGroupByStatusApiResult> countGroupByStatus) {
    this.countGroupByStatus = countGroupByStatus;
    return this;
  }

  public TestRunAnalyticApiResult addCountGroupByStatusItem(TestRunGroupByStatusApiResult countGroupByStatusItem) {
    if (this.countGroupByStatus == null) {
      this.countGroupByStatus = new ArrayList<>();
    }
    this.countGroupByStatus.add(countGroupByStatusItem);
    return this;
  }

  /**
   * Get countGroupByStatus
   * @return countGroupByStatus
   */
  @javax.annotation.Nonnull
  public List<TestRunGroupByStatusApiResult> getCountGroupByStatus() {
    return countGroupByStatus;
  }

  public void setCountGroupByStatus(List<TestRunGroupByStatusApiResult> countGroupByStatus) {
    this.countGroupByStatus = countGroupByStatus;
  }


  public TestRunAnalyticApiResult countGroupByStatusType(List<TestRunGroupByStatusTypeApiResult> countGroupByStatusType) {
    this.countGroupByStatusType = countGroupByStatusType;
    return this;
  }

  public TestRunAnalyticApiResult addCountGroupByStatusTypeItem(TestRunGroupByStatusTypeApiResult countGroupByStatusTypeItem) {
    if (this.countGroupByStatusType == null) {
      this.countGroupByStatusType = new ArrayList<>();
    }
    this.countGroupByStatusType.add(countGroupByStatusTypeItem);
    return this;
  }

  /**
   * Get countGroupByStatusType
   * @return countGroupByStatusType
   */
  @javax.annotation.Nonnull
  public List<TestRunGroupByStatusTypeApiResult> getCountGroupByStatusType() {
    return countGroupByStatusType;
  }

  public void setCountGroupByStatusType(List<TestRunGroupByStatusTypeApiResult> countGroupByStatusType) {
    this.countGroupByStatusType = countGroupByStatusType;
  }


  public TestRunAnalyticApiResult countGroupByFailureClass(List<TestRunGroupByFailureClassApiResult> countGroupByFailureClass) {
    this.countGroupByFailureClass = countGroupByFailureClass;
    return this;
  }

  public TestRunAnalyticApiResult addCountGroupByFailureClassItem(TestRunGroupByFailureClassApiResult countGroupByFailureClassItem) {
    if (this.countGroupByFailureClass == null) {
      this.countGroupByFailureClass = new ArrayList<>();
    }
    this.countGroupByFailureClass.add(countGroupByFailureClassItem);
    return this;
  }

  /**
   * Get countGroupByFailureClass
   * @return countGroupByFailureClass
   */
  @javax.annotation.Nonnull
  public List<TestRunGroupByFailureClassApiResult> getCountGroupByFailureClass() {
    return countGroupByFailureClass;
  }

  public void setCountGroupByFailureClass(List<TestRunGroupByFailureClassApiResult> countGroupByFailureClass) {
    this.countGroupByFailureClass = countGroupByFailureClass;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestRunAnalyticApiResult testRunAnalyticApiResult = (TestRunAnalyticApiResult) o;
    return Objects.equals(this.countGroupByStatus, testRunAnalyticApiResult.countGroupByStatus) &&
        Objects.equals(this.countGroupByStatusType, testRunAnalyticApiResult.countGroupByStatusType) &&
        Objects.equals(this.countGroupByFailureClass, testRunAnalyticApiResult.countGroupByFailureClass);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countGroupByStatus, countGroupByStatusType, countGroupByFailureClass);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestRunAnalyticApiResult {\n");
    sb.append("    countGroupByStatus: ").append(toIndentedString(countGroupByStatus)).append("\n");
    sb.append("    countGroupByStatusType: ").append(toIndentedString(countGroupByStatusType)).append("\n");
    sb.append("    countGroupByFailureClass: ").append(toIndentedString(countGroupByFailureClass)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("countGroupByStatus");
    openapiFields.add("countGroupByStatusType");
    openapiFields.add("countGroupByFailureClass");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("countGroupByStatus");
    openapiRequiredFields.add("countGroupByStatusType");
    openapiRequiredFields.add("countGroupByFailureClass");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestRunAnalyticApiResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestRunAnalyticApiResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestRunAnalyticApiResult is not found in the empty JSON string", TestRunAnalyticApiResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestRunAnalyticApiResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestRunAnalyticApiResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TestRunAnalyticApiResult.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("countGroupByStatus").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `countGroupByStatus` to be an array in the JSON string but got `%s`", jsonObj.get("countGroupByStatus").toString()));
      }

      JsonArray jsonArraycountGroupByStatus = jsonObj.getAsJsonArray("countGroupByStatus");
      // validate the required field `countGroupByStatus` (array)
      for (int i = 0; i < jsonArraycountGroupByStatus.size(); i++) {
        TestRunGroupByStatusApiResult.validateJsonElement(jsonArraycountGroupByStatus.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("countGroupByStatusType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `countGroupByStatusType` to be an array in the JSON string but got `%s`", jsonObj.get("countGroupByStatusType").toString()));
      }

      JsonArray jsonArraycountGroupByStatusType = jsonObj.getAsJsonArray("countGroupByStatusType");
      // validate the required field `countGroupByStatusType` (array)
      for (int i = 0; i < jsonArraycountGroupByStatusType.size(); i++) {
        TestRunGroupByStatusTypeApiResult.validateJsonElement(jsonArraycountGroupByStatusType.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("countGroupByFailureClass").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `countGroupByFailureClass` to be an array in the JSON string but got `%s`", jsonObj.get("countGroupByFailureClass").toString()));
      }

      JsonArray jsonArraycountGroupByFailureClass = jsonObj.getAsJsonArray("countGroupByFailureClass");
      // validate the required field `countGroupByFailureClass` (array)
      for (int i = 0; i < jsonArraycountGroupByFailureClass.size(); i++) {
        TestRunGroupByFailureClassApiResult.validateJsonElement(jsonArraycountGroupByFailureClass.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestRunAnalyticApiResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestRunAnalyticApiResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestRunAnalyticApiResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestRunAnalyticApiResult.class));

       return (TypeAdapter<T>) new TypeAdapter<TestRunAnalyticApiResult>() {
           @Override
           public void write(JsonWriter out, TestRunAnalyticApiResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestRunAnalyticApiResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestRunAnalyticApiResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestRunAnalyticApiResult
   * @throws IOException if the JSON string is invalid with respect to TestRunAnalyticApiResult
   */
  public static TestRunAnalyticApiResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestRunAnalyticApiResult.class);
  }

  /**
   * Convert an instance of TestRunAnalyticApiResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

