/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import ru.testit.client.model.TestRunGroupByFailureClassApiResult;
import ru.testit.client.model.TestRunGroupByStatusApiResult;
import ru.testit.client.model.TestRunGroupByStatusTypeApiResult;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import ru.testit.client.invoker.JSON;


/**
 * TestRunAnalyticApiResult
 */
@JsonPropertyOrder({
  TestRunAnalyticApiResult.JSON_PROPERTY_COUNT_GROUP_BY_STATUS,
  TestRunAnalyticApiResult.JSON_PROPERTY_COUNT_GROUP_BY_STATUS_TYPE,
  TestRunAnalyticApiResult.JSON_PROPERTY_COUNT_GROUP_BY_FAILURE_CLASS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0")
public class TestRunAnalyticApiResult {
  public static final String JSON_PROPERTY_COUNT_GROUP_BY_STATUS = "countGroupByStatus";
  private List<TestRunGroupByStatusApiResult> countGroupByStatus = new ArrayList<>();

  public static final String JSON_PROPERTY_COUNT_GROUP_BY_STATUS_TYPE = "countGroupByStatusType";
  private List<TestRunGroupByStatusTypeApiResult> countGroupByStatusType = new ArrayList<>();

  public static final String JSON_PROPERTY_COUNT_GROUP_BY_FAILURE_CLASS = "countGroupByFailureClass";
  private List<TestRunGroupByFailureClassApiResult> countGroupByFailureClass = new ArrayList<>();

  public TestRunAnalyticApiResult() { 
  }

  public TestRunAnalyticApiResult countGroupByStatus(List<TestRunGroupByStatusApiResult> countGroupByStatus) {
    this.countGroupByStatus = countGroupByStatus;
    return this;
  }

  public TestRunAnalyticApiResult addCountGroupByStatusItem(TestRunGroupByStatusApiResult countGroupByStatusItem) {
    if (this.countGroupByStatus == null) {
      this.countGroupByStatus = new ArrayList<>();
    }
    this.countGroupByStatus.add(countGroupByStatusItem);
    return this;
  }

  /**
   * Get countGroupByStatus
   * @return countGroupByStatus
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COUNT_GROUP_BY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<TestRunGroupByStatusApiResult> getCountGroupByStatus() {
    return countGroupByStatus;
  }


  @JsonProperty(JSON_PROPERTY_COUNT_GROUP_BY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCountGroupByStatus(List<TestRunGroupByStatusApiResult> countGroupByStatus) {
    this.countGroupByStatus = countGroupByStatus;
  }


  public TestRunAnalyticApiResult countGroupByStatusType(List<TestRunGroupByStatusTypeApiResult> countGroupByStatusType) {
    this.countGroupByStatusType = countGroupByStatusType;
    return this;
  }

  public TestRunAnalyticApiResult addCountGroupByStatusTypeItem(TestRunGroupByStatusTypeApiResult countGroupByStatusTypeItem) {
    if (this.countGroupByStatusType == null) {
      this.countGroupByStatusType = new ArrayList<>();
    }
    this.countGroupByStatusType.add(countGroupByStatusTypeItem);
    return this;
  }

  /**
   * Get countGroupByStatusType
   * @return countGroupByStatusType
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COUNT_GROUP_BY_STATUS_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<TestRunGroupByStatusTypeApiResult> getCountGroupByStatusType() {
    return countGroupByStatusType;
  }


  @JsonProperty(JSON_PROPERTY_COUNT_GROUP_BY_STATUS_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCountGroupByStatusType(List<TestRunGroupByStatusTypeApiResult> countGroupByStatusType) {
    this.countGroupByStatusType = countGroupByStatusType;
  }


  public TestRunAnalyticApiResult countGroupByFailureClass(List<TestRunGroupByFailureClassApiResult> countGroupByFailureClass) {
    this.countGroupByFailureClass = countGroupByFailureClass;
    return this;
  }

  public TestRunAnalyticApiResult addCountGroupByFailureClassItem(TestRunGroupByFailureClassApiResult countGroupByFailureClassItem) {
    if (this.countGroupByFailureClass == null) {
      this.countGroupByFailureClass = new ArrayList<>();
    }
    this.countGroupByFailureClass.add(countGroupByFailureClassItem);
    return this;
  }

  /**
   * Get countGroupByFailureClass
   * @return countGroupByFailureClass
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COUNT_GROUP_BY_FAILURE_CLASS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<TestRunGroupByFailureClassApiResult> getCountGroupByFailureClass() {
    return countGroupByFailureClass;
  }


  @JsonProperty(JSON_PROPERTY_COUNT_GROUP_BY_FAILURE_CLASS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCountGroupByFailureClass(List<TestRunGroupByFailureClassApiResult> countGroupByFailureClass) {
    this.countGroupByFailureClass = countGroupByFailureClass;
  }


  /**
   * Return true if this TestRunAnalyticApiResult object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestRunAnalyticApiResult testRunAnalyticApiResult = (TestRunAnalyticApiResult) o;
    return Objects.equals(this.countGroupByStatus, testRunAnalyticApiResult.countGroupByStatus) &&
        Objects.equals(this.countGroupByStatusType, testRunAnalyticApiResult.countGroupByStatusType) &&
        Objects.equals(this.countGroupByFailureClass, testRunAnalyticApiResult.countGroupByFailureClass);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countGroupByStatus, countGroupByStatusType, countGroupByFailureClass);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestRunAnalyticApiResult {\n");
    sb.append("    countGroupByStatus: ").append(toIndentedString(countGroupByStatus)).append("\n");
    sb.append("    countGroupByStatusType: ").append(toIndentedString(countGroupByStatusType)).append("\n");
    sb.append("    countGroupByFailureClass: ").append(toIndentedString(countGroupByFailureClass)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

