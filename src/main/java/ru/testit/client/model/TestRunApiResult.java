/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import ru.testit.client.model.AutoTestApiResult;
import ru.testit.client.model.TestPlanApiResult;
import ru.testit.client.model.TestResultApiResult;
import ru.testit.client.model.TestRunAnalyticApiResult;
import ru.testit.client.model.TestRunState;
import ru.testit.client.model.TestStatusApiResult;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import ru.testit.client.invoker.JSON;


/**
 * TestRunApiResult
 */
@JsonPropertyOrder({
  TestRunApiResult.JSON_PROPERTY_ID,
  TestRunApiResult.JSON_PROPERTY_IS_DELETED,
  TestRunApiResult.JSON_PROPERTY_BUILD,
  TestRunApiResult.JSON_PROPERTY_STATE_NAME,
  TestRunApiResult.JSON_PROPERTY_STATUS,
  TestRunApiResult.JSON_PROPERTY_PROJECT_ID,
  TestRunApiResult.JSON_PROPERTY_AUTO_TESTS,
  TestRunApiResult.JSON_PROPERTY_AUTO_TESTS_COUNT,
  TestRunApiResult.JSON_PROPERTY_TEST_SUITE_IDS,
  TestRunApiResult.JSON_PROPERTY_IS_AUTOMATED,
  TestRunApiResult.JSON_PROPERTY_ANALYTIC,
  TestRunApiResult.JSON_PROPERTY_TEST_RESULTS,
  TestRunApiResult.JSON_PROPERTY_CREATED_DATE,
  TestRunApiResult.JSON_PROPERTY_CREATED_BY_ID,
  TestRunApiResult.JSON_PROPERTY_STARTED_DATE,
  TestRunApiResult.JSON_PROPERTY_COMPLETED_DATE,
  TestRunApiResult.JSON_PROPERTY_DESCRIPTION,
  TestRunApiResult.JSON_PROPERTY_TEST_PLAN_ID,
  TestRunApiResult.JSON_PROPERTY_RUN_BY_USER_ID,
  TestRunApiResult.JSON_PROPERTY_STOPPED_BY_USER_ID,
  TestRunApiResult.JSON_PROPERTY_NAME,
  TestRunApiResult.JSON_PROPERTY_LAUNCH_SOURCE,
  TestRunApiResult.JSON_PROPERTY_TEST_PLAN,
  TestRunApiResult.JSON_PROPERTY_MODIFIED_DATE,
  TestRunApiResult.JSON_PROPERTY_MODIFIED_BY_ID,
  TestRunApiResult.JSON_PROPERTY_CREATED_BY_USER_NAME
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0")
public class TestRunApiResult {
  public static final String JSON_PROPERTY_ID = "id";
  private UUID id;

  public static final String JSON_PROPERTY_IS_DELETED = "isDeleted";
  private Boolean isDeleted;

  public static final String JSON_PROPERTY_BUILD = "build";
  private String build;

  public static final String JSON_PROPERTY_STATE_NAME = "stateName";
  @Deprecated
  private TestRunState stateName;

  public static final String JSON_PROPERTY_STATUS = "status";
  private TestStatusApiResult status;

  public static final String JSON_PROPERTY_PROJECT_ID = "projectId";
  private UUID projectId;

  public static final String JSON_PROPERTY_AUTO_TESTS = "autoTests";
  private List<AutoTestApiResult> autoTests = new ArrayList<>();

  public static final String JSON_PROPERTY_AUTO_TESTS_COUNT = "autoTestsCount";
  private Integer autoTestsCount;

  public static final String JSON_PROPERTY_TEST_SUITE_IDS = "testSuiteIds";
  private List<UUID> testSuiteIds = new ArrayList<>();

  public static final String JSON_PROPERTY_IS_AUTOMATED = "isAutomated";
  private Boolean isAutomated;

  public static final String JSON_PROPERTY_ANALYTIC = "analytic";
  private TestRunAnalyticApiResult analytic;

  public static final String JSON_PROPERTY_TEST_RESULTS = "testResults";
  private List<TestResultApiResult> testResults = new ArrayList<>();

  public static final String JSON_PROPERTY_CREATED_DATE = "createdDate";
  private OffsetDateTime createdDate;

  public static final String JSON_PROPERTY_CREATED_BY_ID = "createdById";
  private UUID createdById;

  public static final String JSON_PROPERTY_STARTED_DATE = "startedDate";
  private JsonNullable<OffsetDateTime> startedDate = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_COMPLETED_DATE = "completedDate";
  private JsonNullable<OffsetDateTime> completedDate = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private JsonNullable<String> description = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_TEST_PLAN_ID = "testPlanId";
  private JsonNullable<UUID> testPlanId = JsonNullable.<UUID>undefined();

  public static final String JSON_PROPERTY_RUN_BY_USER_ID = "runByUserId";
  private JsonNullable<UUID> runByUserId = JsonNullable.<UUID>undefined();

  public static final String JSON_PROPERTY_STOPPED_BY_USER_ID = "stoppedByUserId";
  private JsonNullable<UUID> stoppedByUserId = JsonNullable.<UUID>undefined();

  public static final String JSON_PROPERTY_NAME = "name";
  private JsonNullable<String> name = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_LAUNCH_SOURCE = "launchSource";
  private JsonNullable<String> launchSource = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_TEST_PLAN = "testPlan";
  private JsonNullable<TestPlanApiResult> testPlan = JsonNullable.<TestPlanApiResult>undefined();

  public static final String JSON_PROPERTY_MODIFIED_DATE = "modifiedDate";
  private JsonNullable<OffsetDateTime> modifiedDate = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_MODIFIED_BY_ID = "modifiedById";
  private JsonNullable<UUID> modifiedById = JsonNullable.<UUID>undefined();

  public static final String JSON_PROPERTY_CREATED_BY_USER_NAME = "createdByUserName";
  private JsonNullable<String> createdByUserName = JsonNullable.<String>undefined();

  public TestRunApiResult() { 
  }

  public TestRunApiResult id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Unique ID of the entity
   * @return id
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(UUID id) {
    this.id = id;
  }


  public TestRunApiResult isDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
    return this;
  }

  /**
   * Indicates if the entity is deleted
   * @return isDeleted
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_DELETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsDeleted() {
    return isDeleted;
  }


  @JsonProperty(JSON_PROPERTY_IS_DELETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
  }


  public TestRunApiResult build(String build) {
    this.build = build;
    return this;
  }

  /**
   * Get build
   * @return build
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BUILD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getBuild() {
    return build;
  }


  @JsonProperty(JSON_PROPERTY_BUILD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBuild(String build) {
    this.build = build;
  }


  @Deprecated
  public TestRunApiResult stateName(TestRunState stateName) {
    this.stateName = stateName;
    return this;
  }

  /**
   * Get stateName
   * @return stateName
   * @deprecated
   */
  @Deprecated
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATE_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TestRunState getStateName() {
    return stateName;
  }


  @Deprecated
  @JsonProperty(JSON_PROPERTY_STATE_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStateName(TestRunState stateName) {
    this.stateName = stateName;
  }


  public TestRunApiResult status(TestStatusApiResult status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TestStatusApiResult getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatus(TestStatusApiResult status) {
    this.status = status;
  }


  public TestRunApiResult projectId(UUID projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Get projectId
   * @return projectId
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PROJECT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getProjectId() {
    return projectId;
  }


  @JsonProperty(JSON_PROPERTY_PROJECT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProjectId(UUID projectId) {
    this.projectId = projectId;
  }


  public TestRunApiResult autoTests(List<AutoTestApiResult> autoTests) {
    this.autoTests = autoTests;
    return this;
  }

  public TestRunApiResult addAutoTestsItem(AutoTestApiResult autoTestsItem) {
    if (this.autoTests == null) {
      this.autoTests = new ArrayList<>();
    }
    this.autoTests.add(autoTestsItem);
    return this;
  }

  /**
   * Get autoTests
   * @return autoTests
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AUTO_TESTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<AutoTestApiResult> getAutoTests() {
    return autoTests;
  }


  @JsonProperty(JSON_PROPERTY_AUTO_TESTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAutoTests(List<AutoTestApiResult> autoTests) {
    this.autoTests = autoTests;
  }


  public TestRunApiResult autoTestsCount(Integer autoTestsCount) {
    this.autoTestsCount = autoTestsCount;
    return this;
  }

  /**
   * Get autoTestsCount
   * @return autoTestsCount
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AUTO_TESTS_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getAutoTestsCount() {
    return autoTestsCount;
  }


  @JsonProperty(JSON_PROPERTY_AUTO_TESTS_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAutoTestsCount(Integer autoTestsCount) {
    this.autoTestsCount = autoTestsCount;
  }


  public TestRunApiResult testSuiteIds(List<UUID> testSuiteIds) {
    this.testSuiteIds = testSuiteIds;
    return this;
  }

  public TestRunApiResult addTestSuiteIdsItem(UUID testSuiteIdsItem) {
    if (this.testSuiteIds == null) {
      this.testSuiteIds = new ArrayList<>();
    }
    this.testSuiteIds.add(testSuiteIdsItem);
    return this;
  }

  /**
   * Get testSuiteIds
   * @return testSuiteIds
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TEST_SUITE_IDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<UUID> getTestSuiteIds() {
    return testSuiteIds;
  }


  @JsonProperty(JSON_PROPERTY_TEST_SUITE_IDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTestSuiteIds(List<UUID> testSuiteIds) {
    this.testSuiteIds = testSuiteIds;
  }


  public TestRunApiResult isAutomated(Boolean isAutomated) {
    this.isAutomated = isAutomated;
    return this;
  }

  /**
   * Get isAutomated
   * @return isAutomated
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_AUTOMATED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsAutomated() {
    return isAutomated;
  }


  @JsonProperty(JSON_PROPERTY_IS_AUTOMATED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsAutomated(Boolean isAutomated) {
    this.isAutomated = isAutomated;
  }


  public TestRunApiResult analytic(TestRunAnalyticApiResult analytic) {
    this.analytic = analytic;
    return this;
  }

  /**
   * Get analytic
   * @return analytic
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ANALYTIC)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TestRunAnalyticApiResult getAnalytic() {
    return analytic;
  }


  @JsonProperty(JSON_PROPERTY_ANALYTIC)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAnalytic(TestRunAnalyticApiResult analytic) {
    this.analytic = analytic;
  }


  public TestRunApiResult testResults(List<TestResultApiResult> testResults) {
    this.testResults = testResults;
    return this;
  }

  public TestRunApiResult addTestResultsItem(TestResultApiResult testResultsItem) {
    if (this.testResults == null) {
      this.testResults = new ArrayList<>();
    }
    this.testResults.add(testResultsItem);
    return this;
  }

  /**
   * Get testResults
   * @return testResults
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TEST_RESULTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<TestResultApiResult> getTestResults() {
    return testResults;
  }


  @JsonProperty(JSON_PROPERTY_TEST_RESULTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTestResults(List<TestResultApiResult> testResults) {
    this.testResults = testResults;
  }


  public TestRunApiResult createdDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Get createdDate
   * @return createdDate
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public TestRunApiResult createdById(UUID createdById) {
    this.createdById = createdById;
    return this;
  }

  /**
   * Get createdById
   * @return createdById
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_BY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getCreatedById() {
    return createdById;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_BY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedById(UUID createdById) {
    this.createdById = createdById;
  }


  public TestRunApiResult startedDate(OffsetDateTime startedDate) {
    this.startedDate = JsonNullable.<OffsetDateTime>of(startedDate);
    return this;
  }

  /**
   * Get startedDate
   * @return startedDate
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public OffsetDateTime getStartedDate() {
        return startedDate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_STARTED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getStartedDate_JsonNullable() {
    return startedDate;
  }
  
  @JsonProperty(JSON_PROPERTY_STARTED_DATE)
  public void setStartedDate_JsonNullable(JsonNullable<OffsetDateTime> startedDate) {
    this.startedDate = startedDate;
  }

  public void setStartedDate(OffsetDateTime startedDate) {
    this.startedDate = JsonNullable.<OffsetDateTime>of(startedDate);
  }


  public TestRunApiResult completedDate(OffsetDateTime completedDate) {
    this.completedDate = JsonNullable.<OffsetDateTime>of(completedDate);
    return this;
  }

  /**
   * Get completedDate
   * @return completedDate
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public OffsetDateTime getCompletedDate() {
        return completedDate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_COMPLETED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getCompletedDate_JsonNullable() {
    return completedDate;
  }
  
  @JsonProperty(JSON_PROPERTY_COMPLETED_DATE)
  public void setCompletedDate_JsonNullable(JsonNullable<OffsetDateTime> completedDate) {
    this.completedDate = completedDate;
  }

  public void setCompletedDate(OffsetDateTime completedDate) {
    this.completedDate = JsonNullable.<OffsetDateTime>of(completedDate);
  }


  public TestRunApiResult description(String description) {
    this.description = JsonNullable.<String>of(description);
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getDescription() {
        return description.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getDescription_JsonNullable() {
    return description;
  }
  
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  public void setDescription_JsonNullable(JsonNullable<String> description) {
    this.description = description;
  }

  public void setDescription(String description) {
    this.description = JsonNullable.<String>of(description);
  }


  public TestRunApiResult testPlanId(UUID testPlanId) {
    this.testPlanId = JsonNullable.<UUID>of(testPlanId);
    return this;
  }

  /**
   * Get testPlanId
   * @return testPlanId
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public UUID getTestPlanId() {
        return testPlanId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TEST_PLAN_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<UUID> getTestPlanId_JsonNullable() {
    return testPlanId;
  }
  
  @JsonProperty(JSON_PROPERTY_TEST_PLAN_ID)
  public void setTestPlanId_JsonNullable(JsonNullable<UUID> testPlanId) {
    this.testPlanId = testPlanId;
  }

  public void setTestPlanId(UUID testPlanId) {
    this.testPlanId = JsonNullable.<UUID>of(testPlanId);
  }


  public TestRunApiResult runByUserId(UUID runByUserId) {
    this.runByUserId = JsonNullable.<UUID>of(runByUserId);
    return this;
  }

  /**
   * Get runByUserId
   * @return runByUserId
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public UUID getRunByUserId() {
        return runByUserId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_RUN_BY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<UUID> getRunByUserId_JsonNullable() {
    return runByUserId;
  }
  
  @JsonProperty(JSON_PROPERTY_RUN_BY_USER_ID)
  public void setRunByUserId_JsonNullable(JsonNullable<UUID> runByUserId) {
    this.runByUserId = runByUserId;
  }

  public void setRunByUserId(UUID runByUserId) {
    this.runByUserId = JsonNullable.<UUID>of(runByUserId);
  }


  public TestRunApiResult stoppedByUserId(UUID stoppedByUserId) {
    this.stoppedByUserId = JsonNullable.<UUID>of(stoppedByUserId);
    return this;
  }

  /**
   * Get stoppedByUserId
   * @return stoppedByUserId
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public UUID getStoppedByUserId() {
        return stoppedByUserId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_STOPPED_BY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<UUID> getStoppedByUserId_JsonNullable() {
    return stoppedByUserId;
  }
  
  @JsonProperty(JSON_PROPERTY_STOPPED_BY_USER_ID)
  public void setStoppedByUserId_JsonNullable(JsonNullable<UUID> stoppedByUserId) {
    this.stoppedByUserId = stoppedByUserId;
  }

  public void setStoppedByUserId(UUID stoppedByUserId) {
    this.stoppedByUserId = JsonNullable.<UUID>of(stoppedByUserId);
  }


  public TestRunApiResult name(String name) {
    this.name = JsonNullable.<String>of(name);
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getName() {
        return name.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getName_JsonNullable() {
    return name;
  }
  
  @JsonProperty(JSON_PROPERTY_NAME)
  public void setName_JsonNullable(JsonNullable<String> name) {
    this.name = name;
  }

  public void setName(String name) {
    this.name = JsonNullable.<String>of(name);
  }


  public TestRunApiResult launchSource(String launchSource) {
    this.launchSource = JsonNullable.<String>of(launchSource);
    return this;
  }

  /**
   * Get launchSource
   * @return launchSource
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getLaunchSource() {
        return launchSource.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_LAUNCH_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getLaunchSource_JsonNullable() {
    return launchSource;
  }
  
  @JsonProperty(JSON_PROPERTY_LAUNCH_SOURCE)
  public void setLaunchSource_JsonNullable(JsonNullable<String> launchSource) {
    this.launchSource = launchSource;
  }

  public void setLaunchSource(String launchSource) {
    this.launchSource = JsonNullable.<String>of(launchSource);
  }


  public TestRunApiResult testPlan(TestPlanApiResult testPlan) {
    this.testPlan = JsonNullable.<TestPlanApiResult>of(testPlan);
    return this;
  }

  /**
   * Get testPlan
   * @return testPlan
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public TestPlanApiResult getTestPlan() {
        return testPlan.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TEST_PLAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<TestPlanApiResult> getTestPlan_JsonNullable() {
    return testPlan;
  }
  
  @JsonProperty(JSON_PROPERTY_TEST_PLAN)
  public void setTestPlan_JsonNullable(JsonNullable<TestPlanApiResult> testPlan) {
    this.testPlan = testPlan;
  }

  public void setTestPlan(TestPlanApiResult testPlan) {
    this.testPlan = JsonNullable.<TestPlanApiResult>of(testPlan);
  }


  public TestRunApiResult modifiedDate(OffsetDateTime modifiedDate) {
    this.modifiedDate = JsonNullable.<OffsetDateTime>of(modifiedDate);
    return this;
  }

  /**
   * Get modifiedDate
   * @return modifiedDate
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public OffsetDateTime getModifiedDate() {
        return modifiedDate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MODIFIED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getModifiedDate_JsonNullable() {
    return modifiedDate;
  }
  
  @JsonProperty(JSON_PROPERTY_MODIFIED_DATE)
  public void setModifiedDate_JsonNullable(JsonNullable<OffsetDateTime> modifiedDate) {
    this.modifiedDate = modifiedDate;
  }

  public void setModifiedDate(OffsetDateTime modifiedDate) {
    this.modifiedDate = JsonNullable.<OffsetDateTime>of(modifiedDate);
  }


  public TestRunApiResult modifiedById(UUID modifiedById) {
    this.modifiedById = JsonNullable.<UUID>of(modifiedById);
    return this;
  }

  /**
   * Get modifiedById
   * @return modifiedById
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public UUID getModifiedById() {
        return modifiedById.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MODIFIED_BY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<UUID> getModifiedById_JsonNullable() {
    return modifiedById;
  }
  
  @JsonProperty(JSON_PROPERTY_MODIFIED_BY_ID)
  public void setModifiedById_JsonNullable(JsonNullable<UUID> modifiedById) {
    this.modifiedById = modifiedById;
  }

  public void setModifiedById(UUID modifiedById) {
    this.modifiedById = JsonNullable.<UUID>of(modifiedById);
  }


  public TestRunApiResult createdByUserName(String createdByUserName) {
    this.createdByUserName = JsonNullable.<String>of(createdByUserName);
    return this;
  }

  /**
   * Get createdByUserName
   * @return createdByUserName
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getCreatedByUserName() {
        return createdByUserName.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CREATED_BY_USER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getCreatedByUserName_JsonNullable() {
    return createdByUserName;
  }
  
  @JsonProperty(JSON_PROPERTY_CREATED_BY_USER_NAME)
  public void setCreatedByUserName_JsonNullable(JsonNullable<String> createdByUserName) {
    this.createdByUserName = createdByUserName;
  }

  public void setCreatedByUserName(String createdByUserName) {
    this.createdByUserName = JsonNullable.<String>of(createdByUserName);
  }


  /**
   * Return true if this TestRunApiResult object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestRunApiResult testRunApiResult = (TestRunApiResult) o;
    return Objects.equals(this.id, testRunApiResult.id) &&
        Objects.equals(this.isDeleted, testRunApiResult.isDeleted) &&
        Objects.equals(this.build, testRunApiResult.build) &&
        Objects.equals(this.stateName, testRunApiResult.stateName) &&
        Objects.equals(this.status, testRunApiResult.status) &&
        Objects.equals(this.projectId, testRunApiResult.projectId) &&
        Objects.equals(this.autoTests, testRunApiResult.autoTests) &&
        Objects.equals(this.autoTestsCount, testRunApiResult.autoTestsCount) &&
        Objects.equals(this.testSuiteIds, testRunApiResult.testSuiteIds) &&
        Objects.equals(this.isAutomated, testRunApiResult.isAutomated) &&
        Objects.equals(this.analytic, testRunApiResult.analytic) &&
        Objects.equals(this.testResults, testRunApiResult.testResults) &&
        Objects.equals(this.createdDate, testRunApiResult.createdDate) &&
        Objects.equals(this.createdById, testRunApiResult.createdById) &&
        equalsNullable(this.startedDate, testRunApiResult.startedDate) &&
        equalsNullable(this.completedDate, testRunApiResult.completedDate) &&
        equalsNullable(this.description, testRunApiResult.description) &&
        equalsNullable(this.testPlanId, testRunApiResult.testPlanId) &&
        equalsNullable(this.runByUserId, testRunApiResult.runByUserId) &&
        equalsNullable(this.stoppedByUserId, testRunApiResult.stoppedByUserId) &&
        equalsNullable(this.name, testRunApiResult.name) &&
        equalsNullable(this.launchSource, testRunApiResult.launchSource) &&
        equalsNullable(this.testPlan, testRunApiResult.testPlan) &&
        equalsNullable(this.modifiedDate, testRunApiResult.modifiedDate) &&
        equalsNullable(this.modifiedById, testRunApiResult.modifiedById) &&
        equalsNullable(this.createdByUserName, testRunApiResult.createdByUserName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, isDeleted, build, stateName, status, projectId, autoTests, autoTestsCount, testSuiteIds, isAutomated, analytic, testResults, createdDate, createdById, hashCodeNullable(startedDate), hashCodeNullable(completedDate), hashCodeNullable(description), hashCodeNullable(testPlanId), hashCodeNullable(runByUserId), hashCodeNullable(stoppedByUserId), hashCodeNullable(name), hashCodeNullable(launchSource), hashCodeNullable(testPlan), hashCodeNullable(modifiedDate), hashCodeNullable(modifiedById), hashCodeNullable(createdByUserName));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestRunApiResult {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
    sb.append("    build: ").append(toIndentedString(build)).append("\n");
    sb.append("    stateName: ").append(toIndentedString(stateName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    autoTests: ").append(toIndentedString(autoTests)).append("\n");
    sb.append("    autoTestsCount: ").append(toIndentedString(autoTestsCount)).append("\n");
    sb.append("    testSuiteIds: ").append(toIndentedString(testSuiteIds)).append("\n");
    sb.append("    isAutomated: ").append(toIndentedString(isAutomated)).append("\n");
    sb.append("    analytic: ").append(toIndentedString(analytic)).append("\n");
    sb.append("    testResults: ").append(toIndentedString(testResults)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    createdById: ").append(toIndentedString(createdById)).append("\n");
    sb.append("    startedDate: ").append(toIndentedString(startedDate)).append("\n");
    sb.append("    completedDate: ").append(toIndentedString(completedDate)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    testPlanId: ").append(toIndentedString(testPlanId)).append("\n");
    sb.append("    runByUserId: ").append(toIndentedString(runByUserId)).append("\n");
    sb.append("    stoppedByUserId: ").append(toIndentedString(stoppedByUserId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    launchSource: ").append(toIndentedString(launchSource)).append("\n");
    sb.append("    testPlan: ").append(toIndentedString(testPlan)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("    modifiedById: ").append(toIndentedString(modifiedById)).append("\n");
    sb.append("    createdByUserName: ").append(toIndentedString(createdByUserName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

