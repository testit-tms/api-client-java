/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import ru.testit.client.model.AutoTestApiResult;
import ru.testit.client.model.TestPlanApiResult;
import ru.testit.client.model.TestResultApiResult;
import ru.testit.client.model.TestRunAnalyticApiResult;
import ru.testit.client.model.TestRunState;
import ru.testit.client.model.TestStatusApiResult;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import ru.testit.client.invoker.JSON;

/**
 * TestRunApiResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class TestRunApiResult {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private UUID id;

  public static final String SERIALIZED_NAME_IS_DELETED = "isDeleted";
  @SerializedName(SERIALIZED_NAME_IS_DELETED)
  @javax.annotation.Nonnull
  private Boolean isDeleted;

  public static final String SERIALIZED_NAME_STARTED_DATE = "startedDate";
  @SerializedName(SERIALIZED_NAME_STARTED_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime startedDate;

  public static final String SERIALIZED_NAME_COMPLETED_DATE = "completedDate";
  @SerializedName(SERIALIZED_NAME_COMPLETED_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime completedDate;

  public static final String SERIALIZED_NAME_BUILD = "build";
  @SerializedName(SERIALIZED_NAME_BUILD)
  @javax.annotation.Nonnull
  private String build;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_STATE_NAME = "stateName";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_STATE_NAME)
  @javax.annotation.Nonnull
  private TestRunState stateName;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private TestStatusApiResult status;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  @javax.annotation.Nonnull
  private UUID projectId;

  public static final String SERIALIZED_NAME_TEST_PLAN_ID = "testPlanId";
  @SerializedName(SERIALIZED_NAME_TEST_PLAN_ID)
  @javax.annotation.Nullable
  private UUID testPlanId;

  public static final String SERIALIZED_NAME_RUN_BY_USER_ID = "runByUserId";
  @SerializedName(SERIALIZED_NAME_RUN_BY_USER_ID)
  @javax.annotation.Nullable
  private UUID runByUserId;

  public static final String SERIALIZED_NAME_STOPPED_BY_USER_ID = "stoppedByUserId";
  @SerializedName(SERIALIZED_NAME_STOPPED_BY_USER_ID)
  @javax.annotation.Nullable
  private UUID stoppedByUserId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_LAUNCH_SOURCE = "launchSource";
  @SerializedName(SERIALIZED_NAME_LAUNCH_SOURCE)
  @javax.annotation.Nullable
  private String launchSource;

  public static final String SERIALIZED_NAME_AUTO_TESTS = "autoTests";
  @SerializedName(SERIALIZED_NAME_AUTO_TESTS)
  @javax.annotation.Nonnull
  private List<AutoTestApiResult> autoTests = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUTO_TESTS_COUNT = "autoTestsCount";
  @SerializedName(SERIALIZED_NAME_AUTO_TESTS_COUNT)
  @javax.annotation.Nonnull
  private Integer autoTestsCount;

  public static final String SERIALIZED_NAME_TEST_SUITE_IDS = "testSuiteIds";
  @SerializedName(SERIALIZED_NAME_TEST_SUITE_IDS)
  @javax.annotation.Nonnull
  private List<UUID> testSuiteIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_AUTOMATED = "isAutomated";
  @SerializedName(SERIALIZED_NAME_IS_AUTOMATED)
  @javax.annotation.Nonnull
  private Boolean isAutomated;

  public static final String SERIALIZED_NAME_ANALYTIC = "analytic";
  @SerializedName(SERIALIZED_NAME_ANALYTIC)
  @javax.annotation.Nonnull
  private TestRunAnalyticApiResult analytic;

  public static final String SERIALIZED_NAME_TEST_RESULTS = "testResults";
  @SerializedName(SERIALIZED_NAME_TEST_RESULTS)
  @javax.annotation.Nonnull
  private List<TestResultApiResult> testResults = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEST_PLAN = "testPlan";
  @SerializedName(SERIALIZED_NAME_TEST_PLAN)
  @javax.annotation.Nullable
  private TestPlanApiResult testPlan;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  @javax.annotation.Nonnull
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_MODIFIED_DATE = "modifiedDate";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime modifiedDate;

  public static final String SERIALIZED_NAME_CREATED_BY_ID = "createdById";
  @SerializedName(SERIALIZED_NAME_CREATED_BY_ID)
  @javax.annotation.Nonnull
  private UUID createdById;

  public static final String SERIALIZED_NAME_MODIFIED_BY_ID = "modifiedById";
  @SerializedName(SERIALIZED_NAME_MODIFIED_BY_ID)
  @javax.annotation.Nullable
  private UUID modifiedById;

  public static final String SERIALIZED_NAME_CREATED_BY_USER_NAME = "createdByUserName";
  @SerializedName(SERIALIZED_NAME_CREATED_BY_USER_NAME)
  @javax.annotation.Nullable
  private String createdByUserName;

  public TestRunApiResult() {
  }

  public TestRunApiResult id(@javax.annotation.Nonnull UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Unique ID of the entity
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull UUID id) {
    this.id = id;
  }


  public TestRunApiResult isDeleted(@javax.annotation.Nonnull Boolean isDeleted) {
    this.isDeleted = isDeleted;
    return this;
  }

  /**
   * Indicates if the entity is deleted
   * @return isDeleted
   */
  @javax.annotation.Nonnull
  public Boolean getIsDeleted() {
    return isDeleted;
  }

  public void setIsDeleted(@javax.annotation.Nonnull Boolean isDeleted) {
    this.isDeleted = isDeleted;
  }


  public TestRunApiResult startedDate(@javax.annotation.Nullable OffsetDateTime startedDate) {
    this.startedDate = startedDate;
    return this;
  }

  /**
   * Get startedDate
   * @return startedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartedDate() {
    return startedDate;
  }

  public void setStartedDate(@javax.annotation.Nullable OffsetDateTime startedDate) {
    this.startedDate = startedDate;
  }


  public TestRunApiResult completedDate(@javax.annotation.Nullable OffsetDateTime completedDate) {
    this.completedDate = completedDate;
    return this;
  }

  /**
   * Get completedDate
   * @return completedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCompletedDate() {
    return completedDate;
  }

  public void setCompletedDate(@javax.annotation.Nullable OffsetDateTime completedDate) {
    this.completedDate = completedDate;
  }


  public TestRunApiResult build(@javax.annotation.Nonnull String build) {
    this.build = build;
    return this;
  }

  /**
   * Get build
   * @return build
   */
  @javax.annotation.Nonnull
  public String getBuild() {
    return build;
  }

  public void setBuild(@javax.annotation.Nonnull String build) {
    this.build = build;
  }


  public TestRunApiResult description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  @Deprecated
  public TestRunApiResult stateName(@javax.annotation.Nonnull TestRunState stateName) {
    this.stateName = stateName;
    return this;
  }

  /**
   * Get stateName
   * @return stateName
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nonnull
  public TestRunState getStateName() {
    return stateName;
  }

  @Deprecated
  public void setStateName(@javax.annotation.Nonnull TestRunState stateName) {
    this.stateName = stateName;
  }


  public TestRunApiResult status(@javax.annotation.Nonnull TestStatusApiResult status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public TestStatusApiResult getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull TestStatusApiResult status) {
    this.status = status;
  }


  public TestRunApiResult projectId(@javax.annotation.Nonnull UUID projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Get projectId
   * @return projectId
   */
  @javax.annotation.Nonnull
  public UUID getProjectId() {
    return projectId;
  }

  public void setProjectId(@javax.annotation.Nonnull UUID projectId) {
    this.projectId = projectId;
  }


  public TestRunApiResult testPlanId(@javax.annotation.Nullable UUID testPlanId) {
    this.testPlanId = testPlanId;
    return this;
  }

  /**
   * Get testPlanId
   * @return testPlanId
   */
  @javax.annotation.Nullable
  public UUID getTestPlanId() {
    return testPlanId;
  }

  public void setTestPlanId(@javax.annotation.Nullable UUID testPlanId) {
    this.testPlanId = testPlanId;
  }


  public TestRunApiResult runByUserId(@javax.annotation.Nullable UUID runByUserId) {
    this.runByUserId = runByUserId;
    return this;
  }

  /**
   * Get runByUserId
   * @return runByUserId
   */
  @javax.annotation.Nullable
  public UUID getRunByUserId() {
    return runByUserId;
  }

  public void setRunByUserId(@javax.annotation.Nullable UUID runByUserId) {
    this.runByUserId = runByUserId;
  }


  public TestRunApiResult stoppedByUserId(@javax.annotation.Nullable UUID stoppedByUserId) {
    this.stoppedByUserId = stoppedByUserId;
    return this;
  }

  /**
   * Get stoppedByUserId
   * @return stoppedByUserId
   */
  @javax.annotation.Nullable
  public UUID getStoppedByUserId() {
    return stoppedByUserId;
  }

  public void setStoppedByUserId(@javax.annotation.Nullable UUID stoppedByUserId) {
    this.stoppedByUserId = stoppedByUserId;
  }


  public TestRunApiResult name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public TestRunApiResult launchSource(@javax.annotation.Nullable String launchSource) {
    this.launchSource = launchSource;
    return this;
  }

  /**
   * Get launchSource
   * @return launchSource
   */
  @javax.annotation.Nullable
  public String getLaunchSource() {
    return launchSource;
  }

  public void setLaunchSource(@javax.annotation.Nullable String launchSource) {
    this.launchSource = launchSource;
  }


  public TestRunApiResult autoTests(@javax.annotation.Nonnull List<AutoTestApiResult> autoTests) {
    this.autoTests = autoTests;
    return this;
  }

  public TestRunApiResult addAutoTestsItem(AutoTestApiResult autoTestsItem) {
    if (this.autoTests == null) {
      this.autoTests = new ArrayList<>();
    }
    this.autoTests.add(autoTestsItem);
    return this;
  }

  /**
   * Get autoTests
   * @return autoTests
   */
  @javax.annotation.Nonnull
  public List<AutoTestApiResult> getAutoTests() {
    return autoTests;
  }

  public void setAutoTests(@javax.annotation.Nonnull List<AutoTestApiResult> autoTests) {
    this.autoTests = autoTests;
  }


  public TestRunApiResult autoTestsCount(@javax.annotation.Nonnull Integer autoTestsCount) {
    this.autoTestsCount = autoTestsCount;
    return this;
  }

  /**
   * Get autoTestsCount
   * @return autoTestsCount
   */
  @javax.annotation.Nonnull
  public Integer getAutoTestsCount() {
    return autoTestsCount;
  }

  public void setAutoTestsCount(@javax.annotation.Nonnull Integer autoTestsCount) {
    this.autoTestsCount = autoTestsCount;
  }


  public TestRunApiResult testSuiteIds(@javax.annotation.Nonnull List<UUID> testSuiteIds) {
    this.testSuiteIds = testSuiteIds;
    return this;
  }

  public TestRunApiResult addTestSuiteIdsItem(UUID testSuiteIdsItem) {
    if (this.testSuiteIds == null) {
      this.testSuiteIds = new ArrayList<>();
    }
    this.testSuiteIds.add(testSuiteIdsItem);
    return this;
  }

  /**
   * Get testSuiteIds
   * @return testSuiteIds
   */
  @javax.annotation.Nonnull
  public List<UUID> getTestSuiteIds() {
    return testSuiteIds;
  }

  public void setTestSuiteIds(@javax.annotation.Nonnull List<UUID> testSuiteIds) {
    this.testSuiteIds = testSuiteIds;
  }


  public TestRunApiResult isAutomated(@javax.annotation.Nonnull Boolean isAutomated) {
    this.isAutomated = isAutomated;
    return this;
  }

  /**
   * Get isAutomated
   * @return isAutomated
   */
  @javax.annotation.Nonnull
  public Boolean getIsAutomated() {
    return isAutomated;
  }

  public void setIsAutomated(@javax.annotation.Nonnull Boolean isAutomated) {
    this.isAutomated = isAutomated;
  }


  public TestRunApiResult analytic(@javax.annotation.Nonnull TestRunAnalyticApiResult analytic) {
    this.analytic = analytic;
    return this;
  }

  /**
   * Get analytic
   * @return analytic
   */
  @javax.annotation.Nonnull
  public TestRunAnalyticApiResult getAnalytic() {
    return analytic;
  }

  public void setAnalytic(@javax.annotation.Nonnull TestRunAnalyticApiResult analytic) {
    this.analytic = analytic;
  }


  public TestRunApiResult testResults(@javax.annotation.Nonnull List<TestResultApiResult> testResults) {
    this.testResults = testResults;
    return this;
  }

  public TestRunApiResult addTestResultsItem(TestResultApiResult testResultsItem) {
    if (this.testResults == null) {
      this.testResults = new ArrayList<>();
    }
    this.testResults.add(testResultsItem);
    return this;
  }

  /**
   * Get testResults
   * @return testResults
   */
  @javax.annotation.Nonnull
  public List<TestResultApiResult> getTestResults() {
    return testResults;
  }

  public void setTestResults(@javax.annotation.Nonnull List<TestResultApiResult> testResults) {
    this.testResults = testResults;
  }


  public TestRunApiResult testPlan(@javax.annotation.Nullable TestPlanApiResult testPlan) {
    this.testPlan = testPlan;
    return this;
  }

  /**
   * Get testPlan
   * @return testPlan
   */
  @javax.annotation.Nullable
  public TestPlanApiResult getTestPlan() {
    return testPlan;
  }

  public void setTestPlan(@javax.annotation.Nullable TestPlanApiResult testPlan) {
    this.testPlan = testPlan;
  }


  public TestRunApiResult createdDate(@javax.annotation.Nonnull OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Get createdDate
   * @return createdDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(@javax.annotation.Nonnull OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public TestRunApiResult modifiedDate(@javax.annotation.Nullable OffsetDateTime modifiedDate) {
    this.modifiedDate = modifiedDate;
    return this;
  }

  /**
   * Get modifiedDate
   * @return modifiedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedDate() {
    return modifiedDate;
  }

  public void setModifiedDate(@javax.annotation.Nullable OffsetDateTime modifiedDate) {
    this.modifiedDate = modifiedDate;
  }


  public TestRunApiResult createdById(@javax.annotation.Nonnull UUID createdById) {
    this.createdById = createdById;
    return this;
  }

  /**
   * Get createdById
   * @return createdById
   */
  @javax.annotation.Nonnull
  public UUID getCreatedById() {
    return createdById;
  }

  public void setCreatedById(@javax.annotation.Nonnull UUID createdById) {
    this.createdById = createdById;
  }


  public TestRunApiResult modifiedById(@javax.annotation.Nullable UUID modifiedById) {
    this.modifiedById = modifiedById;
    return this;
  }

  /**
   * Get modifiedById
   * @return modifiedById
   */
  @javax.annotation.Nullable
  public UUID getModifiedById() {
    return modifiedById;
  }

  public void setModifiedById(@javax.annotation.Nullable UUID modifiedById) {
    this.modifiedById = modifiedById;
  }


  public TestRunApiResult createdByUserName(@javax.annotation.Nullable String createdByUserName) {
    this.createdByUserName = createdByUserName;
    return this;
  }

  /**
   * Get createdByUserName
   * @return createdByUserName
   */
  @javax.annotation.Nullable
  public String getCreatedByUserName() {
    return createdByUserName;
  }

  public void setCreatedByUserName(@javax.annotation.Nullable String createdByUserName) {
    this.createdByUserName = createdByUserName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestRunApiResult testRunApiResult = (TestRunApiResult) o;
    return Objects.equals(this.id, testRunApiResult.id) &&
        Objects.equals(this.isDeleted, testRunApiResult.isDeleted) &&
        Objects.equals(this.startedDate, testRunApiResult.startedDate) &&
        Objects.equals(this.completedDate, testRunApiResult.completedDate) &&
        Objects.equals(this.build, testRunApiResult.build) &&
        Objects.equals(this.description, testRunApiResult.description) &&
        Objects.equals(this.stateName, testRunApiResult.stateName) &&
        Objects.equals(this.status, testRunApiResult.status) &&
        Objects.equals(this.projectId, testRunApiResult.projectId) &&
        Objects.equals(this.testPlanId, testRunApiResult.testPlanId) &&
        Objects.equals(this.runByUserId, testRunApiResult.runByUserId) &&
        Objects.equals(this.stoppedByUserId, testRunApiResult.stoppedByUserId) &&
        Objects.equals(this.name, testRunApiResult.name) &&
        Objects.equals(this.launchSource, testRunApiResult.launchSource) &&
        Objects.equals(this.autoTests, testRunApiResult.autoTests) &&
        Objects.equals(this.autoTestsCount, testRunApiResult.autoTestsCount) &&
        Objects.equals(this.testSuiteIds, testRunApiResult.testSuiteIds) &&
        Objects.equals(this.isAutomated, testRunApiResult.isAutomated) &&
        Objects.equals(this.analytic, testRunApiResult.analytic) &&
        Objects.equals(this.testResults, testRunApiResult.testResults) &&
        Objects.equals(this.testPlan, testRunApiResult.testPlan) &&
        Objects.equals(this.createdDate, testRunApiResult.createdDate) &&
        Objects.equals(this.modifiedDate, testRunApiResult.modifiedDate) &&
        Objects.equals(this.createdById, testRunApiResult.createdById) &&
        Objects.equals(this.modifiedById, testRunApiResult.modifiedById) &&
        Objects.equals(this.createdByUserName, testRunApiResult.createdByUserName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, isDeleted, startedDate, completedDate, build, description, stateName, status, projectId, testPlanId, runByUserId, stoppedByUserId, name, launchSource, autoTests, autoTestsCount, testSuiteIds, isAutomated, analytic, testResults, testPlan, createdDate, modifiedDate, createdById, modifiedById, createdByUserName);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestRunApiResult {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
    sb.append("    startedDate: ").append(toIndentedString(startedDate)).append("\n");
    sb.append("    completedDate: ").append(toIndentedString(completedDate)).append("\n");
    sb.append("    build: ").append(toIndentedString(build)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    stateName: ").append(toIndentedString(stateName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    testPlanId: ").append(toIndentedString(testPlanId)).append("\n");
    sb.append("    runByUserId: ").append(toIndentedString(runByUserId)).append("\n");
    sb.append("    stoppedByUserId: ").append(toIndentedString(stoppedByUserId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    launchSource: ").append(toIndentedString(launchSource)).append("\n");
    sb.append("    autoTests: ").append(toIndentedString(autoTests)).append("\n");
    sb.append("    autoTestsCount: ").append(toIndentedString(autoTestsCount)).append("\n");
    sb.append("    testSuiteIds: ").append(toIndentedString(testSuiteIds)).append("\n");
    sb.append("    isAutomated: ").append(toIndentedString(isAutomated)).append("\n");
    sb.append("    analytic: ").append(toIndentedString(analytic)).append("\n");
    sb.append("    testResults: ").append(toIndentedString(testResults)).append("\n");
    sb.append("    testPlan: ").append(toIndentedString(testPlan)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("    createdById: ").append(toIndentedString(createdById)).append("\n");
    sb.append("    modifiedById: ").append(toIndentedString(modifiedById)).append("\n");
    sb.append("    createdByUserName: ").append(toIndentedString(createdByUserName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("isDeleted");
    openapiFields.add("startedDate");
    openapiFields.add("completedDate");
    openapiFields.add("build");
    openapiFields.add("description");
    openapiFields.add("stateName");
    openapiFields.add("status");
    openapiFields.add("projectId");
    openapiFields.add("testPlanId");
    openapiFields.add("runByUserId");
    openapiFields.add("stoppedByUserId");
    openapiFields.add("name");
    openapiFields.add("launchSource");
    openapiFields.add("autoTests");
    openapiFields.add("autoTestsCount");
    openapiFields.add("testSuiteIds");
    openapiFields.add("isAutomated");
    openapiFields.add("analytic");
    openapiFields.add("testResults");
    openapiFields.add("testPlan");
    openapiFields.add("createdDate");
    openapiFields.add("modifiedDate");
    openapiFields.add("createdById");
    openapiFields.add("modifiedById");
    openapiFields.add("createdByUserName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("isDeleted");
    openapiRequiredFields.add("build");
    openapiRequiredFields.add("stateName");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("projectId");
    openapiRequiredFields.add("autoTests");
    openapiRequiredFields.add("autoTestsCount");
    openapiRequiredFields.add("testSuiteIds");
    openapiRequiredFields.add("isAutomated");
    openapiRequiredFields.add("analytic");
    openapiRequiredFields.add("testResults");
    openapiRequiredFields.add("createdDate");
    openapiRequiredFields.add("createdById");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestRunApiResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestRunApiResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestRunApiResult is not found in the empty JSON string", TestRunApiResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestRunApiResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestRunApiResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TestRunApiResult.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("build").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `build` to be a primitive type in the JSON string but got `%s`", jsonObj.get("build").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the required field `stateName`
      TestRunState.validateJsonElement(jsonObj.get("stateName"));
      // validate the required field `status`
      TestStatusApiResult.validateJsonElement(jsonObj.get("status"));
      if (!jsonObj.get("projectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectId").toString()));
      }
      if ((jsonObj.get("testPlanId") != null && !jsonObj.get("testPlanId").isJsonNull()) && !jsonObj.get("testPlanId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testPlanId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testPlanId").toString()));
      }
      if ((jsonObj.get("runByUserId") != null && !jsonObj.get("runByUserId").isJsonNull()) && !jsonObj.get("runByUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runByUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runByUserId").toString()));
      }
      if ((jsonObj.get("stoppedByUserId") != null && !jsonObj.get("stoppedByUserId").isJsonNull()) && !jsonObj.get("stoppedByUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stoppedByUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stoppedByUserId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("launchSource") != null && !jsonObj.get("launchSource").isJsonNull()) && !jsonObj.get("launchSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `launchSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("launchSource").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("autoTests").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoTests` to be an array in the JSON string but got `%s`", jsonObj.get("autoTests").toString()));
      }

      JsonArray jsonArrayautoTests = jsonObj.getAsJsonArray("autoTests");
      // validate the required field `autoTests` (array)
      for (int i = 0; i < jsonArrayautoTests.size(); i++) {
        AutoTestApiResult.validateJsonElement(jsonArrayautoTests.get(i));
      };
      // ensure the required json array is present
      if (jsonObj.get("testSuiteIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("testSuiteIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `testSuiteIds` to be an array in the JSON string but got `%s`", jsonObj.get("testSuiteIds").toString()));
      }
      // validate the required field `analytic`
      TestRunAnalyticApiResult.validateJsonElement(jsonObj.get("analytic"));
      // ensure the json data is an array
      if (!jsonObj.get("testResults").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `testResults` to be an array in the JSON string but got `%s`", jsonObj.get("testResults").toString()));
      }

      JsonArray jsonArraytestResults = jsonObj.getAsJsonArray("testResults");
      // validate the required field `testResults` (array)
      for (int i = 0; i < jsonArraytestResults.size(); i++) {
        TestResultApiResult.validateJsonElement(jsonArraytestResults.get(i));
      };
      // validate the optional field `testPlan`
      if (jsonObj.get("testPlan") != null && !jsonObj.get("testPlan").isJsonNull()) {
        TestPlanApiResult.validateJsonElement(jsonObj.get("testPlan"));
      }
      if (!jsonObj.get("createdById").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdById` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdById").toString()));
      }
      if ((jsonObj.get("modifiedById") != null && !jsonObj.get("modifiedById").isJsonNull()) && !jsonObj.get("modifiedById").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedById` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modifiedById").toString()));
      }
      if ((jsonObj.get("createdByUserName") != null && !jsonObj.get("createdByUserName").isJsonNull()) && !jsonObj.get("createdByUserName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdByUserName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdByUserName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestRunApiResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestRunApiResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestRunApiResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestRunApiResult.class));

       return (TypeAdapter<T>) new TypeAdapter<TestRunApiResult>() {
           @Override
           public void write(JsonWriter out, TestRunApiResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestRunApiResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestRunApiResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestRunApiResult
   * @throws IOException if the JSON string is invalid with respect to TestRunApiResult
   */
  public static TestRunApiResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestRunApiResult.class);
  }

  /**
   * Convert an instance of TestRunApiResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

