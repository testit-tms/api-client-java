/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import ru.testit.client.model.DateTimeRangeSelectorModel;
import ru.testit.client.model.FailureCategory;
import ru.testit.client.model.Int32RangeSelectorModel;
import ru.testit.client.model.TestResultOutcome;
import ru.testit.client.model.TestRunState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import ru.testit.client.invoker.JSON;

/**
 * TestRunFilterApiModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0")
public class TestRunFilterApiModel {
  public static final String SERIALIZED_NAME_PROJECT_IDS = "projectIds";
  @SerializedName(SERIALIZED_NAME_PROJECT_IDS)
  private List<UUID> projectIds;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STATES = "states";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_STATES)
  private List<TestRunState> states;

  public static final String SERIALIZED_NAME_STATUS_CODES = "statusCodes";
  @SerializedName(SERIALIZED_NAME_STATUS_CODES)
  private List<String> statusCodes;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private DateTimeRangeSelectorModel createdDate;

  public static final String SERIALIZED_NAME_STARTED_DATE = "startedDate";
  @SerializedName(SERIALIZED_NAME_STARTED_DATE)
  private DateTimeRangeSelectorModel startedDate;

  public static final String SERIALIZED_NAME_CREATED_BY_IDS = "createdByIds";
  @SerializedName(SERIALIZED_NAME_CREATED_BY_IDS)
  private List<UUID> createdByIds;

  public static final String SERIALIZED_NAME_MODIFIED_BY_IDS = "modifiedByIds";
  @SerializedName(SERIALIZED_NAME_MODIFIED_BY_IDS)
  private List<UUID> modifiedByIds;

  public static final String SERIALIZED_NAME_IS_DELETED = "isDeleted";
  @SerializedName(SERIALIZED_NAME_IS_DELETED)
  private Boolean isDeleted;

  public static final String SERIALIZED_NAME_AUTO_TESTS_COUNT = "autoTestsCount";
  @SerializedName(SERIALIZED_NAME_AUTO_TESTS_COUNT)
  private Int32RangeSelectorModel autoTestsCount;

  public static final String SERIALIZED_NAME_TEST_RESULTS_OUTCOME = "testResultsOutcome";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_TEST_RESULTS_OUTCOME)
  private List<TestResultOutcome> testResultsOutcome;

  public static final String SERIALIZED_NAME_TEST_RESULTS_STATUS_CODES = "testResultsStatusCodes";
  @SerializedName(SERIALIZED_NAME_TEST_RESULTS_STATUS_CODES)
  private List<String> testResultsStatusCodes;

  public static final String SERIALIZED_NAME_FAILURE_CATEGORY = "failureCategory";
  @SerializedName(SERIALIZED_NAME_FAILURE_CATEGORY)
  private List<FailureCategory> failureCategory;

  public static final String SERIALIZED_NAME_COMPLETED_DATE = "completedDate";
  @SerializedName(SERIALIZED_NAME_COMPLETED_DATE)
  private DateTimeRangeSelectorModel completedDate;

  public static final String SERIALIZED_NAME_TEST_RESULTS_CONFIGURATION_IDS = "testResultsConfigurationIds";
  @SerializedName(SERIALIZED_NAME_TEST_RESULTS_CONFIGURATION_IDS)
  private List<UUID> testResultsConfigurationIds;

  public TestRunFilterApiModel() {
  }

  public TestRunFilterApiModel projectIds(List<UUID> projectIds) {
    this.projectIds = projectIds;
    return this;
  }

  public TestRunFilterApiModel addProjectIdsItem(UUID projectIdsItem) {
    if (this.projectIds == null) {
      this.projectIds = new ArrayList<>();
    }
    this.projectIds.add(projectIdsItem);
    return this;
  }

  /**
   * Specifies a test run project IDs to search for
   * @return projectIds
   */
  @javax.annotation.Nullable
  public List<UUID> getProjectIds() {
    return projectIds;
  }

  public void setProjectIds(List<UUID> projectIds) {
    this.projectIds = projectIds;
  }


  public TestRunFilterApiModel name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Specifies test run name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  @Deprecated
  public TestRunFilterApiModel states(List<TestRunState> states) {
    this.states = states;
    return this;
  }

  public TestRunFilterApiModel addStatesItem(TestRunState statesItem) {
    if (this.states == null) {
      this.states = new ArrayList<>();
    }
    this.states.add(statesItem);
    return this;
  }

  /**
   * Specifies a test run states to search for
   * @return states
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<TestRunState> getStates() {
    return states;
  }

  @Deprecated
  public void setStates(List<TestRunState> states) {
    this.states = states;
  }


  public TestRunFilterApiModel statusCodes(List<String> statusCodes) {
    this.statusCodes = statusCodes;
    return this;
  }

  public TestRunFilterApiModel addStatusCodesItem(String statusCodesItem) {
    if (this.statusCodes == null) {
      this.statusCodes = new ArrayList<>();
    }
    this.statusCodes.add(statusCodesItem);
    return this;
  }

  /**
   * Specifies a test run status codes to search for
   * @return statusCodes
   */
  @javax.annotation.Nullable
  public List<String> getStatusCodes() {
    return statusCodes;
  }

  public void setStatusCodes(List<String> statusCodes) {
    this.statusCodes = statusCodes;
  }


  public TestRunFilterApiModel createdDate(DateTimeRangeSelectorModel createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Specifies a test run range of created date to search for
   * @return createdDate
   */
  @javax.annotation.Nullable
  public DateTimeRangeSelectorModel getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(DateTimeRangeSelectorModel createdDate) {
    this.createdDate = createdDate;
  }


  public TestRunFilterApiModel startedDate(DateTimeRangeSelectorModel startedDate) {
    this.startedDate = startedDate;
    return this;
  }

  /**
   * Specifies a test run range of started date to search for
   * @return startedDate
   */
  @javax.annotation.Nullable
  public DateTimeRangeSelectorModel getStartedDate() {
    return startedDate;
  }

  public void setStartedDate(DateTimeRangeSelectorModel startedDate) {
    this.startedDate = startedDate;
  }


  public TestRunFilterApiModel createdByIds(List<UUID> createdByIds) {
    this.createdByIds = createdByIds;
    return this;
  }

  public TestRunFilterApiModel addCreatedByIdsItem(UUID createdByIdsItem) {
    if (this.createdByIds == null) {
      this.createdByIds = new ArrayList<>();
    }
    this.createdByIds.add(createdByIdsItem);
    return this;
  }

  /**
   * Specifies a test run creator IDs to search for
   * @return createdByIds
   */
  @javax.annotation.Nullable
  public List<UUID> getCreatedByIds() {
    return createdByIds;
  }

  public void setCreatedByIds(List<UUID> createdByIds) {
    this.createdByIds = createdByIds;
  }


  public TestRunFilterApiModel modifiedByIds(List<UUID> modifiedByIds) {
    this.modifiedByIds = modifiedByIds;
    return this;
  }

  public TestRunFilterApiModel addModifiedByIdsItem(UUID modifiedByIdsItem) {
    if (this.modifiedByIds == null) {
      this.modifiedByIds = new ArrayList<>();
    }
    this.modifiedByIds.add(modifiedByIdsItem);
    return this;
  }

  /**
   * Specifies a test run last editor IDs to search for
   * @return modifiedByIds
   */
  @javax.annotation.Nullable
  public List<UUID> getModifiedByIds() {
    return modifiedByIds;
  }

  public void setModifiedByIds(List<UUID> modifiedByIds) {
    this.modifiedByIds = modifiedByIds;
  }


  public TestRunFilterApiModel isDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
    return this;
  }

  /**
   * Specifies a test run deleted status to search for
   * @return isDeleted
   */
  @javax.annotation.Nullable
  public Boolean getIsDeleted() {
    return isDeleted;
  }

  public void setIsDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
  }


  public TestRunFilterApiModel autoTestsCount(Int32RangeSelectorModel autoTestsCount) {
    this.autoTestsCount = autoTestsCount;
    return this;
  }

  /**
   * Number of autoTests run in the test run
   * @return autoTestsCount
   */
  @javax.annotation.Nullable
  public Int32RangeSelectorModel getAutoTestsCount() {
    return autoTestsCount;
  }

  public void setAutoTestsCount(Int32RangeSelectorModel autoTestsCount) {
    this.autoTestsCount = autoTestsCount;
  }


  @Deprecated
  public TestRunFilterApiModel testResultsOutcome(List<TestResultOutcome> testResultsOutcome) {
    this.testResultsOutcome = testResultsOutcome;
    return this;
  }

  public TestRunFilterApiModel addTestResultsOutcomeItem(TestResultOutcome testResultsOutcomeItem) {
    if (this.testResultsOutcome == null) {
      this.testResultsOutcome = new ArrayList<>();
    }
    this.testResultsOutcome.add(testResultsOutcomeItem);
    return this;
  }

  /**
   * Specifies test results outcomes
   * @return testResultsOutcome
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<TestResultOutcome> getTestResultsOutcome() {
    return testResultsOutcome;
  }

  @Deprecated
  public void setTestResultsOutcome(List<TestResultOutcome> testResultsOutcome) {
    this.testResultsOutcome = testResultsOutcome;
  }


  public TestRunFilterApiModel testResultsStatusCodes(List<String> testResultsStatusCodes) {
    this.testResultsStatusCodes = testResultsStatusCodes;
    return this;
  }

  public TestRunFilterApiModel addTestResultsStatusCodesItem(String testResultsStatusCodesItem) {
    if (this.testResultsStatusCodes == null) {
      this.testResultsStatusCodes = new ArrayList<>();
    }
    this.testResultsStatusCodes.add(testResultsStatusCodesItem);
    return this;
  }

  /**
   * Specifies test results status codes
   * @return testResultsStatusCodes
   */
  @javax.annotation.Nullable
  public List<String> getTestResultsStatusCodes() {
    return testResultsStatusCodes;
  }

  public void setTestResultsStatusCodes(List<String> testResultsStatusCodes) {
    this.testResultsStatusCodes = testResultsStatusCodes;
  }


  public TestRunFilterApiModel failureCategory(List<FailureCategory> failureCategory) {
    this.failureCategory = failureCategory;
    return this;
  }

  public TestRunFilterApiModel addFailureCategoryItem(FailureCategory failureCategoryItem) {
    if (this.failureCategory == null) {
      this.failureCategory = new ArrayList<>();
    }
    this.failureCategory.add(failureCategoryItem);
    return this;
  }

  /**
   * Specifies failure categories
   * @return failureCategory
   */
  @javax.annotation.Nullable
  public List<FailureCategory> getFailureCategory() {
    return failureCategory;
  }

  public void setFailureCategory(List<FailureCategory> failureCategory) {
    this.failureCategory = failureCategory;
  }


  public TestRunFilterApiModel completedDate(DateTimeRangeSelectorModel completedDate) {
    this.completedDate = completedDate;
    return this;
  }

  /**
   * Specifies a test run range of completed date to search for
   * @return completedDate
   */
  @javax.annotation.Nullable
  public DateTimeRangeSelectorModel getCompletedDate() {
    return completedDate;
  }

  public void setCompletedDate(DateTimeRangeSelectorModel completedDate) {
    this.completedDate = completedDate;
  }


  public TestRunFilterApiModel testResultsConfigurationIds(List<UUID> testResultsConfigurationIds) {
    this.testResultsConfigurationIds = testResultsConfigurationIds;
    return this;
  }

  public TestRunFilterApiModel addTestResultsConfigurationIdsItem(UUID testResultsConfigurationIdsItem) {
    if (this.testResultsConfigurationIds == null) {
      this.testResultsConfigurationIds = new ArrayList<>();
    }
    this.testResultsConfigurationIds.add(testResultsConfigurationIdsItem);
    return this;
  }

  /**
   * Specifies a test result configuration IDs to search for
   * @return testResultsConfigurationIds
   */
  @javax.annotation.Nullable
  public List<UUID> getTestResultsConfigurationIds() {
    return testResultsConfigurationIds;
  }

  public void setTestResultsConfigurationIds(List<UUID> testResultsConfigurationIds) {
    this.testResultsConfigurationIds = testResultsConfigurationIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestRunFilterApiModel testRunFilterApiModel = (TestRunFilterApiModel) o;
    return Objects.equals(this.projectIds, testRunFilterApiModel.projectIds) &&
        Objects.equals(this.name, testRunFilterApiModel.name) &&
        Objects.equals(this.states, testRunFilterApiModel.states) &&
        Objects.equals(this.statusCodes, testRunFilterApiModel.statusCodes) &&
        Objects.equals(this.createdDate, testRunFilterApiModel.createdDate) &&
        Objects.equals(this.startedDate, testRunFilterApiModel.startedDate) &&
        Objects.equals(this.createdByIds, testRunFilterApiModel.createdByIds) &&
        Objects.equals(this.modifiedByIds, testRunFilterApiModel.modifiedByIds) &&
        Objects.equals(this.isDeleted, testRunFilterApiModel.isDeleted) &&
        Objects.equals(this.autoTestsCount, testRunFilterApiModel.autoTestsCount) &&
        Objects.equals(this.testResultsOutcome, testRunFilterApiModel.testResultsOutcome) &&
        Objects.equals(this.testResultsStatusCodes, testRunFilterApiModel.testResultsStatusCodes) &&
        Objects.equals(this.failureCategory, testRunFilterApiModel.failureCategory) &&
        Objects.equals(this.completedDate, testRunFilterApiModel.completedDate) &&
        Objects.equals(this.testResultsConfigurationIds, testRunFilterApiModel.testResultsConfigurationIds);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(projectIds, name, states, statusCodes, createdDate, startedDate, createdByIds, modifiedByIds, isDeleted, autoTestsCount, testResultsOutcome, testResultsStatusCodes, failureCategory, completedDate, testResultsConfigurationIds);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestRunFilterApiModel {\n");
    sb.append("    projectIds: ").append(toIndentedString(projectIds)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    states: ").append(toIndentedString(states)).append("\n");
    sb.append("    statusCodes: ").append(toIndentedString(statusCodes)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    startedDate: ").append(toIndentedString(startedDate)).append("\n");
    sb.append("    createdByIds: ").append(toIndentedString(createdByIds)).append("\n");
    sb.append("    modifiedByIds: ").append(toIndentedString(modifiedByIds)).append("\n");
    sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
    sb.append("    autoTestsCount: ").append(toIndentedString(autoTestsCount)).append("\n");
    sb.append("    testResultsOutcome: ").append(toIndentedString(testResultsOutcome)).append("\n");
    sb.append("    testResultsStatusCodes: ").append(toIndentedString(testResultsStatusCodes)).append("\n");
    sb.append("    failureCategory: ").append(toIndentedString(failureCategory)).append("\n");
    sb.append("    completedDate: ").append(toIndentedString(completedDate)).append("\n");
    sb.append("    testResultsConfigurationIds: ").append(toIndentedString(testResultsConfigurationIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("projectIds");
    openapiFields.add("name");
    openapiFields.add("states");
    openapiFields.add("statusCodes");
    openapiFields.add("createdDate");
    openapiFields.add("startedDate");
    openapiFields.add("createdByIds");
    openapiFields.add("modifiedByIds");
    openapiFields.add("isDeleted");
    openapiFields.add("autoTestsCount");
    openapiFields.add("testResultsOutcome");
    openapiFields.add("testResultsStatusCodes");
    openapiFields.add("failureCategory");
    openapiFields.add("completedDate");
    openapiFields.add("testResultsConfigurationIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestRunFilterApiModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestRunFilterApiModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestRunFilterApiModel is not found in the empty JSON string", TestRunFilterApiModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestRunFilterApiModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestRunFilterApiModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("projectIds") != null && !jsonObj.get("projectIds").isJsonNull() && !jsonObj.get("projectIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectIds` to be an array in the JSON string but got `%s`", jsonObj.get("projectIds").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("states") != null && !jsonObj.get("states").isJsonNull() && !jsonObj.get("states").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `states` to be an array in the JSON string but got `%s`", jsonObj.get("states").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("statusCodes") != null && !jsonObj.get("statusCodes").isJsonNull() && !jsonObj.get("statusCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusCodes` to be an array in the JSON string but got `%s`", jsonObj.get("statusCodes").toString()));
      }
      // validate the optional field `createdDate`
      if (jsonObj.get("createdDate") != null && !jsonObj.get("createdDate").isJsonNull()) {
        DateTimeRangeSelectorModel.validateJsonElement(jsonObj.get("createdDate"));
      }
      // validate the optional field `startedDate`
      if (jsonObj.get("startedDate") != null && !jsonObj.get("startedDate").isJsonNull()) {
        DateTimeRangeSelectorModel.validateJsonElement(jsonObj.get("startedDate"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("createdByIds") != null && !jsonObj.get("createdByIds").isJsonNull() && !jsonObj.get("createdByIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdByIds` to be an array in the JSON string but got `%s`", jsonObj.get("createdByIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("modifiedByIds") != null && !jsonObj.get("modifiedByIds").isJsonNull() && !jsonObj.get("modifiedByIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedByIds` to be an array in the JSON string but got `%s`", jsonObj.get("modifiedByIds").toString()));
      }
      // validate the optional field `autoTestsCount`
      if (jsonObj.get("autoTestsCount") != null && !jsonObj.get("autoTestsCount").isJsonNull()) {
        Int32RangeSelectorModel.validateJsonElement(jsonObj.get("autoTestsCount"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("testResultsOutcome") != null && !jsonObj.get("testResultsOutcome").isJsonNull() && !jsonObj.get("testResultsOutcome").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `testResultsOutcome` to be an array in the JSON string but got `%s`", jsonObj.get("testResultsOutcome").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("testResultsStatusCodes") != null && !jsonObj.get("testResultsStatusCodes").isJsonNull() && !jsonObj.get("testResultsStatusCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `testResultsStatusCodes` to be an array in the JSON string but got `%s`", jsonObj.get("testResultsStatusCodes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("failureCategory") != null && !jsonObj.get("failureCategory").isJsonNull() && !jsonObj.get("failureCategory").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `failureCategory` to be an array in the JSON string but got `%s`", jsonObj.get("failureCategory").toString()));
      }
      // validate the optional field `completedDate`
      if (jsonObj.get("completedDate") != null && !jsonObj.get("completedDate").isJsonNull()) {
        DateTimeRangeSelectorModel.validateJsonElement(jsonObj.get("completedDate"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("testResultsConfigurationIds") != null && !jsonObj.get("testResultsConfigurationIds").isJsonNull() && !jsonObj.get("testResultsConfigurationIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `testResultsConfigurationIds` to be an array in the JSON string but got `%s`", jsonObj.get("testResultsConfigurationIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestRunFilterApiModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestRunFilterApiModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestRunFilterApiModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestRunFilterApiModel.class));

       return (TypeAdapter<T>) new TypeAdapter<TestRunFilterApiModel>() {
           @Override
           public void write(JsonWriter out, TestRunFilterApiModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestRunFilterApiModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestRunFilterApiModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestRunFilterApiModel
   * @throws IOException if the JSON string is invalid with respect to TestRunFilterApiModel
   */
  public static TestRunFilterApiModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestRunFilterApiModel.class);
  }

  /**
   * Convert an instance of TestRunFilterApiModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

