/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import ru.testit.client.model.DateTimeRangeSelectorModel;
import ru.testit.client.model.FailureCategory;
import ru.testit.client.model.Int32RangeSelectorModel;
import ru.testit.client.model.TestResultOutcome;
import ru.testit.client.model.TestRunState;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import ru.testit.client.invoker.JSON;


/**
 * TestRunFilterApiModel
 */
@JsonPropertyOrder({
  TestRunFilterApiModel.JSON_PROPERTY_PROJECT_IDS,
  TestRunFilterApiModel.JSON_PROPERTY_NAME,
  TestRunFilterApiModel.JSON_PROPERTY_STATES,
  TestRunFilterApiModel.JSON_PROPERTY_STATUS_CODES,
  TestRunFilterApiModel.JSON_PROPERTY_CREATED_DATE,
  TestRunFilterApiModel.JSON_PROPERTY_STARTED_DATE,
  TestRunFilterApiModel.JSON_PROPERTY_CREATED_BY_IDS,
  TestRunFilterApiModel.JSON_PROPERTY_MODIFIED_BY_IDS,
  TestRunFilterApiModel.JSON_PROPERTY_IS_DELETED,
  TestRunFilterApiModel.JSON_PROPERTY_AUTO_TESTS_COUNT,
  TestRunFilterApiModel.JSON_PROPERTY_TEST_RESULTS_OUTCOME,
  TestRunFilterApiModel.JSON_PROPERTY_TEST_RESULTS_STATUS_CODES,
  TestRunFilterApiModel.JSON_PROPERTY_FAILURE_CATEGORY,
  TestRunFilterApiModel.JSON_PROPERTY_COMPLETED_DATE,
  TestRunFilterApiModel.JSON_PROPERTY_TEST_RESULTS_CONFIGURATION_IDS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0")
public class TestRunFilterApiModel {
  public static final String JSON_PROPERTY_PROJECT_IDS = "projectIds";
  private JsonNullable<List<UUID>> projectIds = JsonNullable.<List<UUID>>undefined();

  public static final String JSON_PROPERTY_NAME = "name";
  private JsonNullable<String> name = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_STATES = "states";
  @Deprecated
  private JsonNullable<List<TestRunState>> states = JsonNullable.<List<TestRunState>>undefined();

  public static final String JSON_PROPERTY_STATUS_CODES = "statusCodes";
  private JsonNullable<List<String>> statusCodes = JsonNullable.<List<String>>undefined();

  public static final String JSON_PROPERTY_CREATED_DATE = "createdDate";
  private JsonNullable<DateTimeRangeSelectorModel> createdDate = JsonNullable.<DateTimeRangeSelectorModel>undefined();

  public static final String JSON_PROPERTY_STARTED_DATE = "startedDate";
  private JsonNullable<DateTimeRangeSelectorModel> startedDate = JsonNullable.<DateTimeRangeSelectorModel>undefined();

  public static final String JSON_PROPERTY_CREATED_BY_IDS = "createdByIds";
  private JsonNullable<List<UUID>> createdByIds = JsonNullable.<List<UUID>>undefined();

  public static final String JSON_PROPERTY_MODIFIED_BY_IDS = "modifiedByIds";
  private JsonNullable<List<UUID>> modifiedByIds = JsonNullable.<List<UUID>>undefined();

  public static final String JSON_PROPERTY_IS_DELETED = "isDeleted";
  private JsonNullable<Boolean> isDeleted = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_AUTO_TESTS_COUNT = "autoTestsCount";
  private JsonNullable<Int32RangeSelectorModel> autoTestsCount = JsonNullable.<Int32RangeSelectorModel>undefined();

  public static final String JSON_PROPERTY_TEST_RESULTS_OUTCOME = "testResultsOutcome";
  @Deprecated
  private JsonNullable<List<TestResultOutcome>> testResultsOutcome = JsonNullable.<List<TestResultOutcome>>undefined();

  public static final String JSON_PROPERTY_TEST_RESULTS_STATUS_CODES = "testResultsStatusCodes";
  private JsonNullable<List<String>> testResultsStatusCodes = JsonNullable.<List<String>>undefined();

  public static final String JSON_PROPERTY_FAILURE_CATEGORY = "failureCategory";
  private JsonNullable<List<FailureCategory>> failureCategory = JsonNullable.<List<FailureCategory>>undefined();

  public static final String JSON_PROPERTY_COMPLETED_DATE = "completedDate";
  private JsonNullable<DateTimeRangeSelectorModel> completedDate = JsonNullable.<DateTimeRangeSelectorModel>undefined();

  public static final String JSON_PROPERTY_TEST_RESULTS_CONFIGURATION_IDS = "testResultsConfigurationIds";
  private JsonNullable<List<UUID>> testResultsConfigurationIds = JsonNullable.<List<UUID>>undefined();

  public TestRunFilterApiModel() { 
  }

  public TestRunFilterApiModel projectIds(List<UUID> projectIds) {
    this.projectIds = JsonNullable.<List<UUID>>of(projectIds);
    return this;
  }

  public TestRunFilterApiModel addProjectIdsItem(UUID projectIdsItem) {
    if (this.projectIds == null || !this.projectIds.isPresent()) {
      this.projectIds = JsonNullable.<List<UUID>>of(new ArrayList<>());
    }
    try {
      this.projectIds.get().add(projectIdsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Specifies a test run project IDs to search for
   * @return projectIds
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<UUID> getProjectIds() {
        return projectIds.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PROJECT_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<UUID>> getProjectIds_JsonNullable() {
    return projectIds;
  }
  
  @JsonProperty(JSON_PROPERTY_PROJECT_IDS)
  public void setProjectIds_JsonNullable(JsonNullable<List<UUID>> projectIds) {
    this.projectIds = projectIds;
  }

  public void setProjectIds(List<UUID> projectIds) {
    this.projectIds = JsonNullable.<List<UUID>>of(projectIds);
  }


  public TestRunFilterApiModel name(String name) {
    this.name = JsonNullable.<String>of(name);
    return this;
  }

  /**
   * Specifies test run name
   * @return name
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getName() {
        return name.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getName_JsonNullable() {
    return name;
  }
  
  @JsonProperty(JSON_PROPERTY_NAME)
  public void setName_JsonNullable(JsonNullable<String> name) {
    this.name = name;
  }

  public void setName(String name) {
    this.name = JsonNullable.<String>of(name);
  }


  @Deprecated
  public TestRunFilterApiModel states(List<TestRunState> states) {
    this.states = JsonNullable.<List<TestRunState>>of(states);
    return this;
  }

  public TestRunFilterApiModel addStatesItem(TestRunState statesItem) {
    if (this.states == null || !this.states.isPresent()) {
      this.states = JsonNullable.<List<TestRunState>>of(new ArrayList<>());
    }
    try {
      this.states.get().add(statesItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Specifies a test run states to search for
   * @return states
   * @deprecated
   */
  @Deprecated
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<TestRunState> getStates() {
        return states.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_STATES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<TestRunState>> getStates_JsonNullable() {
    return states;
  }
  
  @JsonProperty(JSON_PROPERTY_STATES)
  public void setStates_JsonNullable(JsonNullable<List<TestRunState>> states) {
    this.states = states;
  }

  @Deprecated
  public void setStates(List<TestRunState> states) {
    this.states = JsonNullable.<List<TestRunState>>of(states);
  }


  public TestRunFilterApiModel statusCodes(List<String> statusCodes) {
    this.statusCodes = JsonNullable.<List<String>>of(statusCodes);
    return this;
  }

  public TestRunFilterApiModel addStatusCodesItem(String statusCodesItem) {
    if (this.statusCodes == null || !this.statusCodes.isPresent()) {
      this.statusCodes = JsonNullable.<List<String>>of(new ArrayList<>());
    }
    try {
      this.statusCodes.get().add(statusCodesItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Specifies a test run status codes to search for
   * @return statusCodes
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<String> getStatusCodes() {
        return statusCodes.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_STATUS_CODES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<String>> getStatusCodes_JsonNullable() {
    return statusCodes;
  }
  
  @JsonProperty(JSON_PROPERTY_STATUS_CODES)
  public void setStatusCodes_JsonNullable(JsonNullable<List<String>> statusCodes) {
    this.statusCodes = statusCodes;
  }

  public void setStatusCodes(List<String> statusCodes) {
    this.statusCodes = JsonNullable.<List<String>>of(statusCodes);
  }


  public TestRunFilterApiModel createdDate(DateTimeRangeSelectorModel createdDate) {
    this.createdDate = JsonNullable.<DateTimeRangeSelectorModel>of(createdDate);
    return this;
  }

  /**
   * Specifies a test run range of created date to search for
   * @return createdDate
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public DateTimeRangeSelectorModel getCreatedDate() {
        return createdDate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CREATED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<DateTimeRangeSelectorModel> getCreatedDate_JsonNullable() {
    return createdDate;
  }
  
  @JsonProperty(JSON_PROPERTY_CREATED_DATE)
  public void setCreatedDate_JsonNullable(JsonNullable<DateTimeRangeSelectorModel> createdDate) {
    this.createdDate = createdDate;
  }

  public void setCreatedDate(DateTimeRangeSelectorModel createdDate) {
    this.createdDate = JsonNullable.<DateTimeRangeSelectorModel>of(createdDate);
  }


  public TestRunFilterApiModel startedDate(DateTimeRangeSelectorModel startedDate) {
    this.startedDate = JsonNullable.<DateTimeRangeSelectorModel>of(startedDate);
    return this;
  }

  /**
   * Specifies a test run range of started date to search for
   * @return startedDate
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public DateTimeRangeSelectorModel getStartedDate() {
        return startedDate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_STARTED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<DateTimeRangeSelectorModel> getStartedDate_JsonNullable() {
    return startedDate;
  }
  
  @JsonProperty(JSON_PROPERTY_STARTED_DATE)
  public void setStartedDate_JsonNullable(JsonNullable<DateTimeRangeSelectorModel> startedDate) {
    this.startedDate = startedDate;
  }

  public void setStartedDate(DateTimeRangeSelectorModel startedDate) {
    this.startedDate = JsonNullable.<DateTimeRangeSelectorModel>of(startedDate);
  }


  public TestRunFilterApiModel createdByIds(List<UUID> createdByIds) {
    this.createdByIds = JsonNullable.<List<UUID>>of(createdByIds);
    return this;
  }

  public TestRunFilterApiModel addCreatedByIdsItem(UUID createdByIdsItem) {
    if (this.createdByIds == null || !this.createdByIds.isPresent()) {
      this.createdByIds = JsonNullable.<List<UUID>>of(new ArrayList<>());
    }
    try {
      this.createdByIds.get().add(createdByIdsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Specifies a test run creator IDs to search for
   * @return createdByIds
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<UUID> getCreatedByIds() {
        return createdByIds.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CREATED_BY_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<UUID>> getCreatedByIds_JsonNullable() {
    return createdByIds;
  }
  
  @JsonProperty(JSON_PROPERTY_CREATED_BY_IDS)
  public void setCreatedByIds_JsonNullable(JsonNullable<List<UUID>> createdByIds) {
    this.createdByIds = createdByIds;
  }

  public void setCreatedByIds(List<UUID> createdByIds) {
    this.createdByIds = JsonNullable.<List<UUID>>of(createdByIds);
  }


  public TestRunFilterApiModel modifiedByIds(List<UUID> modifiedByIds) {
    this.modifiedByIds = JsonNullable.<List<UUID>>of(modifiedByIds);
    return this;
  }

  public TestRunFilterApiModel addModifiedByIdsItem(UUID modifiedByIdsItem) {
    if (this.modifiedByIds == null || !this.modifiedByIds.isPresent()) {
      this.modifiedByIds = JsonNullable.<List<UUID>>of(new ArrayList<>());
    }
    try {
      this.modifiedByIds.get().add(modifiedByIdsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Specifies a test run last editor IDs to search for
   * @return modifiedByIds
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<UUID> getModifiedByIds() {
        return modifiedByIds.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MODIFIED_BY_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<UUID>> getModifiedByIds_JsonNullable() {
    return modifiedByIds;
  }
  
  @JsonProperty(JSON_PROPERTY_MODIFIED_BY_IDS)
  public void setModifiedByIds_JsonNullable(JsonNullable<List<UUID>> modifiedByIds) {
    this.modifiedByIds = modifiedByIds;
  }

  public void setModifiedByIds(List<UUID> modifiedByIds) {
    this.modifiedByIds = JsonNullable.<List<UUID>>of(modifiedByIds);
  }


  public TestRunFilterApiModel isDeleted(Boolean isDeleted) {
    this.isDeleted = JsonNullable.<Boolean>of(isDeleted);
    return this;
  }

  /**
   * Specifies a test run deleted status to search for
   * @return isDeleted
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Boolean getIsDeleted() {
        return isDeleted.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_IS_DELETED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getIsDeleted_JsonNullable() {
    return isDeleted;
  }
  
  @JsonProperty(JSON_PROPERTY_IS_DELETED)
  public void setIsDeleted_JsonNullable(JsonNullable<Boolean> isDeleted) {
    this.isDeleted = isDeleted;
  }

  public void setIsDeleted(Boolean isDeleted) {
    this.isDeleted = JsonNullable.<Boolean>of(isDeleted);
  }


  public TestRunFilterApiModel autoTestsCount(Int32RangeSelectorModel autoTestsCount) {
    this.autoTestsCount = JsonNullable.<Int32RangeSelectorModel>of(autoTestsCount);
    return this;
  }

  /**
   * Number of autoTests run in the test run
   * @return autoTestsCount
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Int32RangeSelectorModel getAutoTestsCount() {
        return autoTestsCount.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AUTO_TESTS_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Int32RangeSelectorModel> getAutoTestsCount_JsonNullable() {
    return autoTestsCount;
  }
  
  @JsonProperty(JSON_PROPERTY_AUTO_TESTS_COUNT)
  public void setAutoTestsCount_JsonNullable(JsonNullable<Int32RangeSelectorModel> autoTestsCount) {
    this.autoTestsCount = autoTestsCount;
  }

  public void setAutoTestsCount(Int32RangeSelectorModel autoTestsCount) {
    this.autoTestsCount = JsonNullable.<Int32RangeSelectorModel>of(autoTestsCount);
  }


  @Deprecated
  public TestRunFilterApiModel testResultsOutcome(List<TestResultOutcome> testResultsOutcome) {
    this.testResultsOutcome = JsonNullable.<List<TestResultOutcome>>of(testResultsOutcome);
    return this;
  }

  public TestRunFilterApiModel addTestResultsOutcomeItem(TestResultOutcome testResultsOutcomeItem) {
    if (this.testResultsOutcome == null || !this.testResultsOutcome.isPresent()) {
      this.testResultsOutcome = JsonNullable.<List<TestResultOutcome>>of(new ArrayList<>());
    }
    try {
      this.testResultsOutcome.get().add(testResultsOutcomeItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Specifies test results outcomes
   * @return testResultsOutcome
   * @deprecated
   */
  @Deprecated
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<TestResultOutcome> getTestResultsOutcome() {
        return testResultsOutcome.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TEST_RESULTS_OUTCOME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<TestResultOutcome>> getTestResultsOutcome_JsonNullable() {
    return testResultsOutcome;
  }
  
  @JsonProperty(JSON_PROPERTY_TEST_RESULTS_OUTCOME)
  public void setTestResultsOutcome_JsonNullable(JsonNullable<List<TestResultOutcome>> testResultsOutcome) {
    this.testResultsOutcome = testResultsOutcome;
  }

  @Deprecated
  public void setTestResultsOutcome(List<TestResultOutcome> testResultsOutcome) {
    this.testResultsOutcome = JsonNullable.<List<TestResultOutcome>>of(testResultsOutcome);
  }


  public TestRunFilterApiModel testResultsStatusCodes(List<String> testResultsStatusCodes) {
    this.testResultsStatusCodes = JsonNullable.<List<String>>of(testResultsStatusCodes);
    return this;
  }

  public TestRunFilterApiModel addTestResultsStatusCodesItem(String testResultsStatusCodesItem) {
    if (this.testResultsStatusCodes == null || !this.testResultsStatusCodes.isPresent()) {
      this.testResultsStatusCodes = JsonNullable.<List<String>>of(new ArrayList<>());
    }
    try {
      this.testResultsStatusCodes.get().add(testResultsStatusCodesItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Specifies test results status codes
   * @return testResultsStatusCodes
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<String> getTestResultsStatusCodes() {
        return testResultsStatusCodes.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TEST_RESULTS_STATUS_CODES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<String>> getTestResultsStatusCodes_JsonNullable() {
    return testResultsStatusCodes;
  }
  
  @JsonProperty(JSON_PROPERTY_TEST_RESULTS_STATUS_CODES)
  public void setTestResultsStatusCodes_JsonNullable(JsonNullable<List<String>> testResultsStatusCodes) {
    this.testResultsStatusCodes = testResultsStatusCodes;
  }

  public void setTestResultsStatusCodes(List<String> testResultsStatusCodes) {
    this.testResultsStatusCodes = JsonNullable.<List<String>>of(testResultsStatusCodes);
  }


  public TestRunFilterApiModel failureCategory(List<FailureCategory> failureCategory) {
    this.failureCategory = JsonNullable.<List<FailureCategory>>of(failureCategory);
    return this;
  }

  public TestRunFilterApiModel addFailureCategoryItem(FailureCategory failureCategoryItem) {
    if (this.failureCategory == null || !this.failureCategory.isPresent()) {
      this.failureCategory = JsonNullable.<List<FailureCategory>>of(new ArrayList<>());
    }
    try {
      this.failureCategory.get().add(failureCategoryItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Specifies failure categories
   * @return failureCategory
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<FailureCategory> getFailureCategory() {
        return failureCategory.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FAILURE_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<FailureCategory>> getFailureCategory_JsonNullable() {
    return failureCategory;
  }
  
  @JsonProperty(JSON_PROPERTY_FAILURE_CATEGORY)
  public void setFailureCategory_JsonNullable(JsonNullable<List<FailureCategory>> failureCategory) {
    this.failureCategory = failureCategory;
  }

  public void setFailureCategory(List<FailureCategory> failureCategory) {
    this.failureCategory = JsonNullable.<List<FailureCategory>>of(failureCategory);
  }


  public TestRunFilterApiModel completedDate(DateTimeRangeSelectorModel completedDate) {
    this.completedDate = JsonNullable.<DateTimeRangeSelectorModel>of(completedDate);
    return this;
  }

  /**
   * Specifies a test run range of completed date to search for
   * @return completedDate
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public DateTimeRangeSelectorModel getCompletedDate() {
        return completedDate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_COMPLETED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<DateTimeRangeSelectorModel> getCompletedDate_JsonNullable() {
    return completedDate;
  }
  
  @JsonProperty(JSON_PROPERTY_COMPLETED_DATE)
  public void setCompletedDate_JsonNullable(JsonNullable<DateTimeRangeSelectorModel> completedDate) {
    this.completedDate = completedDate;
  }

  public void setCompletedDate(DateTimeRangeSelectorModel completedDate) {
    this.completedDate = JsonNullable.<DateTimeRangeSelectorModel>of(completedDate);
  }


  public TestRunFilterApiModel testResultsConfigurationIds(List<UUID> testResultsConfigurationIds) {
    this.testResultsConfigurationIds = JsonNullable.<List<UUID>>of(testResultsConfigurationIds);
    return this;
  }

  public TestRunFilterApiModel addTestResultsConfigurationIdsItem(UUID testResultsConfigurationIdsItem) {
    if (this.testResultsConfigurationIds == null || !this.testResultsConfigurationIds.isPresent()) {
      this.testResultsConfigurationIds = JsonNullable.<List<UUID>>of(new ArrayList<>());
    }
    try {
      this.testResultsConfigurationIds.get().add(testResultsConfigurationIdsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Specifies a test result configuration IDs to search for
   * @return testResultsConfigurationIds
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<UUID> getTestResultsConfigurationIds() {
        return testResultsConfigurationIds.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TEST_RESULTS_CONFIGURATION_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<UUID>> getTestResultsConfigurationIds_JsonNullable() {
    return testResultsConfigurationIds;
  }
  
  @JsonProperty(JSON_PROPERTY_TEST_RESULTS_CONFIGURATION_IDS)
  public void setTestResultsConfigurationIds_JsonNullable(JsonNullable<List<UUID>> testResultsConfigurationIds) {
    this.testResultsConfigurationIds = testResultsConfigurationIds;
  }

  public void setTestResultsConfigurationIds(List<UUID> testResultsConfigurationIds) {
    this.testResultsConfigurationIds = JsonNullable.<List<UUID>>of(testResultsConfigurationIds);
  }


  /**
   * Return true if this TestRunFilterApiModel object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestRunFilterApiModel testRunFilterApiModel = (TestRunFilterApiModel) o;
    return equalsNullable(this.projectIds, testRunFilterApiModel.projectIds) &&
        equalsNullable(this.name, testRunFilterApiModel.name) &&
        equalsNullable(this.states, testRunFilterApiModel.states) &&
        equalsNullable(this.statusCodes, testRunFilterApiModel.statusCodes) &&
        equalsNullable(this.createdDate, testRunFilterApiModel.createdDate) &&
        equalsNullable(this.startedDate, testRunFilterApiModel.startedDate) &&
        equalsNullable(this.createdByIds, testRunFilterApiModel.createdByIds) &&
        equalsNullable(this.modifiedByIds, testRunFilterApiModel.modifiedByIds) &&
        equalsNullable(this.isDeleted, testRunFilterApiModel.isDeleted) &&
        equalsNullable(this.autoTestsCount, testRunFilterApiModel.autoTestsCount) &&
        equalsNullable(this.testResultsOutcome, testRunFilterApiModel.testResultsOutcome) &&
        equalsNullable(this.testResultsStatusCodes, testRunFilterApiModel.testResultsStatusCodes) &&
        equalsNullable(this.failureCategory, testRunFilterApiModel.failureCategory) &&
        equalsNullable(this.completedDate, testRunFilterApiModel.completedDate) &&
        equalsNullable(this.testResultsConfigurationIds, testRunFilterApiModel.testResultsConfigurationIds);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(projectIds), hashCodeNullable(name), hashCodeNullable(states), hashCodeNullable(statusCodes), hashCodeNullable(createdDate), hashCodeNullable(startedDate), hashCodeNullable(createdByIds), hashCodeNullable(modifiedByIds), hashCodeNullable(isDeleted), hashCodeNullable(autoTestsCount), hashCodeNullable(testResultsOutcome), hashCodeNullable(testResultsStatusCodes), hashCodeNullable(failureCategory), hashCodeNullable(completedDate), hashCodeNullable(testResultsConfigurationIds));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestRunFilterApiModel {\n");
    sb.append("    projectIds: ").append(toIndentedString(projectIds)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    states: ").append(toIndentedString(states)).append("\n");
    sb.append("    statusCodes: ").append(toIndentedString(statusCodes)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    startedDate: ").append(toIndentedString(startedDate)).append("\n");
    sb.append("    createdByIds: ").append(toIndentedString(createdByIds)).append("\n");
    sb.append("    modifiedByIds: ").append(toIndentedString(modifiedByIds)).append("\n");
    sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
    sb.append("    autoTestsCount: ").append(toIndentedString(autoTestsCount)).append("\n");
    sb.append("    testResultsOutcome: ").append(toIndentedString(testResultsOutcome)).append("\n");
    sb.append("    testResultsStatusCodes: ").append(toIndentedString(testResultsStatusCodes)).append("\n");
    sb.append("    failureCategory: ").append(toIndentedString(failureCategory)).append("\n");
    sb.append("    completedDate: ").append(toIndentedString(completedDate)).append("\n");
    sb.append("    testResultsConfigurationIds: ").append(toIndentedString(testResultsConfigurationIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

