/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import ru.testit.client.model.FailureCategoryModel;
import ru.testit.client.model.TestResultOutcome;
import ru.testit.client.model.TestRunFilterModelAutoTestsCount;
import ru.testit.client.model.TestRunFilterModelCompletedDate;
import ru.testit.client.model.TestRunFilterModelStartedDate;
import ru.testit.client.model.TestRunState;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import ru.testit.client.invoker.JSON;


/**
 * TestRunFilterModel
 */
@JsonPropertyOrder({
  TestRunFilterModel.JSON_PROPERTY_PROJECT_IDS,
  TestRunFilterModel.JSON_PROPERTY_NAME,
  TestRunFilterModel.JSON_PROPERTY_STATES,
  TestRunFilterModel.JSON_PROPERTY_STARTED_DATE,
  TestRunFilterModel.JSON_PROPERTY_CREATED_BY_IDS,
  TestRunFilterModel.JSON_PROPERTY_MODIFIED_BY_IDS,
  TestRunFilterModel.JSON_PROPERTY_IS_DELETED,
  TestRunFilterModel.JSON_PROPERTY_AUTO_TESTS_COUNT,
  TestRunFilterModel.JSON_PROPERTY_TEST_RESULTS_OUTCOME,
  TestRunFilterModel.JSON_PROPERTY_FAILURE_CATEGORY,
  TestRunFilterModel.JSON_PROPERTY_COMPLETED_DATE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TestRunFilterModel {
  public static final String JSON_PROPERTY_PROJECT_IDS = "projectIds";
  private JsonNullable<Set<UUID>> projectIds = JsonNullable.<Set<UUID>>undefined();

  public static final String JSON_PROPERTY_NAME = "name";
  private JsonNullable<String> name = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_STATES = "states";
  private JsonNullable<Set<TestRunState>> states = JsonNullable.<Set<TestRunState>>undefined();

  public static final String JSON_PROPERTY_STARTED_DATE = "startedDate";
  private JsonNullable<TestRunFilterModelStartedDate> startedDate = JsonNullable.<TestRunFilterModelStartedDate>undefined();

  public static final String JSON_PROPERTY_CREATED_BY_IDS = "createdByIds";
  private JsonNullable<Set<UUID>> createdByIds = JsonNullable.<Set<UUID>>undefined();

  public static final String JSON_PROPERTY_MODIFIED_BY_IDS = "modifiedByIds";
  private JsonNullable<Set<UUID>> modifiedByIds = JsonNullable.<Set<UUID>>undefined();

  public static final String JSON_PROPERTY_IS_DELETED = "isDeleted";
  private JsonNullable<Boolean> isDeleted = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_AUTO_TESTS_COUNT = "autoTestsCount";
  private JsonNullable<TestRunFilterModelAutoTestsCount> autoTestsCount = JsonNullable.<TestRunFilterModelAutoTestsCount>undefined();

  public static final String JSON_PROPERTY_TEST_RESULTS_OUTCOME = "testResultsOutcome";
  private JsonNullable<List<TestResultOutcome>> testResultsOutcome = JsonNullable.<List<TestResultOutcome>>undefined();

  public static final String JSON_PROPERTY_FAILURE_CATEGORY = "failureCategory";
  private JsonNullable<List<FailureCategoryModel>> failureCategory = JsonNullable.<List<FailureCategoryModel>>undefined();

  public static final String JSON_PROPERTY_COMPLETED_DATE = "completedDate";
  private JsonNullable<TestRunFilterModelCompletedDate> completedDate = JsonNullable.<TestRunFilterModelCompletedDate>undefined();

  public TestRunFilterModel() { 
  }

  public TestRunFilterModel projectIds(Set<UUID> projectIds) {
    this.projectIds = JsonNullable.<Set<UUID>>of(projectIds);
    return this;
  }

  public TestRunFilterModel addProjectIdsItem(UUID projectIdsItem) {
    if (this.projectIds == null || !this.projectIds.isPresent()) {
      this.projectIds = JsonNullable.<Set<UUID>>of(new LinkedHashSet<>());
    }
    try {
      this.projectIds.get().add(projectIdsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Specifies a test run project IDs to search for
   * @return projectIds
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Set<UUID> getProjectIds() {
        return projectIds.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PROJECT_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Set<UUID>> getProjectIds_JsonNullable() {
    return projectIds;
  }
  
  @JsonProperty(JSON_PROPERTY_PROJECT_IDS)
  public void setProjectIds_JsonNullable(JsonNullable<Set<UUID>> projectIds) {
    this.projectIds = projectIds;
  }

  public void setProjectIds(Set<UUID> projectIds) {
    this.projectIds = JsonNullable.<Set<UUID>>of(projectIds);
  }


  public TestRunFilterModel name(String name) {
    this.name = JsonNullable.<String>of(name);
    return this;
  }

   /**
   * Specifies test run name
   * @return name
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getName() {
        return name.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getName_JsonNullable() {
    return name;
  }
  
  @JsonProperty(JSON_PROPERTY_NAME)
  public void setName_JsonNullable(JsonNullable<String> name) {
    this.name = name;
  }

  public void setName(String name) {
    this.name = JsonNullable.<String>of(name);
  }


  public TestRunFilterModel states(Set<TestRunState> states) {
    this.states = JsonNullable.<Set<TestRunState>>of(states);
    return this;
  }

  public TestRunFilterModel addStatesItem(TestRunState statesItem) {
    if (this.states == null || !this.states.isPresent()) {
      this.states = JsonNullable.<Set<TestRunState>>of(new LinkedHashSet<>());
    }
    try {
      this.states.get().add(statesItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Specifies a test run states to search for
   * @return states
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Set<TestRunState> getStates() {
        return states.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_STATES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Set<TestRunState>> getStates_JsonNullable() {
    return states;
  }
  
  @JsonProperty(JSON_PROPERTY_STATES)
  public void setStates_JsonNullable(JsonNullable<Set<TestRunState>> states) {
    this.states = states;
  }

  public void setStates(Set<TestRunState> states) {
    this.states = JsonNullable.<Set<TestRunState>>of(states);
  }


  public TestRunFilterModel startedDate(TestRunFilterModelStartedDate startedDate) {
    this.startedDate = JsonNullable.<TestRunFilterModelStartedDate>of(startedDate);
    return this;
  }

   /**
   * Get startedDate
   * @return startedDate
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public TestRunFilterModelStartedDate getStartedDate() {
        return startedDate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_STARTED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<TestRunFilterModelStartedDate> getStartedDate_JsonNullable() {
    return startedDate;
  }
  
  @JsonProperty(JSON_PROPERTY_STARTED_DATE)
  public void setStartedDate_JsonNullable(JsonNullable<TestRunFilterModelStartedDate> startedDate) {
    this.startedDate = startedDate;
  }

  public void setStartedDate(TestRunFilterModelStartedDate startedDate) {
    this.startedDate = JsonNullable.<TestRunFilterModelStartedDate>of(startedDate);
  }


  public TestRunFilterModel createdByIds(Set<UUID> createdByIds) {
    this.createdByIds = JsonNullable.<Set<UUID>>of(createdByIds);
    return this;
  }

  public TestRunFilterModel addCreatedByIdsItem(UUID createdByIdsItem) {
    if (this.createdByIds == null || !this.createdByIds.isPresent()) {
      this.createdByIds = JsonNullable.<Set<UUID>>of(new LinkedHashSet<>());
    }
    try {
      this.createdByIds.get().add(createdByIdsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Specifies a test run creator IDs to search for
   * @return createdByIds
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Set<UUID> getCreatedByIds() {
        return createdByIds.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CREATED_BY_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Set<UUID>> getCreatedByIds_JsonNullable() {
    return createdByIds;
  }
  
  @JsonProperty(JSON_PROPERTY_CREATED_BY_IDS)
  public void setCreatedByIds_JsonNullable(JsonNullable<Set<UUID>> createdByIds) {
    this.createdByIds = createdByIds;
  }

  public void setCreatedByIds(Set<UUID> createdByIds) {
    this.createdByIds = JsonNullable.<Set<UUID>>of(createdByIds);
  }


  public TestRunFilterModel modifiedByIds(Set<UUID> modifiedByIds) {
    this.modifiedByIds = JsonNullable.<Set<UUID>>of(modifiedByIds);
    return this;
  }

  public TestRunFilterModel addModifiedByIdsItem(UUID modifiedByIdsItem) {
    if (this.modifiedByIds == null || !this.modifiedByIds.isPresent()) {
      this.modifiedByIds = JsonNullable.<Set<UUID>>of(new LinkedHashSet<>());
    }
    try {
      this.modifiedByIds.get().add(modifiedByIdsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Specifies a test run last editor IDs to search for
   * @return modifiedByIds
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Set<UUID> getModifiedByIds() {
        return modifiedByIds.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MODIFIED_BY_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Set<UUID>> getModifiedByIds_JsonNullable() {
    return modifiedByIds;
  }
  
  @JsonProperty(JSON_PROPERTY_MODIFIED_BY_IDS)
  public void setModifiedByIds_JsonNullable(JsonNullable<Set<UUID>> modifiedByIds) {
    this.modifiedByIds = modifiedByIds;
  }

  public void setModifiedByIds(Set<UUID> modifiedByIds) {
    this.modifiedByIds = JsonNullable.<Set<UUID>>of(modifiedByIds);
  }


  public TestRunFilterModel isDeleted(Boolean isDeleted) {
    this.isDeleted = JsonNullable.<Boolean>of(isDeleted);
    return this;
  }

   /**
   * Specifies a test run deleted status to search for
   * @return isDeleted
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Boolean getIsDeleted() {
        return isDeleted.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_IS_DELETED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getIsDeleted_JsonNullable() {
    return isDeleted;
  }
  
  @JsonProperty(JSON_PROPERTY_IS_DELETED)
  public void setIsDeleted_JsonNullable(JsonNullable<Boolean> isDeleted) {
    this.isDeleted = isDeleted;
  }

  public void setIsDeleted(Boolean isDeleted) {
    this.isDeleted = JsonNullable.<Boolean>of(isDeleted);
  }


  public TestRunFilterModel autoTestsCount(TestRunFilterModelAutoTestsCount autoTestsCount) {
    this.autoTestsCount = JsonNullable.<TestRunFilterModelAutoTestsCount>of(autoTestsCount);
    return this;
  }

   /**
   * Get autoTestsCount
   * @return autoTestsCount
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public TestRunFilterModelAutoTestsCount getAutoTestsCount() {
        return autoTestsCount.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AUTO_TESTS_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<TestRunFilterModelAutoTestsCount> getAutoTestsCount_JsonNullable() {
    return autoTestsCount;
  }
  
  @JsonProperty(JSON_PROPERTY_AUTO_TESTS_COUNT)
  public void setAutoTestsCount_JsonNullable(JsonNullable<TestRunFilterModelAutoTestsCount> autoTestsCount) {
    this.autoTestsCount = autoTestsCount;
  }

  public void setAutoTestsCount(TestRunFilterModelAutoTestsCount autoTestsCount) {
    this.autoTestsCount = JsonNullable.<TestRunFilterModelAutoTestsCount>of(autoTestsCount);
  }


  public TestRunFilterModel testResultsOutcome(List<TestResultOutcome> testResultsOutcome) {
    this.testResultsOutcome = JsonNullable.<List<TestResultOutcome>>of(testResultsOutcome);
    return this;
  }

  public TestRunFilterModel addTestResultsOutcomeItem(TestResultOutcome testResultsOutcomeItem) {
    if (this.testResultsOutcome == null || !this.testResultsOutcome.isPresent()) {
      this.testResultsOutcome = JsonNullable.<List<TestResultOutcome>>of(new ArrayList<>());
    }
    try {
      this.testResultsOutcome.get().add(testResultsOutcomeItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Specifies test results outcomes
   * @return testResultsOutcome
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<TestResultOutcome> getTestResultsOutcome() {
        return testResultsOutcome.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TEST_RESULTS_OUTCOME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<TestResultOutcome>> getTestResultsOutcome_JsonNullable() {
    return testResultsOutcome;
  }
  
  @JsonProperty(JSON_PROPERTY_TEST_RESULTS_OUTCOME)
  public void setTestResultsOutcome_JsonNullable(JsonNullable<List<TestResultOutcome>> testResultsOutcome) {
    this.testResultsOutcome = testResultsOutcome;
  }

  public void setTestResultsOutcome(List<TestResultOutcome> testResultsOutcome) {
    this.testResultsOutcome = JsonNullable.<List<TestResultOutcome>>of(testResultsOutcome);
  }


  public TestRunFilterModel failureCategory(List<FailureCategoryModel> failureCategory) {
    this.failureCategory = JsonNullable.<List<FailureCategoryModel>>of(failureCategory);
    return this;
  }

  public TestRunFilterModel addFailureCategoryItem(FailureCategoryModel failureCategoryItem) {
    if (this.failureCategory == null || !this.failureCategory.isPresent()) {
      this.failureCategory = JsonNullable.<List<FailureCategoryModel>>of(new ArrayList<>());
    }
    try {
      this.failureCategory.get().add(failureCategoryItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Specifies failure categories
   * @return failureCategory
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<FailureCategoryModel> getFailureCategory() {
        return failureCategory.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FAILURE_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<FailureCategoryModel>> getFailureCategory_JsonNullable() {
    return failureCategory;
  }
  
  @JsonProperty(JSON_PROPERTY_FAILURE_CATEGORY)
  public void setFailureCategory_JsonNullable(JsonNullable<List<FailureCategoryModel>> failureCategory) {
    this.failureCategory = failureCategory;
  }

  public void setFailureCategory(List<FailureCategoryModel> failureCategory) {
    this.failureCategory = JsonNullable.<List<FailureCategoryModel>>of(failureCategory);
  }


  public TestRunFilterModel completedDate(TestRunFilterModelCompletedDate completedDate) {
    this.completedDate = JsonNullable.<TestRunFilterModelCompletedDate>of(completedDate);
    return this;
  }

   /**
   * Get completedDate
   * @return completedDate
  **/
  @jakarta.annotation.Nullable
  @JsonIgnore

  public TestRunFilterModelCompletedDate getCompletedDate() {
        return completedDate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_COMPLETED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<TestRunFilterModelCompletedDate> getCompletedDate_JsonNullable() {
    return completedDate;
  }
  
  @JsonProperty(JSON_PROPERTY_COMPLETED_DATE)
  public void setCompletedDate_JsonNullable(JsonNullable<TestRunFilterModelCompletedDate> completedDate) {
    this.completedDate = completedDate;
  }

  public void setCompletedDate(TestRunFilterModelCompletedDate completedDate) {
    this.completedDate = JsonNullable.<TestRunFilterModelCompletedDate>of(completedDate);
  }


  /**
   * Return true if this TestRunFilterModel object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestRunFilterModel testRunFilterModel = (TestRunFilterModel) o;
    return equalsNullable(this.projectIds, testRunFilterModel.projectIds) &&
        equalsNullable(this.name, testRunFilterModel.name) &&
        equalsNullable(this.states, testRunFilterModel.states) &&
        equalsNullable(this.startedDate, testRunFilterModel.startedDate) &&
        equalsNullable(this.createdByIds, testRunFilterModel.createdByIds) &&
        equalsNullable(this.modifiedByIds, testRunFilterModel.modifiedByIds) &&
        equalsNullable(this.isDeleted, testRunFilterModel.isDeleted) &&
        equalsNullable(this.autoTestsCount, testRunFilterModel.autoTestsCount) &&
        equalsNullable(this.testResultsOutcome, testRunFilterModel.testResultsOutcome) &&
        equalsNullable(this.failureCategory, testRunFilterModel.failureCategory) &&
        equalsNullable(this.completedDate, testRunFilterModel.completedDate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(projectIds), hashCodeNullable(name), hashCodeNullable(states), hashCodeNullable(startedDate), hashCodeNullable(createdByIds), hashCodeNullable(modifiedByIds), hashCodeNullable(isDeleted), hashCodeNullable(autoTestsCount), hashCodeNullable(testResultsOutcome), hashCodeNullable(failureCategory), hashCodeNullable(completedDate));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestRunFilterModel {\n");
    sb.append("    projectIds: ").append(toIndentedString(projectIds)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    states: ").append(toIndentedString(states)).append("\n");
    sb.append("    startedDate: ").append(toIndentedString(startedDate)).append("\n");
    sb.append("    createdByIds: ").append(toIndentedString(createdByIds)).append("\n");
    sb.append("    modifiedByIds: ").append(toIndentedString(modifiedByIds)).append("\n");
    sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
    sb.append("    autoTestsCount: ").append(toIndentedString(autoTestsCount)).append("\n");
    sb.append("    testResultsOutcome: ").append(toIndentedString(testResultsOutcome)).append("\n");
    sb.append("    failureCategory: ").append(toIndentedString(failureCategory)).append("\n");
    sb.append("    completedDate: ").append(toIndentedString(completedDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

