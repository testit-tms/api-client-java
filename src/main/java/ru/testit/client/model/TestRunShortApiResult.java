/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import ru.testit.client.model.ConfigurationShortApiResult;
import ru.testit.client.model.TestResultsStatisticsApiResult;
import ru.testit.client.model.TestRunState;
import ru.testit.client.model.TestStatusApiResult;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import ru.testit.client.invoker.JSON;


/**
 * TestRunShortApiResult
 */
@JsonPropertyOrder({
  TestRunShortApiResult.JSON_PROPERTY_ID,
  TestRunShortApiResult.JSON_PROPERTY_NAME,
  TestRunShortApiResult.JSON_PROPERTY_STATE,
  TestRunShortApiResult.JSON_PROPERTY_STATUS,
  TestRunShortApiResult.JSON_PROPERTY_CREATED_DATE,
  TestRunShortApiResult.JSON_PROPERTY_CREATED_BY_ID,
  TestRunShortApiResult.JSON_PROPERTY_IS_DELETED,
  TestRunShortApiResult.JSON_PROPERTY_AUTO_TESTS_COUNT,
  TestRunShortApiResult.JSON_PROPERTY_STATISTICS,
  TestRunShortApiResult.JSON_PROPERTY_TEST_RESULTS_CONFIGURATIONS,
  TestRunShortApiResult.JSON_PROPERTY_STARTED_DATE,
  TestRunShortApiResult.JSON_PROPERTY_COMPLETED_DATE,
  TestRunShortApiResult.JSON_PROPERTY_MODIFIED_BY_ID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0")
public class TestRunShortApiResult {
  public static final String JSON_PROPERTY_ID = "id";
  private UUID id;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_STATE = "state";
  @Deprecated
  private TestRunState state;

  public static final String JSON_PROPERTY_STATUS = "status";
  private TestStatusApiResult status;

  public static final String JSON_PROPERTY_CREATED_DATE = "createdDate";
  private OffsetDateTime createdDate;

  public static final String JSON_PROPERTY_CREATED_BY_ID = "createdById";
  private UUID createdById;

  public static final String JSON_PROPERTY_IS_DELETED = "isDeleted";
  private Boolean isDeleted;

  public static final String JSON_PROPERTY_AUTO_TESTS_COUNT = "autoTestsCount";
  private Integer autoTestsCount;

  public static final String JSON_PROPERTY_STATISTICS = "statistics";
  private TestResultsStatisticsApiResult statistics;

  public static final String JSON_PROPERTY_TEST_RESULTS_CONFIGURATIONS = "testResultsConfigurations";
  private List<ConfigurationShortApiResult> testResultsConfigurations = new ArrayList<>();

  public static final String JSON_PROPERTY_STARTED_DATE = "startedDate";
  private JsonNullable<OffsetDateTime> startedDate = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_COMPLETED_DATE = "completedDate";
  private JsonNullable<OffsetDateTime> completedDate = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_MODIFIED_BY_ID = "modifiedById";
  private JsonNullable<UUID> modifiedById = JsonNullable.<UUID>undefined();

  public TestRunShortApiResult() { 
  }

  public TestRunShortApiResult id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Unique ID of the test run
   * @return id
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(UUID id) {
    this.id = id;
  }


  public TestRunShortApiResult name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the test run
   * @return name
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  @Deprecated
  public TestRunShortApiResult state(TestRunState state) {
    this.state = state;
    return this;
  }

  /**
   * Current state of the test run
   * @return state
   * @deprecated
   */
  @Deprecated
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TestRunState getState() {
    return state;
  }


  @Deprecated
  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setState(TestRunState state) {
    this.state = state;
  }


  public TestRunShortApiResult status(TestStatusApiResult status) {
    this.status = status;
    return this;
  }

  /**
   * Current status of the test run
   * @return status
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TestStatusApiResult getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatus(TestStatusApiResult status) {
    this.status = status;
  }


  public TestRunShortApiResult createdDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Date when the test run was created
   * @return createdDate
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public TestRunShortApiResult createdById(UUID createdById) {
    this.createdById = createdById;
    return this;
  }

  /**
   * Unique ID of user who created the test run
   * @return createdById
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_BY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getCreatedById() {
    return createdById;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_BY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedById(UUID createdById) {
    this.createdById = createdById;
  }


  public TestRunShortApiResult isDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
    return this;
  }

  /**
   * Is the test run is deleted
   * @return isDeleted
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_DELETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsDeleted() {
    return isDeleted;
  }


  @JsonProperty(JSON_PROPERTY_IS_DELETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
  }


  public TestRunShortApiResult autoTestsCount(Integer autoTestsCount) {
    this.autoTestsCount = autoTestsCount;
    return this;
  }

  /**
   * Number of AutoTests run in the test run
   * @return autoTestsCount
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AUTO_TESTS_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getAutoTestsCount() {
    return autoTestsCount;
  }


  @JsonProperty(JSON_PROPERTY_AUTO_TESTS_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAutoTestsCount(Integer autoTestsCount) {
    this.autoTestsCount = autoTestsCount;
  }


  public TestRunShortApiResult statistics(TestResultsStatisticsApiResult statistics) {
    this.statistics = statistics;
    return this;
  }

  /**
   * Statistics of the test run
   * @return statistics
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATISTICS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TestResultsStatisticsApiResult getStatistics() {
    return statistics;
  }


  @JsonProperty(JSON_PROPERTY_STATISTICS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatistics(TestResultsStatisticsApiResult statistics) {
    this.statistics = statistics;
  }


  public TestRunShortApiResult testResultsConfigurations(List<ConfigurationShortApiResult> testResultsConfigurations) {
    this.testResultsConfigurations = testResultsConfigurations;
    return this;
  }

  public TestRunShortApiResult addTestResultsConfigurationsItem(ConfigurationShortApiResult testResultsConfigurationsItem) {
    if (this.testResultsConfigurations == null) {
      this.testResultsConfigurations = new ArrayList<>();
    }
    this.testResultsConfigurations.add(testResultsConfigurationsItem);
    return this;
  }

  /**
   * Test results configurations
   * @return testResultsConfigurations
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TEST_RESULTS_CONFIGURATIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ConfigurationShortApiResult> getTestResultsConfigurations() {
    return testResultsConfigurations;
  }


  @JsonProperty(JSON_PROPERTY_TEST_RESULTS_CONFIGURATIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTestResultsConfigurations(List<ConfigurationShortApiResult> testResultsConfigurations) {
    this.testResultsConfigurations = testResultsConfigurations;
  }


  public TestRunShortApiResult startedDate(OffsetDateTime startedDate) {
    this.startedDate = JsonNullable.<OffsetDateTime>of(startedDate);
    return this;
  }

  /**
   * Date when the test run was started
   * @return startedDate
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public OffsetDateTime getStartedDate() {
        return startedDate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_STARTED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getStartedDate_JsonNullable() {
    return startedDate;
  }
  
  @JsonProperty(JSON_PROPERTY_STARTED_DATE)
  public void setStartedDate_JsonNullable(JsonNullable<OffsetDateTime> startedDate) {
    this.startedDate = startedDate;
  }

  public void setStartedDate(OffsetDateTime startedDate) {
    this.startedDate = JsonNullable.<OffsetDateTime>of(startedDate);
  }


  public TestRunShortApiResult completedDate(OffsetDateTime completedDate) {
    this.completedDate = JsonNullable.<OffsetDateTime>of(completedDate);
    return this;
  }

  /**
   * Completion date of the test run
   * @return completedDate
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public OffsetDateTime getCompletedDate() {
        return completedDate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_COMPLETED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getCompletedDate_JsonNullable() {
    return completedDate;
  }
  
  @JsonProperty(JSON_PROPERTY_COMPLETED_DATE)
  public void setCompletedDate_JsonNullable(JsonNullable<OffsetDateTime> completedDate) {
    this.completedDate = completedDate;
  }

  public void setCompletedDate(OffsetDateTime completedDate) {
    this.completedDate = JsonNullable.<OffsetDateTime>of(completedDate);
  }


  public TestRunShortApiResult modifiedById(UUID modifiedById) {
    this.modifiedById = JsonNullable.<UUID>of(modifiedById);
    return this;
  }

  /**
   * Unique ID of user who modified the test run last time
   * @return modifiedById
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public UUID getModifiedById() {
        return modifiedById.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MODIFIED_BY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<UUID> getModifiedById_JsonNullable() {
    return modifiedById;
  }
  
  @JsonProperty(JSON_PROPERTY_MODIFIED_BY_ID)
  public void setModifiedById_JsonNullable(JsonNullable<UUID> modifiedById) {
    this.modifiedById = modifiedById;
  }

  public void setModifiedById(UUID modifiedById) {
    this.modifiedById = JsonNullable.<UUID>of(modifiedById);
  }


  /**
   * Return true if this TestRunShortApiResult object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestRunShortApiResult testRunShortApiResult = (TestRunShortApiResult) o;
    return Objects.equals(this.id, testRunShortApiResult.id) &&
        Objects.equals(this.name, testRunShortApiResult.name) &&
        Objects.equals(this.state, testRunShortApiResult.state) &&
        Objects.equals(this.status, testRunShortApiResult.status) &&
        Objects.equals(this.createdDate, testRunShortApiResult.createdDate) &&
        Objects.equals(this.createdById, testRunShortApiResult.createdById) &&
        Objects.equals(this.isDeleted, testRunShortApiResult.isDeleted) &&
        Objects.equals(this.autoTestsCount, testRunShortApiResult.autoTestsCount) &&
        Objects.equals(this.statistics, testRunShortApiResult.statistics) &&
        Objects.equals(this.testResultsConfigurations, testRunShortApiResult.testResultsConfigurations) &&
        equalsNullable(this.startedDate, testRunShortApiResult.startedDate) &&
        equalsNullable(this.completedDate, testRunShortApiResult.completedDate) &&
        equalsNullable(this.modifiedById, testRunShortApiResult.modifiedById);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, state, status, createdDate, createdById, isDeleted, autoTestsCount, statistics, testResultsConfigurations, hashCodeNullable(startedDate), hashCodeNullable(completedDate), hashCodeNullable(modifiedById));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestRunShortApiResult {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    createdById: ").append(toIndentedString(createdById)).append("\n");
    sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
    sb.append("    autoTestsCount: ").append(toIndentedString(autoTestsCount)).append("\n");
    sb.append("    statistics: ").append(toIndentedString(statistics)).append("\n");
    sb.append("    testResultsConfigurations: ").append(toIndentedString(testResultsConfigurations)).append("\n");
    sb.append("    startedDate: ").append(toIndentedString(startedDate)).append("\n");
    sb.append("    completedDate: ").append(toIndentedString(completedDate)).append("\n");
    sb.append("    modifiedById: ").append(toIndentedString(modifiedById)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

