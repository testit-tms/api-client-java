/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import ru.testit.client.invoker.JSON;


/**
 * TestRunStatisticsStatusesGetModel
 */
@JsonPropertyOrder({
  TestRunStatisticsStatusesGetModel.JSON_PROPERTY_IN_PROGRESS,
  TestRunStatisticsStatusesGetModel.JSON_PROPERTY_PASSED,
  TestRunStatisticsStatusesGetModel.JSON_PROPERTY_FAILED,
  TestRunStatisticsStatusesGetModel.JSON_PROPERTY_SKIPPED,
  TestRunStatisticsStatusesGetModel.JSON_PROPERTY_BLOCKED
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TestRunStatisticsStatusesGetModel {
  public static final String JSON_PROPERTY_IN_PROGRESS = "inProgress";
  private Integer inProgress;

  public static final String JSON_PROPERTY_PASSED = "passed";
  private Integer passed;

  public static final String JSON_PROPERTY_FAILED = "failed";
  private Integer failed;

  public static final String JSON_PROPERTY_SKIPPED = "skipped";
  private Integer skipped;

  public static final String JSON_PROPERTY_BLOCKED = "blocked";
  private Integer blocked;

  public TestRunStatisticsStatusesGetModel() { 
  }

  public TestRunStatisticsStatusesGetModel inProgress(Integer inProgress) {
    this.inProgress = inProgress;
    return this;
  }

   /**
   * Get inProgress
   * @return inProgress
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_IN_PROGRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getInProgress() {
    return inProgress;
  }


  @JsonProperty(JSON_PROPERTY_IN_PROGRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInProgress(Integer inProgress) {
    this.inProgress = inProgress;
  }


  public TestRunStatisticsStatusesGetModel passed(Integer passed) {
    this.passed = passed;
    return this;
  }

   /**
   * Get passed
   * @return passed
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PASSED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPassed() {
    return passed;
  }


  @JsonProperty(JSON_PROPERTY_PASSED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPassed(Integer passed) {
    this.passed = passed;
  }


  public TestRunStatisticsStatusesGetModel failed(Integer failed) {
    this.failed = failed;
    return this;
  }

   /**
   * Get failed
   * @return failed
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_FAILED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getFailed() {
    return failed;
  }


  @JsonProperty(JSON_PROPERTY_FAILED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFailed(Integer failed) {
    this.failed = failed;
  }


  public TestRunStatisticsStatusesGetModel skipped(Integer skipped) {
    this.skipped = skipped;
    return this;
  }

   /**
   * Get skipped
   * @return skipped
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SKIPPED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSkipped() {
    return skipped;
  }


  @JsonProperty(JSON_PROPERTY_SKIPPED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSkipped(Integer skipped) {
    this.skipped = skipped;
  }


  public TestRunStatisticsStatusesGetModel blocked(Integer blocked) {
    this.blocked = blocked;
    return this;
  }

   /**
   * Get blocked
   * @return blocked
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_BLOCKED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getBlocked() {
    return blocked;
  }


  @JsonProperty(JSON_PROPERTY_BLOCKED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBlocked(Integer blocked) {
    this.blocked = blocked;
  }


  /**
   * Return true if this TestRunStatisticsStatusesGetModel object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestRunStatisticsStatusesGetModel testRunStatisticsStatusesGetModel = (TestRunStatisticsStatusesGetModel) o;
    return Objects.equals(this.inProgress, testRunStatisticsStatusesGetModel.inProgress) &&
        Objects.equals(this.passed, testRunStatisticsStatusesGetModel.passed) &&
        Objects.equals(this.failed, testRunStatisticsStatusesGetModel.failed) &&
        Objects.equals(this.skipped, testRunStatisticsStatusesGetModel.skipped) &&
        Objects.equals(this.blocked, testRunStatisticsStatusesGetModel.blocked);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inProgress, passed, failed, skipped, blocked);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestRunStatisticsStatusesGetModel {\n");
    sb.append("    inProgress: ").append(toIndentedString(inProgress)).append("\n");
    sb.append("    passed: ").append(toIndentedString(passed)).append("\n");
    sb.append("    failed: ").append(toIndentedString(failed)).append("\n");
    sb.append("    skipped: ").append(toIndentedString(skipped)).append("\n");
    sb.append("    blocked: ").append(toIndentedString(blocked)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

