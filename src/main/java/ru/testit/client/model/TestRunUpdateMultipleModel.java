/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;
import ru.testit.client.model.TestRunSelectModel;
import ru.testit.client.model.UpdateAttachmentShortModel;
import ru.testit.client.model.UpdateLinkShortModel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import ru.testit.client.invoker.JSON;

/**
 * TestRunUpdateMultipleModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TestRunUpdateMultipleModel {
  public static final String SERIALIZED_NAME_SELECT_MODEL = "selectModel";
  @SerializedName(SERIALIZED_NAME_SELECT_MODEL)
  private TestRunSelectModel selectModel;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ATTACHMENT_UPDATE_SCHEME = "attachmentUpdateScheme";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT_UPDATE_SCHEME)
  private UpdateAttachmentShortModel attachmentUpdateScheme;

  public static final String SERIALIZED_NAME_LINK_UPDATE_SCHEME = "linkUpdateScheme";
  @SerializedName(SERIALIZED_NAME_LINK_UPDATE_SCHEME)
  private UpdateLinkShortModel linkUpdateScheme;

  public TestRunUpdateMultipleModel() {
  }

  public TestRunUpdateMultipleModel selectModel(TestRunSelectModel selectModel) {
    this.selectModel = selectModel;
    return this;
  }

   /**
   * Get selectModel
   * @return selectModel
  **/
  @javax.annotation.Nonnull
  public TestRunSelectModel getSelectModel() {
    return selectModel;
  }

  public void setSelectModel(TestRunSelectModel selectModel) {
    this.selectModel = selectModel;
  }


  public TestRunUpdateMultipleModel description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public TestRunUpdateMultipleModel attachmentUpdateScheme(UpdateAttachmentShortModel attachmentUpdateScheme) {
    this.attachmentUpdateScheme = attachmentUpdateScheme;
    return this;
  }

   /**
   * Get attachmentUpdateScheme
   * @return attachmentUpdateScheme
  **/
  @javax.annotation.Nonnull
  public UpdateAttachmentShortModel getAttachmentUpdateScheme() {
    return attachmentUpdateScheme;
  }

  public void setAttachmentUpdateScheme(UpdateAttachmentShortModel attachmentUpdateScheme) {
    this.attachmentUpdateScheme = attachmentUpdateScheme;
  }


  public TestRunUpdateMultipleModel linkUpdateScheme(UpdateLinkShortModel linkUpdateScheme) {
    this.linkUpdateScheme = linkUpdateScheme;
    return this;
  }

   /**
   * Get linkUpdateScheme
   * @return linkUpdateScheme
  **/
  @javax.annotation.Nonnull
  public UpdateLinkShortModel getLinkUpdateScheme() {
    return linkUpdateScheme;
  }

  public void setLinkUpdateScheme(UpdateLinkShortModel linkUpdateScheme) {
    this.linkUpdateScheme = linkUpdateScheme;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestRunUpdateMultipleModel testRunUpdateMultipleModel = (TestRunUpdateMultipleModel) o;
    return Objects.equals(this.selectModel, testRunUpdateMultipleModel.selectModel) &&
        Objects.equals(this.description, testRunUpdateMultipleModel.description) &&
        Objects.equals(this.attachmentUpdateScheme, testRunUpdateMultipleModel.attachmentUpdateScheme) &&
        Objects.equals(this.linkUpdateScheme, testRunUpdateMultipleModel.linkUpdateScheme);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(selectModel, description, attachmentUpdateScheme, linkUpdateScheme);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestRunUpdateMultipleModel {\n");
    sb.append("    selectModel: ").append(toIndentedString(selectModel)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    attachmentUpdateScheme: ").append(toIndentedString(attachmentUpdateScheme)).append("\n");
    sb.append("    linkUpdateScheme: ").append(toIndentedString(linkUpdateScheme)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("selectModel");
    openapiFields.add("description");
    openapiFields.add("attachmentUpdateScheme");
    openapiFields.add("linkUpdateScheme");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("selectModel");
    openapiRequiredFields.add("attachmentUpdateScheme");
    openapiRequiredFields.add("linkUpdateScheme");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TestRunUpdateMultipleModel
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestRunUpdateMultipleModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestRunUpdateMultipleModel is not found in the empty JSON string", TestRunUpdateMultipleModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestRunUpdateMultipleModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestRunUpdateMultipleModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TestRunUpdateMultipleModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `selectModel`
      TestRunSelectModel.validateJsonElement(jsonObj.get("selectModel"));
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the required field `attachmentUpdateScheme`
      UpdateAttachmentShortModel.validateJsonElement(jsonObj.get("attachmentUpdateScheme"));
      // validate the required field `linkUpdateScheme`
      UpdateLinkShortModel.validateJsonElement(jsonObj.get("linkUpdateScheme"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestRunUpdateMultipleModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestRunUpdateMultipleModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestRunUpdateMultipleModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestRunUpdateMultipleModel.class));

       return (TypeAdapter<T>) new TypeAdapter<TestRunUpdateMultipleModel>() {
           @Override
           public void write(JsonWriter out, TestRunUpdateMultipleModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestRunUpdateMultipleModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TestRunUpdateMultipleModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TestRunUpdateMultipleModel
  * @throws IOException if the JSON string is invalid with respect to TestRunUpdateMultipleModel
  */
  public static TestRunUpdateMultipleModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestRunUpdateMultipleModel.class);
  }

 /**
  * Convert an instance of TestRunUpdateMultipleModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

