/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import ru.testit.client.model.AttachmentApiResult;
import ru.testit.client.model.LinkApiResult;
import ru.testit.client.model.NamedEntityApiModel;
import ru.testit.client.model.TestResultV2GetModel;
import ru.testit.client.model.TestRunState;
import ru.testit.client.model.TestStatusApiResult;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import ru.testit.client.invoker.JSON;

/**
 * TestRunV2ApiResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class TestRunV2ApiResult {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private UUID id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_LAUNCH_SOURCE = "launchSource";
  @SerializedName(SERIALIZED_NAME_LAUNCH_SOURCE)
  @javax.annotation.Nullable
  private String launchSource;

  public static final String SERIALIZED_NAME_STARTED_ON = "startedOn";
  @SerializedName(SERIALIZED_NAME_STARTED_ON)
  @javax.annotation.Nullable
  private OffsetDateTime startedOn;

  public static final String SERIALIZED_NAME_COMPLETED_ON = "completedOn";
  @SerializedName(SERIALIZED_NAME_COMPLETED_ON)
  @javax.annotation.Nullable
  private OffsetDateTime completedOn;

  public static final String SERIALIZED_NAME_STATE_NAME = "stateName";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_STATE_NAME)
  @javax.annotation.Nonnull
  private TestRunState stateName;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private TestStatusApiResult status;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  @javax.annotation.Nonnull
  private UUID projectId;

  public static final String SERIALIZED_NAME_TEST_PLAN_ID = "testPlanId";
  @SerializedName(SERIALIZED_NAME_TEST_PLAN_ID)
  @javax.annotation.Nullable
  private UUID testPlanId;

  public static final String SERIALIZED_NAME_TEST_RESULTS = "testResults";
  @SerializedName(SERIALIZED_NAME_TEST_RESULTS)
  @javax.annotation.Nullable
  private List<TestResultV2GetModel> testResults;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  @javax.annotation.Nonnull
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_MODIFIED_DATE = "modifiedDate";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime modifiedDate;

  public static final String SERIALIZED_NAME_CREATED_BY_ID = "createdById";
  @SerializedName(SERIALIZED_NAME_CREATED_BY_ID)
  @javax.annotation.Nonnull
  private UUID createdById;

  public static final String SERIALIZED_NAME_MODIFIED_BY_ID = "modifiedById";
  @SerializedName(SERIALIZED_NAME_MODIFIED_BY_ID)
  @javax.annotation.Nullable
  private UUID modifiedById;

  public static final String SERIALIZED_NAME_CREATED_BY_USER_NAME = "createdByUserName";
  @SerializedName(SERIALIZED_NAME_CREATED_BY_USER_NAME)
  @javax.annotation.Nullable
  private String createdByUserName;

  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  @javax.annotation.Nonnull
  private List<AttachmentApiResult> attachments = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  @javax.annotation.Nonnull
  private List<LinkApiResult> links = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOM_PARAMETERS = "customParameters";
  @SerializedName(SERIALIZED_NAME_CUSTOM_PARAMETERS)
  @javax.annotation.Nullable
  private Map<String, String> customParameters;

  public static final String SERIALIZED_NAME_WEBHOOKS = "webhooks";
  @SerializedName(SERIALIZED_NAME_WEBHOOKS)
  @javax.annotation.Nonnull
  private List<NamedEntityApiModel> webhooks = new ArrayList<>();

  public static final String SERIALIZED_NAME_RUN_COUNT = "runCount";
  @SerializedName(SERIALIZED_NAME_RUN_COUNT)
  @javax.annotation.Nonnull
  private Integer runCount;

  public TestRunV2ApiResult() {
  }

  public TestRunV2ApiResult id(@javax.annotation.Nonnull UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Test run unique identifier
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull UUID id) {
    this.id = id;
  }


  public TestRunV2ApiResult name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Test run name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public TestRunV2ApiResult description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Test run description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public TestRunV2ApiResult launchSource(@javax.annotation.Nullable String launchSource) {
    this.launchSource = launchSource;
    return this;
  }

  /**
   * Test run launch source                Once launch source is specified it cannot be updated.
   * @return launchSource
   */
  @javax.annotation.Nullable
  public String getLaunchSource() {
    return launchSource;
  }

  public void setLaunchSource(@javax.annotation.Nullable String launchSource) {
    this.launchSource = launchSource;
  }


  public TestRunV2ApiResult startedOn(@javax.annotation.Nullable OffsetDateTime startedOn) {
    this.startedOn = startedOn;
    return this;
  }

  /**
   * Date and time of test run start
   * @return startedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartedOn() {
    return startedOn;
  }

  public void setStartedOn(@javax.annotation.Nullable OffsetDateTime startedOn) {
    this.startedOn = startedOn;
  }


  public TestRunV2ApiResult completedOn(@javax.annotation.Nullable OffsetDateTime completedOn) {
    this.completedOn = completedOn;
    return this;
  }

  /**
   * Date and time of test run end
   * @return completedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCompletedOn() {
    return completedOn;
  }

  public void setCompletedOn(@javax.annotation.Nullable OffsetDateTime completedOn) {
    this.completedOn = completedOn;
  }


  @Deprecated
  public TestRunV2ApiResult stateName(@javax.annotation.Nonnull TestRunState stateName) {
    this.stateName = stateName;
    return this;
  }

  /**
   * Test run state
   * @return stateName
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nonnull
  public TestRunState getStateName() {
    return stateName;
  }

  @Deprecated
  public void setStateName(@javax.annotation.Nonnull TestRunState stateName) {
    this.stateName = stateName;
  }


  public TestRunV2ApiResult status(@javax.annotation.Nonnull TestStatusApiResult status) {
    this.status = status;
    return this;
  }

  /**
   * Test run status
   * @return status
   */
  @javax.annotation.Nonnull
  public TestStatusApiResult getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull TestStatusApiResult status) {
    this.status = status;
  }


  public TestRunV2ApiResult projectId(@javax.annotation.Nonnull UUID projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Project unique identifier                This property is used to link test run with project.
   * @return projectId
   */
  @javax.annotation.Nonnull
  public UUID getProjectId() {
    return projectId;
  }

  public void setProjectId(@javax.annotation.Nonnull UUID projectId) {
    this.projectId = projectId;
  }


  public TestRunV2ApiResult testPlanId(@javax.annotation.Nullable UUID testPlanId) {
    this.testPlanId = testPlanId;
    return this;
  }

  /**
   * Test plan unique identifier                This property is used to link test run with test plan.
   * @return testPlanId
   */
  @javax.annotation.Nullable
  public UUID getTestPlanId() {
    return testPlanId;
  }

  public void setTestPlanId(@javax.annotation.Nullable UUID testPlanId) {
    this.testPlanId = testPlanId;
  }


  public TestRunV2ApiResult testResults(@javax.annotation.Nullable List<TestResultV2GetModel> testResults) {
    this.testResults = testResults;
    return this;
  }

  public TestRunV2ApiResult addTestResultsItem(TestResultV2GetModel testResultsItem) {
    if (this.testResults == null) {
      this.testResults = new ArrayList<>();
    }
    this.testResults.add(testResultsItem);
    return this;
  }

  /**
   * Enumeration of test results related to test run
   * @return testResults
   */
  @javax.annotation.Nullable
  public List<TestResultV2GetModel> getTestResults() {
    return testResults;
  }

  public void setTestResults(@javax.annotation.Nullable List<TestResultV2GetModel> testResults) {
    this.testResults = testResults;
  }


  public TestRunV2ApiResult createdDate(@javax.annotation.Nonnull OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Date and time of test run creation
   * @return createdDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(@javax.annotation.Nonnull OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public TestRunV2ApiResult modifiedDate(@javax.annotation.Nullable OffsetDateTime modifiedDate) {
    this.modifiedDate = modifiedDate;
    return this;
  }

  /**
   * Date and time of last test run  modification
   * @return modifiedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedDate() {
    return modifiedDate;
  }

  public void setModifiedDate(@javax.annotation.Nullable OffsetDateTime modifiedDate) {
    this.modifiedDate = modifiedDate;
  }


  public TestRunV2ApiResult createdById(@javax.annotation.Nonnull UUID createdById) {
    this.createdById = createdById;
    return this;
  }

  /**
   * Unique identifier of user who created test run
   * @return createdById
   */
  @javax.annotation.Nonnull
  public UUID getCreatedById() {
    return createdById;
  }

  public void setCreatedById(@javax.annotation.Nonnull UUID createdById) {
    this.createdById = createdById;
  }


  public TestRunV2ApiResult modifiedById(@javax.annotation.Nullable UUID modifiedById) {
    this.modifiedById = modifiedById;
    return this;
  }

  /**
   * Unique identifier of user who applied last test run  modification
   * @return modifiedById
   */
  @javax.annotation.Nullable
  public UUID getModifiedById() {
    return modifiedById;
  }

  public void setModifiedById(@javax.annotation.Nullable UUID modifiedById) {
    this.modifiedById = modifiedById;
  }


  public TestRunV2ApiResult createdByUserName(@javax.annotation.Nullable String createdByUserName) {
    this.createdByUserName = createdByUserName;
    return this;
  }

  /**
   * Username of user who created test run
   * @return createdByUserName
   */
  @javax.annotation.Nullable
  public String getCreatedByUserName() {
    return createdByUserName;
  }

  public void setCreatedByUserName(@javax.annotation.Nullable String createdByUserName) {
    this.createdByUserName = createdByUserName;
  }


  public TestRunV2ApiResult attachments(@javax.annotation.Nonnull List<AttachmentApiResult> attachments) {
    this.attachments = attachments;
    return this;
  }

  public TestRunV2ApiResult addAttachmentsItem(AttachmentApiResult attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * Collection of attachments related to the test run
   * @return attachments
   */
  @javax.annotation.Nonnull
  public List<AttachmentApiResult> getAttachments() {
    return attachments;
  }

  public void setAttachments(@javax.annotation.Nonnull List<AttachmentApiResult> attachments) {
    this.attachments = attachments;
  }


  public TestRunV2ApiResult links(@javax.annotation.Nonnull List<LinkApiResult> links) {
    this.links = links;
    return this;
  }

  public TestRunV2ApiResult addLinksItem(LinkApiResult linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

  /**
   * Collection of links related to the test run
   * @return links
   */
  @javax.annotation.Nonnull
  public List<LinkApiResult> getLinks() {
    return links;
  }

  public void setLinks(@javax.annotation.Nonnull List<LinkApiResult> links) {
    this.links = links;
  }


  public TestRunV2ApiResult customParameters(@javax.annotation.Nullable Map<String, String> customParameters) {
    this.customParameters = customParameters;
    return this;
  }

  public TestRunV2ApiResult putCustomParametersItem(String key, String customParametersItem) {
    if (this.customParameters == null) {
      this.customParameters = new HashMap<>();
    }
    this.customParameters.put(key, customParametersItem);
    return this;
  }

  /**
   * Customers test run parameters
   * @return customParameters
   */
  @javax.annotation.Nullable
  public Map<String, String> getCustomParameters() {
    return customParameters;
  }

  public void setCustomParameters(@javax.annotation.Nullable Map<String, String> customParameters) {
    this.customParameters = customParameters;
  }


  public TestRunV2ApiResult webhooks(@javax.annotation.Nonnull List<NamedEntityApiModel> webhooks) {
    this.webhooks = webhooks;
    return this;
  }

  public TestRunV2ApiResult addWebhooksItem(NamedEntityApiModel webhooksItem) {
    if (this.webhooks == null) {
      this.webhooks = new ArrayList<>();
    }
    this.webhooks.add(webhooksItem);
    return this;
  }

  /**
   * Enabled webhooks
   * @return webhooks
   */
  @javax.annotation.Nonnull
  public List<NamedEntityApiModel> getWebhooks() {
    return webhooks;
  }

  public void setWebhooks(@javax.annotation.Nonnull List<NamedEntityApiModel> webhooks) {
    this.webhooks = webhooks;
  }


  public TestRunV2ApiResult runCount(@javax.annotation.Nonnull Integer runCount) {
    this.runCount = runCount;
    return this;
  }

  /**
   * Run count
   * @return runCount
   */
  @javax.annotation.Nonnull
  public Integer getRunCount() {
    return runCount;
  }

  public void setRunCount(@javax.annotation.Nonnull Integer runCount) {
    this.runCount = runCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestRunV2ApiResult testRunV2ApiResult = (TestRunV2ApiResult) o;
    return Objects.equals(this.id, testRunV2ApiResult.id) &&
        Objects.equals(this.name, testRunV2ApiResult.name) &&
        Objects.equals(this.description, testRunV2ApiResult.description) &&
        Objects.equals(this.launchSource, testRunV2ApiResult.launchSource) &&
        Objects.equals(this.startedOn, testRunV2ApiResult.startedOn) &&
        Objects.equals(this.completedOn, testRunV2ApiResult.completedOn) &&
        Objects.equals(this.stateName, testRunV2ApiResult.stateName) &&
        Objects.equals(this.status, testRunV2ApiResult.status) &&
        Objects.equals(this.projectId, testRunV2ApiResult.projectId) &&
        Objects.equals(this.testPlanId, testRunV2ApiResult.testPlanId) &&
        Objects.equals(this.testResults, testRunV2ApiResult.testResults) &&
        Objects.equals(this.createdDate, testRunV2ApiResult.createdDate) &&
        Objects.equals(this.modifiedDate, testRunV2ApiResult.modifiedDate) &&
        Objects.equals(this.createdById, testRunV2ApiResult.createdById) &&
        Objects.equals(this.modifiedById, testRunV2ApiResult.modifiedById) &&
        Objects.equals(this.createdByUserName, testRunV2ApiResult.createdByUserName) &&
        Objects.equals(this.attachments, testRunV2ApiResult.attachments) &&
        Objects.equals(this.links, testRunV2ApiResult.links) &&
        Objects.equals(this.customParameters, testRunV2ApiResult.customParameters) &&
        Objects.equals(this.webhooks, testRunV2ApiResult.webhooks) &&
        Objects.equals(this.runCount, testRunV2ApiResult.runCount);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, description, launchSource, startedOn, completedOn, stateName, status, projectId, testPlanId, testResults, createdDate, modifiedDate, createdById, modifiedById, createdByUserName, attachments, links, customParameters, webhooks, runCount);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestRunV2ApiResult {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    launchSource: ").append(toIndentedString(launchSource)).append("\n");
    sb.append("    startedOn: ").append(toIndentedString(startedOn)).append("\n");
    sb.append("    completedOn: ").append(toIndentedString(completedOn)).append("\n");
    sb.append("    stateName: ").append(toIndentedString(stateName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    testPlanId: ").append(toIndentedString(testPlanId)).append("\n");
    sb.append("    testResults: ").append(toIndentedString(testResults)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("    createdById: ").append(toIndentedString(createdById)).append("\n");
    sb.append("    modifiedById: ").append(toIndentedString(modifiedById)).append("\n");
    sb.append("    createdByUserName: ").append(toIndentedString(createdByUserName)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    customParameters: ").append(toIndentedString(customParameters)).append("\n");
    sb.append("    webhooks: ").append(toIndentedString(webhooks)).append("\n");
    sb.append("    runCount: ").append(toIndentedString(runCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("launchSource");
    openapiFields.add("startedOn");
    openapiFields.add("completedOn");
    openapiFields.add("stateName");
    openapiFields.add("status");
    openapiFields.add("projectId");
    openapiFields.add("testPlanId");
    openapiFields.add("testResults");
    openapiFields.add("createdDate");
    openapiFields.add("modifiedDate");
    openapiFields.add("createdById");
    openapiFields.add("modifiedById");
    openapiFields.add("createdByUserName");
    openapiFields.add("attachments");
    openapiFields.add("links");
    openapiFields.add("customParameters");
    openapiFields.add("webhooks");
    openapiFields.add("runCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("stateName");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("projectId");
    openapiRequiredFields.add("createdDate");
    openapiRequiredFields.add("createdById");
    openapiRequiredFields.add("attachments");
    openapiRequiredFields.add("links");
    openapiRequiredFields.add("webhooks");
    openapiRequiredFields.add("runCount");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestRunV2ApiResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestRunV2ApiResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestRunV2ApiResult is not found in the empty JSON string", TestRunV2ApiResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestRunV2ApiResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestRunV2ApiResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TestRunV2ApiResult.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("launchSource") != null && !jsonObj.get("launchSource").isJsonNull()) && !jsonObj.get("launchSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `launchSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("launchSource").toString()));
      }
      // validate the required field `stateName`
      TestRunState.validateJsonElement(jsonObj.get("stateName"));
      // validate the required field `status`
      TestStatusApiResult.validateJsonElement(jsonObj.get("status"));
      if (!jsonObj.get("projectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectId").toString()));
      }
      if ((jsonObj.get("testPlanId") != null && !jsonObj.get("testPlanId").isJsonNull()) && !jsonObj.get("testPlanId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testPlanId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testPlanId").toString()));
      }
      if (jsonObj.get("testResults") != null && !jsonObj.get("testResults").isJsonNull()) {
        JsonArray jsonArraytestResults = jsonObj.getAsJsonArray("testResults");
        if (jsonArraytestResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("testResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `testResults` to be an array in the JSON string but got `%s`", jsonObj.get("testResults").toString()));
          }

          // validate the optional field `testResults` (array)
          for (int i = 0; i < jsonArraytestResults.size(); i++) {
            TestResultV2GetModel.validateJsonElement(jsonArraytestResults.get(i));
          };
        }
      }
      if (!jsonObj.get("createdById").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdById` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdById").toString()));
      }
      if ((jsonObj.get("modifiedById") != null && !jsonObj.get("modifiedById").isJsonNull()) && !jsonObj.get("modifiedById").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedById` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modifiedById").toString()));
      }
      if ((jsonObj.get("createdByUserName") != null && !jsonObj.get("createdByUserName").isJsonNull()) && !jsonObj.get("createdByUserName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdByUserName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdByUserName").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("attachments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
      }

      JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("attachments");
      // validate the required field `attachments` (array)
      for (int i = 0; i < jsonArrayattachments.size(); i++) {
        AttachmentApiResult.validateJsonElement(jsonArrayattachments.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("links").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
      }

      JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
      // validate the required field `links` (array)
      for (int i = 0; i < jsonArraylinks.size(); i++) {
        LinkApiResult.validateJsonElement(jsonArraylinks.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("webhooks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhooks` to be an array in the JSON string but got `%s`", jsonObj.get("webhooks").toString()));
      }

      JsonArray jsonArraywebhooks = jsonObj.getAsJsonArray("webhooks");
      // validate the required field `webhooks` (array)
      for (int i = 0; i < jsonArraywebhooks.size(); i++) {
        NamedEntityApiModel.validateJsonElement(jsonArraywebhooks.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestRunV2ApiResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestRunV2ApiResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestRunV2ApiResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestRunV2ApiResult.class));

       return (TypeAdapter<T>) new TypeAdapter<TestRunV2ApiResult>() {
           @Override
           public void write(JsonWriter out, TestRunV2ApiResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestRunV2ApiResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestRunV2ApiResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestRunV2ApiResult
   * @throws IOException if the JSON string is invalid with respect to TestRunV2ApiResult
   */
  public static TestRunV2ApiResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestRunV2ApiResult.class);
  }

  /**
   * Convert an instance of TestRunV2ApiResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

