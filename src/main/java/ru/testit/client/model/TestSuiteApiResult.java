/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import ru.testit.client.model.TestSuiteTypeApiResult;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import ru.testit.client.invoker.JSON;


/**
 * TestSuiteApiResult
 */
@JsonPropertyOrder({
  TestSuiteApiResult.JSON_PROPERTY_ID,
  TestSuiteApiResult.JSON_PROPERTY_NAME,
  TestSuiteApiResult.JSON_PROPERTY_TYPE,
  TestSuiteApiResult.JSON_PROPERTY_SAVE_STRUCTURE,
  TestSuiteApiResult.JSON_PROPERTY_AUTO_REFRESH,
  TestSuiteApiResult.JSON_PROPERTY_REFRESH_DATE,
  TestSuiteApiResult.JSON_PROPERTY_PARENT_ID,
  TestSuiteApiResult.JSON_PROPERTY_TEST_PLAN_ID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0")
public class TestSuiteApiResult {
  public static final String JSON_PROPERTY_ID = "id";
  private UUID id;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_TYPE = "type";
  private TestSuiteTypeApiResult type;

  public static final String JSON_PROPERTY_SAVE_STRUCTURE = "saveStructure";
  private Boolean saveStructure;

  public static final String JSON_PROPERTY_AUTO_REFRESH = "autoRefresh";
  private Boolean autoRefresh;

  public static final String JSON_PROPERTY_REFRESH_DATE = "refreshDate";
  private OffsetDateTime refreshDate;

  public static final String JSON_PROPERTY_PARENT_ID = "parentId";
  private UUID parentId;

  public static final String JSON_PROPERTY_TEST_PLAN_ID = "testPlanId";
  private UUID testPlanId;

  public TestSuiteApiResult() { 
  }

  public TestSuiteApiResult id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Unique ID of the test suite
   * @return id
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(UUID id) {
    this.id = id;
  }


  public TestSuiteApiResult name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the test suite
   * @return name
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public TestSuiteApiResult type(TestSuiteTypeApiResult type) {
    this.type = type;
    return this;
  }

  /**
   * Type of the test suite
   * @return type
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TestSuiteTypeApiResult getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TestSuiteTypeApiResult type) {
    this.type = type;
  }


  public TestSuiteApiResult saveStructure(Boolean saveStructure) {
    this.saveStructure = saveStructure;
    return this;
  }

  /**
   * Flag indicating whether the structure of the test suite should be saved
   * @return saveStructure
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SAVE_STRUCTURE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getSaveStructure() {
    return saveStructure;
  }


  @JsonProperty(JSON_PROPERTY_SAVE_STRUCTURE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSaveStructure(Boolean saveStructure) {
    this.saveStructure = saveStructure;
  }


  public TestSuiteApiResult autoRefresh(Boolean autoRefresh) {
    this.autoRefresh = autoRefresh;
    return this;
  }

  /**
   * Flag indicating whether auto-refresh functionality is enabled for the test suite
   * @return autoRefresh
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTO_REFRESH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getAutoRefresh() {
    return autoRefresh;
  }


  @JsonProperty(JSON_PROPERTY_AUTO_REFRESH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAutoRefresh(Boolean autoRefresh) {
    this.autoRefresh = autoRefresh;
  }


  public TestSuiteApiResult refreshDate(OffsetDateTime refreshDate) {
    this.refreshDate = refreshDate;
    return this;
  }

  /**
   * The last time the test suite&#39;s results were refreshed
   * @return refreshDate
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REFRESH_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getRefreshDate() {
    return refreshDate;
  }


  @JsonProperty(JSON_PROPERTY_REFRESH_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRefreshDate(OffsetDateTime refreshDate) {
    this.refreshDate = refreshDate;
  }


  public TestSuiteApiResult parentId(UUID parentId) {
    this.parentId = parentId;
    return this;
  }

  /**
   * Unique ID of the parent test suite, if any
   * @return parentId
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PARENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getParentId() {
    return parentId;
  }


  @JsonProperty(JSON_PROPERTY_PARENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setParentId(UUID parentId) {
    this.parentId = parentId;
  }


  public TestSuiteApiResult testPlanId(UUID testPlanId) {
    this.testPlanId = testPlanId;
    return this;
  }

  /**
   * Unique ID of the associated test plan
   * @return testPlanId
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TEST_PLAN_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getTestPlanId() {
    return testPlanId;
  }


  @JsonProperty(JSON_PROPERTY_TEST_PLAN_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTestPlanId(UUID testPlanId) {
    this.testPlanId = testPlanId;
  }


  /**
   * Return true if this TestSuiteApiResult object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestSuiteApiResult testSuiteApiResult = (TestSuiteApiResult) o;
    return Objects.equals(this.id, testSuiteApiResult.id) &&
        Objects.equals(this.name, testSuiteApiResult.name) &&
        Objects.equals(this.type, testSuiteApiResult.type) &&
        Objects.equals(this.saveStructure, testSuiteApiResult.saveStructure) &&
        Objects.equals(this.autoRefresh, testSuiteApiResult.autoRefresh) &&
        Objects.equals(this.refreshDate, testSuiteApiResult.refreshDate) &&
        Objects.equals(this.parentId, testSuiteApiResult.parentId) &&
        Objects.equals(this.testPlanId, testSuiteApiResult.testPlanId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, type, saveStructure, autoRefresh, refreshDate, parentId, testPlanId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestSuiteApiResult {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    saveStructure: ").append(toIndentedString(saveStructure)).append("\n");
    sb.append("    autoRefresh: ").append(toIndentedString(autoRefresh)).append("\n");
    sb.append("    refreshDate: ").append(toIndentedString(refreshDate)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    testPlanId: ").append(toIndentedString(testPlanId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

