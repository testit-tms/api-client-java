/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import ru.testit.client.model.TestSuiteType;
import ru.testit.client.model.WorkItemSelectModel;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import ru.testit.client.invoker.JSON;


/**
 * TestSuiteTestPlanApiModel
 */
@JsonPropertyOrder({
  TestSuiteTestPlanApiModel.JSON_PROPERTY_NAME,
  TestSuiteTestPlanApiModel.JSON_PROPERTY_WORK_ITEMS_SELECTOR,
  TestSuiteTestPlanApiModel.JSON_PROPERTY_CONFIGURATION_IDS,
  TestSuiteTestPlanApiModel.JSON_PROPERTY_TYPE,
  TestSuiteTestPlanApiModel.JSON_PROPERTY_SAVE_STRUCTURE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0")
public class TestSuiteTestPlanApiModel {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_WORK_ITEMS_SELECTOR = "workItemsSelector";
  private WorkItemSelectModel workItemsSelector;

  public static final String JSON_PROPERTY_CONFIGURATION_IDS = "configurationIds";
  private JsonNullable<List<UUID>> configurationIds = JsonNullable.<List<UUID>>undefined();

  public static final String JSON_PROPERTY_TYPE = "type";
  private JsonNullable<TestSuiteType> type = JsonNullable.<TestSuiteType>undefined();

  public static final String JSON_PROPERTY_SAVE_STRUCTURE = "saveStructure";
  private JsonNullable<Boolean> saveStructure = JsonNullable.<Boolean>undefined();

  public TestSuiteTestPlanApiModel() { 
  }

  public TestSuiteTestPlanApiModel name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Test suite nane
   * @return name
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public TestSuiteTestPlanApiModel workItemsSelector(WorkItemSelectModel workItemsSelector) {
    this.workItemsSelector = workItemsSelector;
    return this;
  }

  /**
   * Model containing options to filter work items
   * @return workItemsSelector
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_WORK_ITEMS_SELECTOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public WorkItemSelectModel getWorkItemsSelector() {
    return workItemsSelector;
  }


  @JsonProperty(JSON_PROPERTY_WORK_ITEMS_SELECTOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setWorkItemsSelector(WorkItemSelectModel workItemsSelector) {
    this.workItemsSelector = workItemsSelector;
  }


  public TestSuiteTestPlanApiModel configurationIds(List<UUID> configurationIds) {
    this.configurationIds = JsonNullable.<List<UUID>>of(configurationIds);
    return this;
  }

  public TestSuiteTestPlanApiModel addConfigurationIdsItem(UUID configurationIdsItem) {
    if (this.configurationIds == null || !this.configurationIds.isPresent()) {
      this.configurationIds = JsonNullable.<List<UUID>>of(new ArrayList<>());
    }
    try {
      this.configurationIds.get().add(configurationIdsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Configuration identifiers. Empty configurations means using default configurations
   * @return configurationIds
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<UUID> getConfigurationIds() {
        return configurationIds.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CONFIGURATION_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<UUID>> getConfigurationIds_JsonNullable() {
    return configurationIds;
  }
  
  @JsonProperty(JSON_PROPERTY_CONFIGURATION_IDS)
  public void setConfigurationIds_JsonNullable(JsonNullable<List<UUID>> configurationIds) {
    this.configurationIds = configurationIds;
  }

  public void setConfigurationIds(List<UUID> configurationIds) {
    this.configurationIds = JsonNullable.<List<UUID>>of(configurationIds);
  }


  public TestSuiteTestPlanApiModel type(TestSuiteType type) {
    this.type = JsonNullable.<TestSuiteType>of(type);
    return this;
  }

  /**
   * Type of the test suite
   * @return type
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public TestSuiteType getType() {
        return type.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<TestSuiteType> getType_JsonNullable() {
    return type;
  }
  
  @JsonProperty(JSON_PROPERTY_TYPE)
  public void setType_JsonNullable(JsonNullable<TestSuiteType> type) {
    this.type = type;
  }

  public void setType(TestSuiteType type) {
    this.type = JsonNullable.<TestSuiteType>of(type);
  }


  public TestSuiteTestPlanApiModel saveStructure(Boolean saveStructure) {
    this.saveStructure = JsonNullable.<Boolean>of(saveStructure);
    return this;
  }

  /**
   * Indicates if the test suite retains section tree structure
   * @return saveStructure
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Boolean getSaveStructure() {
        return saveStructure.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SAVE_STRUCTURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getSaveStructure_JsonNullable() {
    return saveStructure;
  }
  
  @JsonProperty(JSON_PROPERTY_SAVE_STRUCTURE)
  public void setSaveStructure_JsonNullable(JsonNullable<Boolean> saveStructure) {
    this.saveStructure = saveStructure;
  }

  public void setSaveStructure(Boolean saveStructure) {
    this.saveStructure = JsonNullable.<Boolean>of(saveStructure);
  }


  /**
   * Return true if this TestSuiteTestPlanApiModel object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestSuiteTestPlanApiModel testSuiteTestPlanApiModel = (TestSuiteTestPlanApiModel) o;
    return Objects.equals(this.name, testSuiteTestPlanApiModel.name) &&
        Objects.equals(this.workItemsSelector, testSuiteTestPlanApiModel.workItemsSelector) &&
        equalsNullable(this.configurationIds, testSuiteTestPlanApiModel.configurationIds) &&
        equalsNullable(this.type, testSuiteTestPlanApiModel.type) &&
        equalsNullable(this.saveStructure, testSuiteTestPlanApiModel.saveStructure);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, workItemsSelector, hashCodeNullable(configurationIds), hashCodeNullable(type), hashCodeNullable(saveStructure));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestSuiteTestPlanApiModel {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    workItemsSelector: ").append(toIndentedString(workItemsSelector)).append("\n");
    sb.append("    configurationIds: ").append(toIndentedString(configurationIds)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    saveStructure: ").append(toIndentedString(saveStructure)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

