/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import ru.testit.client.invoker.JSON;

/**
 * UserWithRankModelUserRank
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class UserWithRankModelUserRank {
  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Integer score;

  public static final String SERIALIZED_NAME_WORK_ITEMS_CREATED = "workItemsCreated";
  @SerializedName(SERIALIZED_NAME_WORK_ITEMS_CREATED)
  private Integer workItemsCreated;

  public static final String SERIALIZED_NAME_PASSED_TEST_POINTS = "passedTestPoints";
  @SerializedName(SERIALIZED_NAME_PASSED_TEST_POINTS)
  private Integer passedTestPoints;

  public static final String SERIALIZED_NAME_FAILED_TEST_POINTS = "failedTestPoints";
  @SerializedName(SERIALIZED_NAME_FAILED_TEST_POINTS)
  private Integer failedTestPoints;

  public static final String SERIALIZED_NAME_SKIPPED_TEST_POINTS = "skippedTestPoints";
  @SerializedName(SERIALIZED_NAME_SKIPPED_TEST_POINTS)
  private Integer skippedTestPoints;

  public static final String SERIALIZED_NAME_BLOCKED_TEST_POINTS = "blockedTestPoints";
  @SerializedName(SERIALIZED_NAME_BLOCKED_TEST_POINTS)
  private Integer blockedTestPoints;

  public static final String SERIALIZED_NAME_LEVEL_AVATAR_ENABLED = "levelAvatarEnabled";
  @SerializedName(SERIALIZED_NAME_LEVEL_AVATAR_ENABLED)
  private Boolean levelAvatarEnabled;

  public UserWithRankModelUserRank() {
  }

  public UserWithRankModelUserRank score(Integer score) {
    
    this.score = score;
    return this;
  }

   /**
   * Get score
   * @return score
  **/
  @javax.annotation.Nonnull
  public Integer getScore() {
    return score;
  }


  public void setScore(Integer score) {
    this.score = score;
  }


  public UserWithRankModelUserRank workItemsCreated(Integer workItemsCreated) {
    
    this.workItemsCreated = workItemsCreated;
    return this;
  }

   /**
   * Get workItemsCreated
   * @return workItemsCreated
  **/
  @javax.annotation.Nonnull
  public Integer getWorkItemsCreated() {
    return workItemsCreated;
  }


  public void setWorkItemsCreated(Integer workItemsCreated) {
    this.workItemsCreated = workItemsCreated;
  }


  public UserWithRankModelUserRank passedTestPoints(Integer passedTestPoints) {
    
    this.passedTestPoints = passedTestPoints;
    return this;
  }

   /**
   * Get passedTestPoints
   * @return passedTestPoints
  **/
  @javax.annotation.Nonnull
  public Integer getPassedTestPoints() {
    return passedTestPoints;
  }


  public void setPassedTestPoints(Integer passedTestPoints) {
    this.passedTestPoints = passedTestPoints;
  }


  public UserWithRankModelUserRank failedTestPoints(Integer failedTestPoints) {
    
    this.failedTestPoints = failedTestPoints;
    return this;
  }

   /**
   * Get failedTestPoints
   * @return failedTestPoints
  **/
  @javax.annotation.Nonnull
  public Integer getFailedTestPoints() {
    return failedTestPoints;
  }


  public void setFailedTestPoints(Integer failedTestPoints) {
    this.failedTestPoints = failedTestPoints;
  }


  public UserWithRankModelUserRank skippedTestPoints(Integer skippedTestPoints) {
    
    this.skippedTestPoints = skippedTestPoints;
    return this;
  }

   /**
   * Get skippedTestPoints
   * @return skippedTestPoints
  **/
  @javax.annotation.Nonnull
  public Integer getSkippedTestPoints() {
    return skippedTestPoints;
  }


  public void setSkippedTestPoints(Integer skippedTestPoints) {
    this.skippedTestPoints = skippedTestPoints;
  }


  public UserWithRankModelUserRank blockedTestPoints(Integer blockedTestPoints) {
    
    this.blockedTestPoints = blockedTestPoints;
    return this;
  }

   /**
   * Get blockedTestPoints
   * @return blockedTestPoints
  **/
  @javax.annotation.Nonnull
  public Integer getBlockedTestPoints() {
    return blockedTestPoints;
  }


  public void setBlockedTestPoints(Integer blockedTestPoints) {
    this.blockedTestPoints = blockedTestPoints;
  }


  public UserWithRankModelUserRank levelAvatarEnabled(Boolean levelAvatarEnabled) {
    
    this.levelAvatarEnabled = levelAvatarEnabled;
    return this;
  }

   /**
   * Get levelAvatarEnabled
   * @return levelAvatarEnabled
  **/
  @javax.annotation.Nonnull
  public Boolean getLevelAvatarEnabled() {
    return levelAvatarEnabled;
  }


  public void setLevelAvatarEnabled(Boolean levelAvatarEnabled) {
    this.levelAvatarEnabled = levelAvatarEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserWithRankModelUserRank userWithRankModelUserRank = (UserWithRankModelUserRank) o;
    return Objects.equals(this.score, userWithRankModelUserRank.score) &&
        Objects.equals(this.workItemsCreated, userWithRankModelUserRank.workItemsCreated) &&
        Objects.equals(this.passedTestPoints, userWithRankModelUserRank.passedTestPoints) &&
        Objects.equals(this.failedTestPoints, userWithRankModelUserRank.failedTestPoints) &&
        Objects.equals(this.skippedTestPoints, userWithRankModelUserRank.skippedTestPoints) &&
        Objects.equals(this.blockedTestPoints, userWithRankModelUserRank.blockedTestPoints) &&
        Objects.equals(this.levelAvatarEnabled, userWithRankModelUserRank.levelAvatarEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(score, workItemsCreated, passedTestPoints, failedTestPoints, skippedTestPoints, blockedTestPoints, levelAvatarEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserWithRankModelUserRank {\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    workItemsCreated: ").append(toIndentedString(workItemsCreated)).append("\n");
    sb.append("    passedTestPoints: ").append(toIndentedString(passedTestPoints)).append("\n");
    sb.append("    failedTestPoints: ").append(toIndentedString(failedTestPoints)).append("\n");
    sb.append("    skippedTestPoints: ").append(toIndentedString(skippedTestPoints)).append("\n");
    sb.append("    blockedTestPoints: ").append(toIndentedString(blockedTestPoints)).append("\n");
    sb.append("    levelAvatarEnabled: ").append(toIndentedString(levelAvatarEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("score");
    openapiFields.add("workItemsCreated");
    openapiFields.add("passedTestPoints");
    openapiFields.add("failedTestPoints");
    openapiFields.add("skippedTestPoints");
    openapiFields.add("blockedTestPoints");
    openapiFields.add("levelAvatarEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("score");
    openapiRequiredFields.add("workItemsCreated");
    openapiRequiredFields.add("passedTestPoints");
    openapiRequiredFields.add("failedTestPoints");
    openapiRequiredFields.add("skippedTestPoints");
    openapiRequiredFields.add("blockedTestPoints");
    openapiRequiredFields.add("levelAvatarEnabled");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UserWithRankModelUserRank
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UserWithRankModelUserRank.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserWithRankModelUserRank is not found in the empty JSON string", UserWithRankModelUserRank.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!UserWithRankModelUserRank.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserWithRankModelUserRank` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserWithRankModelUserRank.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserWithRankModelUserRank.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserWithRankModelUserRank' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserWithRankModelUserRank> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserWithRankModelUserRank.class));

       return (TypeAdapter<T>) new TypeAdapter<UserWithRankModelUserRank>() {
           @Override
           public void write(JsonWriter out, UserWithRankModelUserRank value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserWithRankModelUserRank read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UserWithRankModelUserRank given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UserWithRankModelUserRank
  * @throws IOException if the JSON string is invalid with respect to UserWithRankModelUserRank
  */
  public static UserWithRankModelUserRank fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserWithRankModelUserRank.class);
  }

 /**
  * Convert an instance of UserWithRankModelUserRank to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

