/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import ru.testit.client.model.RequestTypeModel;
import ru.testit.client.model.WebHookEventTypeModel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import ru.testit.client.invoker.JSON;

/**
 * WebHookLogModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class WebHookLogModel {
  public static final String SERIALIZED_NAME_WEB_HOOK_NAME = "webHookName";
  @SerializedName(SERIALIZED_NAME_WEB_HOOK_NAME)
  @javax.annotation.Nonnull
  private String webHookName;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "eventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  @javax.annotation.Nonnull
  private WebHookEventTypeModel eventType;

  public static final String SERIALIZED_NAME_WEB_HOOK_ID = "webHookId";
  @SerializedName(SERIALIZED_NAME_WEB_HOOK_ID)
  @javax.annotation.Nonnull
  private UUID webHookId;

  public static final String SERIALIZED_NAME_REQUEST_BODY = "requestBody";
  @SerializedName(SERIALIZED_NAME_REQUEST_BODY)
  @javax.annotation.Nullable
  private String requestBody;

  public static final String SERIALIZED_NAME_REQUEST_META = "requestMeta";
  @SerializedName(SERIALIZED_NAME_REQUEST_META)
  @javax.annotation.Nullable
  private String requestMeta;

  public static final String SERIALIZED_NAME_RESPONSE_STATUS_CODE = "responseStatusCode";
  @SerializedName(SERIALIZED_NAME_RESPONSE_STATUS_CODE)
  @javax.annotation.Nonnull
  private Integer responseStatusCode;

  public static final String SERIALIZED_NAME_RESPONSE_BODY = "responseBody";
  @SerializedName(SERIALIZED_NAME_RESPONSE_BODY)
  @javax.annotation.Nullable
  private String responseBody;

  public static final String SERIALIZED_NAME_RESPONSE_META = "responseMeta";
  @SerializedName(SERIALIZED_NAME_RESPONSE_META)
  @javax.annotation.Nullable
  private String responseMeta;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  @javax.annotation.Nonnull
  private UUID projectId;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  @javax.annotation.Nonnull
  private String url;

  public static final String SERIALIZED_NAME_REQUEST_TYPE = "requestType";
  @SerializedName(SERIALIZED_NAME_REQUEST_TYPE)
  @javax.annotation.Nonnull
  private RequestTypeModel requestType;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_MODIFIED_DATE = "modifiedDate";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime modifiedDate;

  public static final String SERIALIZED_NAME_CREATED_BY_ID = "createdById";
  @SerializedName(SERIALIZED_NAME_CREATED_BY_ID)
  @javax.annotation.Nonnull
  private UUID createdById;

  public static final String SERIALIZED_NAME_MODIFIED_BY_ID = "modifiedById";
  @SerializedName(SERIALIZED_NAME_MODIFIED_BY_ID)
  @javax.annotation.Nullable
  private UUID modifiedById;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private UUID id;

  public static final String SERIALIZED_NAME_IS_DELETED = "isDeleted";
  @SerializedName(SERIALIZED_NAME_IS_DELETED)
  @javax.annotation.Nonnull
  private Boolean isDeleted;

  public WebHookLogModel() {
  }

  public WebHookLogModel webHookName(@javax.annotation.Nonnull String webHookName) {
    this.webHookName = webHookName;
    return this;
  }

  /**
   * Get webHookName
   * @return webHookName
   */
  @javax.annotation.Nonnull
  public String getWebHookName() {
    return webHookName;
  }

  public void setWebHookName(@javax.annotation.Nonnull String webHookName) {
    this.webHookName = webHookName;
  }


  public WebHookLogModel eventType(@javax.annotation.Nonnull WebHookEventTypeModel eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * Get eventType
   * @return eventType
   */
  @javax.annotation.Nonnull
  public WebHookEventTypeModel getEventType() {
    return eventType;
  }

  public void setEventType(@javax.annotation.Nonnull WebHookEventTypeModel eventType) {
    this.eventType = eventType;
  }


  public WebHookLogModel webHookId(@javax.annotation.Nonnull UUID webHookId) {
    this.webHookId = webHookId;
    return this;
  }

  /**
   * Get webHookId
   * @return webHookId
   */
  @javax.annotation.Nonnull
  public UUID getWebHookId() {
    return webHookId;
  }

  public void setWebHookId(@javax.annotation.Nonnull UUID webHookId) {
    this.webHookId = webHookId;
  }


  public WebHookLogModel requestBody(@javax.annotation.Nullable String requestBody) {
    this.requestBody = requestBody;
    return this;
  }

  /**
   * Get requestBody
   * @return requestBody
   */
  @javax.annotation.Nullable
  public String getRequestBody() {
    return requestBody;
  }

  public void setRequestBody(@javax.annotation.Nullable String requestBody) {
    this.requestBody = requestBody;
  }


  public WebHookLogModel requestMeta(@javax.annotation.Nullable String requestMeta) {
    this.requestMeta = requestMeta;
    return this;
  }

  /**
   * Get requestMeta
   * @return requestMeta
   */
  @javax.annotation.Nullable
  public String getRequestMeta() {
    return requestMeta;
  }

  public void setRequestMeta(@javax.annotation.Nullable String requestMeta) {
    this.requestMeta = requestMeta;
  }


  public WebHookLogModel responseStatusCode(@javax.annotation.Nonnull Integer responseStatusCode) {
    this.responseStatusCode = responseStatusCode;
    return this;
  }

  /**
   * Get responseStatusCode
   * @return responseStatusCode
   */
  @javax.annotation.Nonnull
  public Integer getResponseStatusCode() {
    return responseStatusCode;
  }

  public void setResponseStatusCode(@javax.annotation.Nonnull Integer responseStatusCode) {
    this.responseStatusCode = responseStatusCode;
  }


  public WebHookLogModel responseBody(@javax.annotation.Nullable String responseBody) {
    this.responseBody = responseBody;
    return this;
  }

  /**
   * Get responseBody
   * @return responseBody
   */
  @javax.annotation.Nullable
  public String getResponseBody() {
    return responseBody;
  }

  public void setResponseBody(@javax.annotation.Nullable String responseBody) {
    this.responseBody = responseBody;
  }


  public WebHookLogModel responseMeta(@javax.annotation.Nullable String responseMeta) {
    this.responseMeta = responseMeta;
    return this;
  }

  /**
   * Get responseMeta
   * @return responseMeta
   */
  @javax.annotation.Nullable
  public String getResponseMeta() {
    return responseMeta;
  }

  public void setResponseMeta(@javax.annotation.Nullable String responseMeta) {
    this.responseMeta = responseMeta;
  }


  public WebHookLogModel projectId(@javax.annotation.Nonnull UUID projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Get projectId
   * @return projectId
   */
  @javax.annotation.Nonnull
  public UUID getProjectId() {
    return projectId;
  }

  public void setProjectId(@javax.annotation.Nonnull UUID projectId) {
    this.projectId = projectId;
  }


  public WebHookLogModel url(@javax.annotation.Nonnull String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(@javax.annotation.Nonnull String url) {
    this.url = url;
  }


  public WebHookLogModel requestType(@javax.annotation.Nonnull RequestTypeModel requestType) {
    this.requestType = requestType;
    return this;
  }

  /**
   * Get requestType
   * @return requestType
   */
  @javax.annotation.Nonnull
  public RequestTypeModel getRequestType() {
    return requestType;
  }

  public void setRequestType(@javax.annotation.Nonnull RequestTypeModel requestType) {
    this.requestType = requestType;
  }


  public WebHookLogModel createdDate(@javax.annotation.Nullable OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Get createdDate
   * @return createdDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(@javax.annotation.Nullable OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public WebHookLogModel modifiedDate(@javax.annotation.Nullable OffsetDateTime modifiedDate) {
    this.modifiedDate = modifiedDate;
    return this;
  }

  /**
   * Get modifiedDate
   * @return modifiedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedDate() {
    return modifiedDate;
  }

  public void setModifiedDate(@javax.annotation.Nullable OffsetDateTime modifiedDate) {
    this.modifiedDate = modifiedDate;
  }


  public WebHookLogModel createdById(@javax.annotation.Nonnull UUID createdById) {
    this.createdById = createdById;
    return this;
  }

  /**
   * Get createdById
   * @return createdById
   */
  @javax.annotation.Nonnull
  public UUID getCreatedById() {
    return createdById;
  }

  public void setCreatedById(@javax.annotation.Nonnull UUID createdById) {
    this.createdById = createdById;
  }


  public WebHookLogModel modifiedById(@javax.annotation.Nullable UUID modifiedById) {
    this.modifiedById = modifiedById;
    return this;
  }

  /**
   * Get modifiedById
   * @return modifiedById
   */
  @javax.annotation.Nullable
  public UUID getModifiedById() {
    return modifiedById;
  }

  public void setModifiedById(@javax.annotation.Nullable UUID modifiedById) {
    this.modifiedById = modifiedById;
  }


  public WebHookLogModel id(@javax.annotation.Nonnull UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Unique ID of the entity
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull UUID id) {
    this.id = id;
  }


  public WebHookLogModel isDeleted(@javax.annotation.Nonnull Boolean isDeleted) {
    this.isDeleted = isDeleted;
    return this;
  }

  /**
   * Indicates if the entity is deleted
   * @return isDeleted
   */
  @javax.annotation.Nonnull
  public Boolean getIsDeleted() {
    return isDeleted;
  }

  public void setIsDeleted(@javax.annotation.Nonnull Boolean isDeleted) {
    this.isDeleted = isDeleted;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebHookLogModel webHookLogModel = (WebHookLogModel) o;
    return Objects.equals(this.webHookName, webHookLogModel.webHookName) &&
        Objects.equals(this.eventType, webHookLogModel.eventType) &&
        Objects.equals(this.webHookId, webHookLogModel.webHookId) &&
        Objects.equals(this.requestBody, webHookLogModel.requestBody) &&
        Objects.equals(this.requestMeta, webHookLogModel.requestMeta) &&
        Objects.equals(this.responseStatusCode, webHookLogModel.responseStatusCode) &&
        Objects.equals(this.responseBody, webHookLogModel.responseBody) &&
        Objects.equals(this.responseMeta, webHookLogModel.responseMeta) &&
        Objects.equals(this.projectId, webHookLogModel.projectId) &&
        Objects.equals(this.url, webHookLogModel.url) &&
        Objects.equals(this.requestType, webHookLogModel.requestType) &&
        Objects.equals(this.createdDate, webHookLogModel.createdDate) &&
        Objects.equals(this.modifiedDate, webHookLogModel.modifiedDate) &&
        Objects.equals(this.createdById, webHookLogModel.createdById) &&
        Objects.equals(this.modifiedById, webHookLogModel.modifiedById) &&
        Objects.equals(this.id, webHookLogModel.id) &&
        Objects.equals(this.isDeleted, webHookLogModel.isDeleted);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(webHookName, eventType, webHookId, requestBody, requestMeta, responseStatusCode, responseBody, responseMeta, projectId, url, requestType, createdDate, modifiedDate, createdById, modifiedById, id, isDeleted);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebHookLogModel {\n");
    sb.append("    webHookName: ").append(toIndentedString(webHookName)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    webHookId: ").append(toIndentedString(webHookId)).append("\n");
    sb.append("    requestBody: ").append(toIndentedString(requestBody)).append("\n");
    sb.append("    requestMeta: ").append(toIndentedString(requestMeta)).append("\n");
    sb.append("    responseStatusCode: ").append(toIndentedString(responseStatusCode)).append("\n");
    sb.append("    responseBody: ").append(toIndentedString(responseBody)).append("\n");
    sb.append("    responseMeta: ").append(toIndentedString(responseMeta)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    requestType: ").append(toIndentedString(requestType)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("    createdById: ").append(toIndentedString(createdById)).append("\n");
    sb.append("    modifiedById: ").append(toIndentedString(modifiedById)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("webHookName");
    openapiFields.add("eventType");
    openapiFields.add("webHookId");
    openapiFields.add("requestBody");
    openapiFields.add("requestMeta");
    openapiFields.add("responseStatusCode");
    openapiFields.add("responseBody");
    openapiFields.add("responseMeta");
    openapiFields.add("projectId");
    openapiFields.add("url");
    openapiFields.add("requestType");
    openapiFields.add("createdDate");
    openapiFields.add("modifiedDate");
    openapiFields.add("createdById");
    openapiFields.add("modifiedById");
    openapiFields.add("id");
    openapiFields.add("isDeleted");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("webHookName");
    openapiRequiredFields.add("eventType");
    openapiRequiredFields.add("webHookId");
    openapiRequiredFields.add("responseStatusCode");
    openapiRequiredFields.add("projectId");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("requestType");
    openapiRequiredFields.add("createdById");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("isDeleted");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebHookLogModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebHookLogModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebHookLogModel is not found in the empty JSON string", WebHookLogModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebHookLogModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebHookLogModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WebHookLogModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("webHookName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webHookName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webHookName").toString()));
      }
      // validate the required field `eventType`
      WebHookEventTypeModel.validateJsonElement(jsonObj.get("eventType"));
      if (!jsonObj.get("webHookId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webHookId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webHookId").toString()));
      }
      if ((jsonObj.get("requestBody") != null && !jsonObj.get("requestBody").isJsonNull()) && !jsonObj.get("requestBody").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestBody` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestBody").toString()));
      }
      if ((jsonObj.get("requestMeta") != null && !jsonObj.get("requestMeta").isJsonNull()) && !jsonObj.get("requestMeta").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestMeta` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestMeta").toString()));
      }
      if ((jsonObj.get("responseBody") != null && !jsonObj.get("responseBody").isJsonNull()) && !jsonObj.get("responseBody").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseBody` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseBody").toString()));
      }
      if ((jsonObj.get("responseMeta") != null && !jsonObj.get("responseMeta").isJsonNull()) && !jsonObj.get("responseMeta").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseMeta` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseMeta").toString()));
      }
      if (!jsonObj.get("projectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectId").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // validate the required field `requestType`
      RequestTypeModel.validateJsonElement(jsonObj.get("requestType"));
      if (!jsonObj.get("createdById").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdById` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdById").toString()));
      }
      if ((jsonObj.get("modifiedById") != null && !jsonObj.get("modifiedById").isJsonNull()) && !jsonObj.get("modifiedById").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedById` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modifiedById").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebHookLogModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebHookLogModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebHookLogModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebHookLogModel.class));

       return (TypeAdapter<T>) new TypeAdapter<WebHookLogModel>() {
           @Override
           public void write(JsonWriter out, WebHookLogModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebHookLogModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebHookLogModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebHookLogModel
   * @throws IOException if the JSON string is invalid with respect to WebHookLogModel
   */
  public static WebHookLogModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebHookLogModel.class);
  }

  /**
   * Convert an instance of WebHookLogModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

