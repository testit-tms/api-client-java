/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import ru.testit.client.model.RequestTypeModel;
import ru.testit.client.model.WebHookEventTypeModel;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import ru.testit.client.invoker.JSON;


/**
 * WebHookPostModel
 */
@JsonPropertyOrder({
  WebHookPostModel.JSON_PROPERTY_PROJECT_ID,
  WebHookPostModel.JSON_PROPERTY_EVENT_TYPE,
  WebHookPostModel.JSON_PROPERTY_URL,
  WebHookPostModel.JSON_PROPERTY_REQUEST_TYPE,
  WebHookPostModel.JSON_PROPERTY_SHOULD_SEND_BODY,
  WebHookPostModel.JSON_PROPERTY_HEADERS,
  WebHookPostModel.JSON_PROPERTY_QUERY_PARAMETERS,
  WebHookPostModel.JSON_PROPERTY_IS_ENABLED,
  WebHookPostModel.JSON_PROPERTY_SHOULD_SEND_CUSTOM_BODY,
  WebHookPostModel.JSON_PROPERTY_SHOULD_REPLACE_PARAMETERS,
  WebHookPostModel.JSON_PROPERTY_SHOULD_ESCAPE_PARAMETERS,
  WebHookPostModel.JSON_PROPERTY_NAME,
  WebHookPostModel.JSON_PROPERTY_DESCRIPTION,
  WebHookPostModel.JSON_PROPERTY_CUSTOM_BODY
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0")
public class WebHookPostModel {
  public static final String JSON_PROPERTY_PROJECT_ID = "projectId";
  private UUID projectId;

  public static final String JSON_PROPERTY_EVENT_TYPE = "eventType";
  private WebHookEventTypeModel eventType;

  public static final String JSON_PROPERTY_URL = "url";
  private String url;

  public static final String JSON_PROPERTY_REQUEST_TYPE = "requestType";
  private RequestTypeModel requestType;

  public static final String JSON_PROPERTY_SHOULD_SEND_BODY = "shouldSendBody";
  private Boolean shouldSendBody;

  public static final String JSON_PROPERTY_HEADERS = "headers";
  private Map<String, String> headers = new HashMap<>();

  public static final String JSON_PROPERTY_QUERY_PARAMETERS = "queryParameters";
  private Map<String, String> queryParameters = new HashMap<>();

  public static final String JSON_PROPERTY_IS_ENABLED = "isEnabled";
  private Boolean isEnabled;

  public static final String JSON_PROPERTY_SHOULD_SEND_CUSTOM_BODY = "shouldSendCustomBody";
  private Boolean shouldSendCustomBody;

  public static final String JSON_PROPERTY_SHOULD_REPLACE_PARAMETERS = "shouldReplaceParameters";
  private Boolean shouldReplaceParameters;

  public static final String JSON_PROPERTY_SHOULD_ESCAPE_PARAMETERS = "shouldEscapeParameters";
  private Boolean shouldEscapeParameters;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private JsonNullable<String> description = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_CUSTOM_BODY = "customBody";
  private JsonNullable<String> customBody = JsonNullable.<String>undefined();

  public WebHookPostModel() { 
  }

  public WebHookPostModel projectId(UUID projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Unique ID of the webhook project
   * @return projectId
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PROJECT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getProjectId() {
    return projectId;
  }


  @JsonProperty(JSON_PROPERTY_PROJECT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProjectId(UUID projectId) {
    this.projectId = projectId;
  }


  public WebHookPostModel eventType(WebHookEventTypeModel eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * Type of event which triggers the webhook
   * @return eventType
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EVENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public WebHookEventTypeModel getEventType() {
    return eventType;
  }


  @JsonProperty(JSON_PROPERTY_EVENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEventType(WebHookEventTypeModel eventType) {
    this.eventType = eventType;
  }


  public WebHookPostModel url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Request URL of the webhook
   * @return url
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUrl() {
    return url;
  }


  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUrl(String url) {
    this.url = url;
  }


  public WebHookPostModel requestType(RequestTypeModel requestType) {
    this.requestType = requestType;
    return this;
  }

  /**
   * Request method of the webhook
   * @return requestType
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REQUEST_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public RequestTypeModel getRequestType() {
    return requestType;
  }


  @JsonProperty(JSON_PROPERTY_REQUEST_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRequestType(RequestTypeModel requestType) {
    this.requestType = requestType;
  }


  public WebHookPostModel shouldSendBody(Boolean shouldSendBody) {
    this.shouldSendBody = shouldSendBody;
    return this;
  }

  /**
   * Indicates if the webhook sends body
   * @return shouldSendBody
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SHOULD_SEND_BODY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getShouldSendBody() {
    return shouldSendBody;
  }


  @JsonProperty(JSON_PROPERTY_SHOULD_SEND_BODY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setShouldSendBody(Boolean shouldSendBody) {
    this.shouldSendBody = shouldSendBody;
  }


  public WebHookPostModel headers(Map<String, String> headers) {
    this.headers = headers;
    return this;
  }

  public WebHookPostModel putHeadersItem(String key, String headersItem) {
    if (this.headers == null) {
      this.headers = new HashMap<>();
    }
    this.headers.put(key, headersItem);
    return this;
  }

  /**
   * Collection of the webhook headers
   * @return headers
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HEADERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Map<String, String> getHeaders() {
    return headers;
  }


  @JsonProperty(JSON_PROPERTY_HEADERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHeaders(Map<String, String> headers) {
    this.headers = headers;
  }


  public WebHookPostModel queryParameters(Map<String, String> queryParameters) {
    this.queryParameters = queryParameters;
    return this;
  }

  public WebHookPostModel putQueryParametersItem(String key, String queryParametersItem) {
    if (this.queryParameters == null) {
      this.queryParameters = new HashMap<>();
    }
    this.queryParameters.put(key, queryParametersItem);
    return this;
  }

  /**
   * Collection of the webhook query parameters
   * @return queryParameters
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_QUERY_PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Map<String, String> getQueryParameters() {
    return queryParameters;
  }


  @JsonProperty(JSON_PROPERTY_QUERY_PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setQueryParameters(Map<String, String> queryParameters) {
    this.queryParameters = queryParameters;
  }


  public WebHookPostModel isEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
    return this;
  }

  /**
   * Indicates if the webhook is active
   * @return isEnabled
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_ENABLED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsEnabled() {
    return isEnabled;
  }


  @JsonProperty(JSON_PROPERTY_IS_ENABLED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
  }


  public WebHookPostModel shouldSendCustomBody(Boolean shouldSendCustomBody) {
    this.shouldSendCustomBody = shouldSendCustomBody;
    return this;
  }

  /**
   * Indicates if the webhook sends custom body
   * @return shouldSendCustomBody
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SHOULD_SEND_CUSTOM_BODY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getShouldSendCustomBody() {
    return shouldSendCustomBody;
  }


  @JsonProperty(JSON_PROPERTY_SHOULD_SEND_CUSTOM_BODY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setShouldSendCustomBody(Boolean shouldSendCustomBody) {
    this.shouldSendCustomBody = shouldSendCustomBody;
  }


  public WebHookPostModel shouldReplaceParameters(Boolean shouldReplaceParameters) {
    this.shouldReplaceParameters = shouldReplaceParameters;
    return this;
  }

  /**
   * Indicates if the webhook injects parameters
   * @return shouldReplaceParameters
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SHOULD_REPLACE_PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getShouldReplaceParameters() {
    return shouldReplaceParameters;
  }


  @JsonProperty(JSON_PROPERTY_SHOULD_REPLACE_PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setShouldReplaceParameters(Boolean shouldReplaceParameters) {
    this.shouldReplaceParameters = shouldReplaceParameters;
  }


  public WebHookPostModel shouldEscapeParameters(Boolean shouldEscapeParameters) {
    this.shouldEscapeParameters = shouldEscapeParameters;
    return this;
  }

  /**
   * Indicates if the webhook escapes invalid characters in parameters
   * @return shouldEscapeParameters
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SHOULD_ESCAPE_PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getShouldEscapeParameters() {
    return shouldEscapeParameters;
  }


  @JsonProperty(JSON_PROPERTY_SHOULD_ESCAPE_PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setShouldEscapeParameters(Boolean shouldEscapeParameters) {
    this.shouldEscapeParameters = shouldEscapeParameters;
  }


  public WebHookPostModel name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the webhook
   * @return name
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public WebHookPostModel description(String description) {
    this.description = JsonNullable.<String>of(description);
    return this;
  }

  /**
   * Description of the webhook
   * @return description
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getDescription() {
        return description.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getDescription_JsonNullable() {
    return description;
  }
  
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  public void setDescription_JsonNullable(JsonNullable<String> description) {
    this.description = description;
  }

  public void setDescription(String description) {
    this.description = JsonNullable.<String>of(description);
  }


  public WebHookPostModel customBody(String customBody) {
    this.customBody = JsonNullable.<String>of(customBody);
    return this;
  }

  /**
   * Custom body of the webhook
   * @return customBody
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getCustomBody() {
        return customBody.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CUSTOM_BODY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getCustomBody_JsonNullable() {
    return customBody;
  }
  
  @JsonProperty(JSON_PROPERTY_CUSTOM_BODY)
  public void setCustomBody_JsonNullable(JsonNullable<String> customBody) {
    this.customBody = customBody;
  }

  public void setCustomBody(String customBody) {
    this.customBody = JsonNullable.<String>of(customBody);
  }


  /**
   * Return true if this WebHookPostModel object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebHookPostModel webHookPostModel = (WebHookPostModel) o;
    return Objects.equals(this.projectId, webHookPostModel.projectId) &&
        Objects.equals(this.eventType, webHookPostModel.eventType) &&
        Objects.equals(this.url, webHookPostModel.url) &&
        Objects.equals(this.requestType, webHookPostModel.requestType) &&
        Objects.equals(this.shouldSendBody, webHookPostModel.shouldSendBody) &&
        Objects.equals(this.headers, webHookPostModel.headers) &&
        Objects.equals(this.queryParameters, webHookPostModel.queryParameters) &&
        Objects.equals(this.isEnabled, webHookPostModel.isEnabled) &&
        Objects.equals(this.shouldSendCustomBody, webHookPostModel.shouldSendCustomBody) &&
        Objects.equals(this.shouldReplaceParameters, webHookPostModel.shouldReplaceParameters) &&
        Objects.equals(this.shouldEscapeParameters, webHookPostModel.shouldEscapeParameters) &&
        Objects.equals(this.name, webHookPostModel.name) &&
        equalsNullable(this.description, webHookPostModel.description) &&
        equalsNullable(this.customBody, webHookPostModel.customBody);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(projectId, eventType, url, requestType, shouldSendBody, headers, queryParameters, isEnabled, shouldSendCustomBody, shouldReplaceParameters, shouldEscapeParameters, name, hashCodeNullable(description), hashCodeNullable(customBody));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebHookPostModel {\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    requestType: ").append(toIndentedString(requestType)).append("\n");
    sb.append("    shouldSendBody: ").append(toIndentedString(shouldSendBody)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    queryParameters: ").append(toIndentedString(queryParameters)).append("\n");
    sb.append("    isEnabled: ").append(toIndentedString(isEnabled)).append("\n");
    sb.append("    shouldSendCustomBody: ").append(toIndentedString(shouldSendCustomBody)).append("\n");
    sb.append("    shouldReplaceParameters: ").append(toIndentedString(shouldReplaceParameters)).append("\n");
    sb.append("    shouldEscapeParameters: ").append(toIndentedString(shouldEscapeParameters)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    customBody: ").append(toIndentedString(customBody)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

