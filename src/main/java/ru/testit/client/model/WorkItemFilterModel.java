/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import ru.testit.client.model.WorkItemPriorityModel;
import ru.testit.client.model.WorkItemStates;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import ru.testit.client.invoker.JSON;


/**
 * Collection of filters to apply to search
 */
@ApiModel(description = "Collection of filters to apply to search")
@JsonPropertyOrder({
  WorkItemFilterModel.JSON_PROPERTY_NAME_OR_ID,
  WorkItemFilterModel.JSON_PROPERTY_INCLUDE_IDS,
  WorkItemFilterModel.JSON_PROPERTY_EXCLUDE_IDS,
  WorkItemFilterModel.JSON_PROPERTY_NAME,
  WorkItemFilterModel.JSON_PROPERTY_GLOBAL_IDS,
  WorkItemFilterModel.JSON_PROPERTY_ATTRIBUTES,
  WorkItemFilterModel.JSON_PROPERTY_IS_DELETED,
  WorkItemFilterModel.JSON_PROPERTY_PROJECT_IDS,
  WorkItemFilterModel.JSON_PROPERTY_SECTION_IDS,
  WorkItemFilterModel.JSON_PROPERTY_CREATED_BY_IDS,
  WorkItemFilterModel.JSON_PROPERTY_MODIFIED_BY_IDS,
  WorkItemFilterModel.JSON_PROPERTY_STATES,
  WorkItemFilterModel.JSON_PROPERTY_PRIORITIES,
  WorkItemFilterModel.JSON_PROPERTY_ENTITY_TYPES,
  WorkItemFilterModel.JSON_PROPERTY_CREATED_DATE_MINIMAL,
  WorkItemFilterModel.JSON_PROPERTY_CREATED_DATE_MAXIMAL,
  WorkItemFilterModel.JSON_PROPERTY_MODIFIED_DATE_MINIMAL,
  WorkItemFilterModel.JSON_PROPERTY_MODIFIED_DATE_MAXIMAL,
  WorkItemFilterModel.JSON_PROPERTY_DURATION_MINIMAL,
  WorkItemFilterModel.JSON_PROPERTY_DURATION_MAXIMAL,
  WorkItemFilterModel.JSON_PROPERTY_IS_AUTOMATED,
  WorkItemFilterModel.JSON_PROPERTY_TAG_NAMES,
  WorkItemFilterModel.JSON_PROPERTY_AUTO_TEST_IDS,
  WorkItemFilterModel.JSON_PROPERTY_EXCEPT_WORK_ITEM_IDS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class WorkItemFilterModel {
  public static final String JSON_PROPERTY_NAME_OR_ID = "nameOrId";
  private JsonNullable<String> nameOrId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_INCLUDE_IDS = "includeIds";
  private JsonNullable<Set<UUID>> includeIds = JsonNullable.<Set<UUID>>undefined();

  public static final String JSON_PROPERTY_EXCLUDE_IDS = "excludeIds";
  private JsonNullable<Set<UUID>> excludeIds = JsonNullable.<Set<UUID>>undefined();

  public static final String JSON_PROPERTY_NAME = "name";
  private JsonNullable<String> name = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_GLOBAL_IDS = "globalIds";
  private JsonNullable<Set<Long>> globalIds = JsonNullable.<Set<Long>>undefined();

  public static final String JSON_PROPERTY_ATTRIBUTES = "attributes";
  private JsonNullable<Map<String, List<String>>> attributes = JsonNullable.<Map<String, List<String>>>undefined();

  public static final String JSON_PROPERTY_IS_DELETED = "isDeleted";
  private JsonNullable<Boolean> isDeleted = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_PROJECT_IDS = "projectIds";
  private JsonNullable<Set<UUID>> projectIds = JsonNullable.<Set<UUID>>undefined();

  public static final String JSON_PROPERTY_SECTION_IDS = "sectionIds";
  private JsonNullable<Set<UUID>> sectionIds = JsonNullable.<Set<UUID>>undefined();

  public static final String JSON_PROPERTY_CREATED_BY_IDS = "createdByIds";
  private JsonNullable<Set<UUID>> createdByIds = JsonNullable.<Set<UUID>>undefined();

  public static final String JSON_PROPERTY_MODIFIED_BY_IDS = "modifiedByIds";
  private JsonNullable<Set<UUID>> modifiedByIds = JsonNullable.<Set<UUID>>undefined();

  public static final String JSON_PROPERTY_STATES = "states";
  private JsonNullable<Set<WorkItemStates>> states = JsonNullable.<Set<WorkItemStates>>undefined();

  public static final String JSON_PROPERTY_PRIORITIES = "priorities";
  private JsonNullable<Set<WorkItemPriorityModel>> priorities = JsonNullable.<Set<WorkItemPriorityModel>>undefined();

  public static final String JSON_PROPERTY_ENTITY_TYPES = "entityTypes";
  private JsonNullable<Set<String>> entityTypes = JsonNullable.<Set<String>>undefined();

  public static final String JSON_PROPERTY_CREATED_DATE_MINIMAL = "createdDateMinimal";
  private JsonNullable<OffsetDateTime> createdDateMinimal = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_CREATED_DATE_MAXIMAL = "createdDateMaximal";
  private JsonNullable<OffsetDateTime> createdDateMaximal = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_MODIFIED_DATE_MINIMAL = "modifiedDateMinimal";
  private JsonNullable<OffsetDateTime> modifiedDateMinimal = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_MODIFIED_DATE_MAXIMAL = "modifiedDateMaximal";
  private JsonNullable<OffsetDateTime> modifiedDateMaximal = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_DURATION_MINIMAL = "durationMinimal";
  private JsonNullable<Integer> durationMinimal = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_DURATION_MAXIMAL = "durationMaximal";
  private JsonNullable<Integer> durationMaximal = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_IS_AUTOMATED = "isAutomated";
  private JsonNullable<Boolean> isAutomated = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_TAG_NAMES = "tagNames";
  private JsonNullable<Set<String>> tagNames = JsonNullable.<Set<String>>undefined();

  public static final String JSON_PROPERTY_AUTO_TEST_IDS = "autoTestIds";
  private JsonNullable<Set<UUID>> autoTestIds = JsonNullable.<Set<UUID>>undefined();

  public static final String JSON_PROPERTY_EXCEPT_WORK_ITEM_IDS = "exceptWorkItemIds";
  private JsonNullable<Set<UUID>> exceptWorkItemIds = JsonNullable.<Set<UUID>>undefined();

  public WorkItemFilterModel() { 
  }

  public WorkItemFilterModel nameOrId(String nameOrId) {
    this.nameOrId = JsonNullable.<String>of(nameOrId);
    return this;
  }

   /**
   * Name or identifier (UUID) of work item
   * @return nameOrId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Name or identifier (UUID) of work item")
  @JsonIgnore

  public String getNameOrId() {
        return nameOrId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NAME_OR_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getNameOrId_JsonNullable() {
    return nameOrId;
  }
  
  @JsonProperty(JSON_PROPERTY_NAME_OR_ID)
  public void setNameOrId_JsonNullable(JsonNullable<String> nameOrId) {
    this.nameOrId = nameOrId;
  }

  public void setNameOrId(String nameOrId) {
    this.nameOrId = JsonNullable.<String>of(nameOrId);
  }


  public WorkItemFilterModel includeIds(Set<UUID> includeIds) {
    this.includeIds = JsonNullable.<Set<UUID>>of(includeIds);
    return this;
  }

  public WorkItemFilterModel addIncludeIdsItem(UUID includeIdsItem) {
    if (this.includeIds == null || !this.includeIds.isPresent()) {
      this.includeIds = JsonNullable.<Set<UUID>>of(new LinkedHashSet<>());
    }
    try {
      this.includeIds.get().add(includeIdsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Collection of identifiers of work items which need to be included in result regardless of filtering
   * @return includeIds
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Collection of identifiers of work items which need to be included in result regardless of filtering")
  @JsonIgnore

  public Set<UUID> getIncludeIds() {
        return includeIds.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_INCLUDE_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Set<UUID>> getIncludeIds_JsonNullable() {
    return includeIds;
  }
  
  @JsonProperty(JSON_PROPERTY_INCLUDE_IDS)
  public void setIncludeIds_JsonNullable(JsonNullable<Set<UUID>> includeIds) {
    this.includeIds = includeIds;
  }

  public void setIncludeIds(Set<UUID> includeIds) {
    this.includeIds = JsonNullable.<Set<UUID>>of(includeIds);
  }


  public WorkItemFilterModel excludeIds(Set<UUID> excludeIds) {
    this.excludeIds = JsonNullable.<Set<UUID>>of(excludeIds);
    return this;
  }

  public WorkItemFilterModel addExcludeIdsItem(UUID excludeIdsItem) {
    if (this.excludeIds == null || !this.excludeIds.isPresent()) {
      this.excludeIds = JsonNullable.<Set<UUID>>of(new LinkedHashSet<>());
    }
    try {
      this.excludeIds.get().add(excludeIdsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Collection of identifiers of work items which need to be excluded from result regardless of filtering
   * @return excludeIds
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Collection of identifiers of work items which need to be excluded from result regardless of filtering")
  @JsonIgnore

  public Set<UUID> getExcludeIds() {
        return excludeIds.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EXCLUDE_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Set<UUID>> getExcludeIds_JsonNullable() {
    return excludeIds;
  }
  
  @JsonProperty(JSON_PROPERTY_EXCLUDE_IDS)
  public void setExcludeIds_JsonNullable(JsonNullable<Set<UUID>> excludeIds) {
    this.excludeIds = excludeIds;
  }

  public void setExcludeIds(Set<UUID> excludeIds) {
    this.excludeIds = JsonNullable.<Set<UUID>>of(excludeIds);
  }


  public WorkItemFilterModel name(String name) {
    this.name = JsonNullable.<String>of(name);
    return this;
  }

   /**
   * Name of work item
   * @return name
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Name of work item")
  @JsonIgnore

  public String getName() {
        return name.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getName_JsonNullable() {
    return name;
  }
  
  @JsonProperty(JSON_PROPERTY_NAME)
  public void setName_JsonNullable(JsonNullable<String> name) {
    this.name = name;
  }

  public void setName(String name) {
    this.name = JsonNullable.<String>of(name);
  }


  public WorkItemFilterModel globalIds(Set<Long> globalIds) {
    this.globalIds = JsonNullable.<Set<Long>>of(globalIds);
    return this;
  }

  public WorkItemFilterModel addGlobalIdsItem(Long globalIdsItem) {
    if (this.globalIds == null || !this.globalIds.isPresent()) {
      this.globalIds = JsonNullable.<Set<Long>>of(new LinkedHashSet<>());
    }
    try {
      this.globalIds.get().add(globalIdsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Collection of global (integer) identifiers
   * @return globalIds
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Collection of global (integer) identifiers")
  @JsonIgnore

  public Set<Long> getGlobalIds() {
        return globalIds.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_GLOBAL_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Set<Long>> getGlobalIds_JsonNullable() {
    return globalIds;
  }
  
  @JsonProperty(JSON_PROPERTY_GLOBAL_IDS)
  public void setGlobalIds_JsonNullable(JsonNullable<Set<Long>> globalIds) {
    this.globalIds = globalIds;
  }

  public void setGlobalIds(Set<Long> globalIds) {
    this.globalIds = JsonNullable.<Set<Long>>of(globalIds);
  }


  public WorkItemFilterModel attributes(Map<String, List<String>> attributes) {
    this.attributes = JsonNullable.<Map<String, List<String>>>of(attributes);
    return this;
  }

  public WorkItemFilterModel putAttributesItem(String key, List<String> attributesItem) {
    if (this.attributes == null || !this.attributes.isPresent()) {
      this.attributes = JsonNullable.<Map<String, List<String>>>of(new HashMap<>());
    }
    try {
      this.attributes.get().put(key, attributesItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Custom attributes of work item
   * @return attributes
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Custom attributes of work item")
  @JsonIgnore

  public Map<String, List<String>> getAttributes() {
        return attributes.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Map<String, List<String>>> getAttributes_JsonNullable() {
    return attributes;
  }
  
  @JsonProperty(JSON_PROPERTY_ATTRIBUTES)
  public void setAttributes_JsonNullable(JsonNullable<Map<String, List<String>>> attributes) {
    this.attributes = attributes;
  }

  public void setAttributes(Map<String, List<String>> attributes) {
    this.attributes = JsonNullable.<Map<String, List<String>>>of(attributes);
  }


  public WorkItemFilterModel isDeleted(Boolean isDeleted) {
    this.isDeleted = JsonNullable.<Boolean>of(isDeleted);
    return this;
  }

   /**
   * Is result must consist of only actual/deleted work items
   * @return isDeleted
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Is result must consist of only actual/deleted work items")
  @JsonIgnore

  public Boolean getIsDeleted() {
        return isDeleted.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_IS_DELETED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getIsDeleted_JsonNullable() {
    return isDeleted;
  }
  
  @JsonProperty(JSON_PROPERTY_IS_DELETED)
  public void setIsDeleted_JsonNullable(JsonNullable<Boolean> isDeleted) {
    this.isDeleted = isDeleted;
  }

  public void setIsDeleted(Boolean isDeleted) {
    this.isDeleted = JsonNullable.<Boolean>of(isDeleted);
  }


  public WorkItemFilterModel projectIds(Set<UUID> projectIds) {
    this.projectIds = JsonNullable.<Set<UUID>>of(projectIds);
    return this;
  }

  public WorkItemFilterModel addProjectIdsItem(UUID projectIdsItem) {
    if (this.projectIds == null || !this.projectIds.isPresent()) {
      this.projectIds = JsonNullable.<Set<UUID>>of(new LinkedHashSet<>());
    }
    try {
      this.projectIds.get().add(projectIdsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Collection of project identifiers
   * @return projectIds
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Collection of project identifiers")
  @JsonIgnore

  public Set<UUID> getProjectIds() {
        return projectIds.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PROJECT_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Set<UUID>> getProjectIds_JsonNullable() {
    return projectIds;
  }
  
  @JsonProperty(JSON_PROPERTY_PROJECT_IDS)
  public void setProjectIds_JsonNullable(JsonNullable<Set<UUID>> projectIds) {
    this.projectIds = projectIds;
  }

  public void setProjectIds(Set<UUID> projectIds) {
    this.projectIds = JsonNullable.<Set<UUID>>of(projectIds);
  }


  public WorkItemFilterModel sectionIds(Set<UUID> sectionIds) {
    this.sectionIds = JsonNullable.<Set<UUID>>of(sectionIds);
    return this;
  }

  public WorkItemFilterModel addSectionIdsItem(UUID sectionIdsItem) {
    if (this.sectionIds == null || !this.sectionIds.isPresent()) {
      this.sectionIds = JsonNullable.<Set<UUID>>of(new LinkedHashSet<>());
    }
    try {
      this.sectionIds.get().add(sectionIdsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Collection of section identifiers
   * @return sectionIds
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Collection of section identifiers")
  @JsonIgnore

  public Set<UUID> getSectionIds() {
        return sectionIds.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SECTION_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Set<UUID>> getSectionIds_JsonNullable() {
    return sectionIds;
  }
  
  @JsonProperty(JSON_PROPERTY_SECTION_IDS)
  public void setSectionIds_JsonNullable(JsonNullable<Set<UUID>> sectionIds) {
    this.sectionIds = sectionIds;
  }

  public void setSectionIds(Set<UUID> sectionIds) {
    this.sectionIds = JsonNullable.<Set<UUID>>of(sectionIds);
  }


  public WorkItemFilterModel createdByIds(Set<UUID> createdByIds) {
    this.createdByIds = JsonNullable.<Set<UUID>>of(createdByIds);
    return this;
  }

  public WorkItemFilterModel addCreatedByIdsItem(UUID createdByIdsItem) {
    if (this.createdByIds == null || !this.createdByIds.isPresent()) {
      this.createdByIds = JsonNullable.<Set<UUID>>of(new LinkedHashSet<>());
    }
    try {
      this.createdByIds.get().add(createdByIdsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Collection of identifiers of users who created work item
   * @return createdByIds
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Collection of identifiers of users who created work item")
  @JsonIgnore

  public Set<UUID> getCreatedByIds() {
        return createdByIds.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CREATED_BY_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Set<UUID>> getCreatedByIds_JsonNullable() {
    return createdByIds;
  }
  
  @JsonProperty(JSON_PROPERTY_CREATED_BY_IDS)
  public void setCreatedByIds_JsonNullable(JsonNullable<Set<UUID>> createdByIds) {
    this.createdByIds = createdByIds;
  }

  public void setCreatedByIds(Set<UUID> createdByIds) {
    this.createdByIds = JsonNullable.<Set<UUID>>of(createdByIds);
  }


  public WorkItemFilterModel modifiedByIds(Set<UUID> modifiedByIds) {
    this.modifiedByIds = JsonNullable.<Set<UUID>>of(modifiedByIds);
    return this;
  }

  public WorkItemFilterModel addModifiedByIdsItem(UUID modifiedByIdsItem) {
    if (this.modifiedByIds == null || !this.modifiedByIds.isPresent()) {
      this.modifiedByIds = JsonNullable.<Set<UUID>>of(new LinkedHashSet<>());
    }
    try {
      this.modifiedByIds.get().add(modifiedByIdsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Collection of identifiers of users who applied last modification to work item
   * @return modifiedByIds
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Collection of identifiers of users who applied last modification to work item")
  @JsonIgnore

  public Set<UUID> getModifiedByIds() {
        return modifiedByIds.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MODIFIED_BY_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Set<UUID>> getModifiedByIds_JsonNullable() {
    return modifiedByIds;
  }
  
  @JsonProperty(JSON_PROPERTY_MODIFIED_BY_IDS)
  public void setModifiedByIds_JsonNullable(JsonNullable<Set<UUID>> modifiedByIds) {
    this.modifiedByIds = modifiedByIds;
  }

  public void setModifiedByIds(Set<UUID> modifiedByIds) {
    this.modifiedByIds = JsonNullable.<Set<UUID>>of(modifiedByIds);
  }


  public WorkItemFilterModel states(Set<WorkItemStates> states) {
    this.states = JsonNullable.<Set<WorkItemStates>>of(states);
    return this;
  }

  public WorkItemFilterModel addStatesItem(WorkItemStates statesItem) {
    if (this.states == null || !this.states.isPresent()) {
      this.states = JsonNullable.<Set<WorkItemStates>>of(new LinkedHashSet<>());
    }
    try {
      this.states.get().add(statesItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Collection of states of work item
   * @return states
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Collection of states of work item")
  @JsonIgnore

  public Set<WorkItemStates> getStates() {
        return states.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_STATES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Set<WorkItemStates>> getStates_JsonNullable() {
    return states;
  }
  
  @JsonProperty(JSON_PROPERTY_STATES)
  public void setStates_JsonNullable(JsonNullable<Set<WorkItemStates>> states) {
    this.states = states;
  }

  public void setStates(Set<WorkItemStates> states) {
    this.states = JsonNullable.<Set<WorkItemStates>>of(states);
  }


  public WorkItemFilterModel priorities(Set<WorkItemPriorityModel> priorities) {
    this.priorities = JsonNullable.<Set<WorkItemPriorityModel>>of(priorities);
    return this;
  }

  public WorkItemFilterModel addPrioritiesItem(WorkItemPriorityModel prioritiesItem) {
    if (this.priorities == null || !this.priorities.isPresent()) {
      this.priorities = JsonNullable.<Set<WorkItemPriorityModel>>of(new LinkedHashSet<>());
    }
    try {
      this.priorities.get().add(prioritiesItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Collection of priorities of work item
   * @return priorities
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Collection of priorities of work item")
  @JsonIgnore

  public Set<WorkItemPriorityModel> getPriorities() {
        return priorities.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PRIORITIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Set<WorkItemPriorityModel>> getPriorities_JsonNullable() {
    return priorities;
  }
  
  @JsonProperty(JSON_PROPERTY_PRIORITIES)
  public void setPriorities_JsonNullable(JsonNullable<Set<WorkItemPriorityModel>> priorities) {
    this.priorities = priorities;
  }

  public void setPriorities(Set<WorkItemPriorityModel> priorities) {
    this.priorities = JsonNullable.<Set<WorkItemPriorityModel>>of(priorities);
  }


  public WorkItemFilterModel entityTypes(Set<String> entityTypes) {
    this.entityTypes = JsonNullable.<Set<String>>of(entityTypes);
    return this;
  }

  public WorkItemFilterModel addEntityTypesItem(String entityTypesItem) {
    if (this.entityTypes == null || !this.entityTypes.isPresent()) {
      this.entityTypes = JsonNullable.<Set<String>>of(new LinkedHashSet<>());
    }
    try {
      this.entityTypes.get().add(entityTypesItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Collection of types of work item  &lt;br&gt;Allowed values: &#x60;TestCases&#x60;, &#x60;CheckLists&#x60;, &#x60;SharedSteps&#x60;
   * @return entityTypes
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Collection of types of work item  <br>Allowed values: `TestCases`, `CheckLists`, `SharedSteps`")
  @JsonIgnore

  public Set<String> getEntityTypes() {
        return entityTypes.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ENTITY_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Set<String>> getEntityTypes_JsonNullable() {
    return entityTypes;
  }
  
  @JsonProperty(JSON_PROPERTY_ENTITY_TYPES)
  public void setEntityTypes_JsonNullable(JsonNullable<Set<String>> entityTypes) {
    this.entityTypes = entityTypes;
  }

  public void setEntityTypes(Set<String> entityTypes) {
    this.entityTypes = JsonNullable.<Set<String>>of(entityTypes);
  }


  public WorkItemFilterModel createdDateMinimal(OffsetDateTime createdDateMinimal) {
    this.createdDateMinimal = JsonNullable.<OffsetDateTime>of(createdDateMinimal);
    return this;
  }

   /**
   * Minimum date and time of work item creation
   * @return createdDateMinimal
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Minimum date and time of work item creation")
  @JsonIgnore

  public OffsetDateTime getCreatedDateMinimal() {
        return createdDateMinimal.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CREATED_DATE_MINIMAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getCreatedDateMinimal_JsonNullable() {
    return createdDateMinimal;
  }
  
  @JsonProperty(JSON_PROPERTY_CREATED_DATE_MINIMAL)
  public void setCreatedDateMinimal_JsonNullable(JsonNullable<OffsetDateTime> createdDateMinimal) {
    this.createdDateMinimal = createdDateMinimal;
  }

  public void setCreatedDateMinimal(OffsetDateTime createdDateMinimal) {
    this.createdDateMinimal = JsonNullable.<OffsetDateTime>of(createdDateMinimal);
  }


  public WorkItemFilterModel createdDateMaximal(OffsetDateTime createdDateMaximal) {
    this.createdDateMaximal = JsonNullable.<OffsetDateTime>of(createdDateMaximal);
    return this;
  }

   /**
   * Maximum date and time of work item creation
   * @return createdDateMaximal
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Maximum date and time of work item creation")
  @JsonIgnore

  public OffsetDateTime getCreatedDateMaximal() {
        return createdDateMaximal.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CREATED_DATE_MAXIMAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getCreatedDateMaximal_JsonNullable() {
    return createdDateMaximal;
  }
  
  @JsonProperty(JSON_PROPERTY_CREATED_DATE_MAXIMAL)
  public void setCreatedDateMaximal_JsonNullable(JsonNullable<OffsetDateTime> createdDateMaximal) {
    this.createdDateMaximal = createdDateMaximal;
  }

  public void setCreatedDateMaximal(OffsetDateTime createdDateMaximal) {
    this.createdDateMaximal = JsonNullable.<OffsetDateTime>of(createdDateMaximal);
  }


  public WorkItemFilterModel modifiedDateMinimal(OffsetDateTime modifiedDateMinimal) {
    this.modifiedDateMinimal = JsonNullable.<OffsetDateTime>of(modifiedDateMinimal);
    return this;
  }

   /**
   * Minimum date and time of work item last modification
   * @return modifiedDateMinimal
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Minimum date and time of work item last modification")
  @JsonIgnore

  public OffsetDateTime getModifiedDateMinimal() {
        return modifiedDateMinimal.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MODIFIED_DATE_MINIMAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getModifiedDateMinimal_JsonNullable() {
    return modifiedDateMinimal;
  }
  
  @JsonProperty(JSON_PROPERTY_MODIFIED_DATE_MINIMAL)
  public void setModifiedDateMinimal_JsonNullable(JsonNullable<OffsetDateTime> modifiedDateMinimal) {
    this.modifiedDateMinimal = modifiedDateMinimal;
  }

  public void setModifiedDateMinimal(OffsetDateTime modifiedDateMinimal) {
    this.modifiedDateMinimal = JsonNullable.<OffsetDateTime>of(modifiedDateMinimal);
  }


  public WorkItemFilterModel modifiedDateMaximal(OffsetDateTime modifiedDateMaximal) {
    this.modifiedDateMaximal = JsonNullable.<OffsetDateTime>of(modifiedDateMaximal);
    return this;
  }

   /**
   * Maximum date and time of work item last modification
   * @return modifiedDateMaximal
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Maximum date and time of work item last modification")
  @JsonIgnore

  public OffsetDateTime getModifiedDateMaximal() {
        return modifiedDateMaximal.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MODIFIED_DATE_MAXIMAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getModifiedDateMaximal_JsonNullable() {
    return modifiedDateMaximal;
  }
  
  @JsonProperty(JSON_PROPERTY_MODIFIED_DATE_MAXIMAL)
  public void setModifiedDateMaximal_JsonNullable(JsonNullable<OffsetDateTime> modifiedDateMaximal) {
    this.modifiedDateMaximal = modifiedDateMaximal;
  }

  public void setModifiedDateMaximal(OffsetDateTime modifiedDateMaximal) {
    this.modifiedDateMaximal = JsonNullable.<OffsetDateTime>of(modifiedDateMaximal);
  }


  public WorkItemFilterModel durationMinimal(Integer durationMinimal) {
    this.durationMinimal = JsonNullable.<Integer>of(durationMinimal);
    return this;
  }

   /**
   * Minimum completion time (seconds) of work item
   * @return durationMinimal
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Minimum completion time (seconds) of work item")
  @JsonIgnore

  public Integer getDurationMinimal() {
        return durationMinimal.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DURATION_MINIMAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getDurationMinimal_JsonNullable() {
    return durationMinimal;
  }
  
  @JsonProperty(JSON_PROPERTY_DURATION_MINIMAL)
  public void setDurationMinimal_JsonNullable(JsonNullable<Integer> durationMinimal) {
    this.durationMinimal = durationMinimal;
  }

  public void setDurationMinimal(Integer durationMinimal) {
    this.durationMinimal = JsonNullable.<Integer>of(durationMinimal);
  }


  public WorkItemFilterModel durationMaximal(Integer durationMaximal) {
    this.durationMaximal = JsonNullable.<Integer>of(durationMaximal);
    return this;
  }

   /**
   * Maximum completion time (seconds) of work item
   * @return durationMaximal
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Maximum completion time (seconds) of work item")
  @JsonIgnore

  public Integer getDurationMaximal() {
        return durationMaximal.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DURATION_MAXIMAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getDurationMaximal_JsonNullable() {
    return durationMaximal;
  }
  
  @JsonProperty(JSON_PROPERTY_DURATION_MAXIMAL)
  public void setDurationMaximal_JsonNullable(JsonNullable<Integer> durationMaximal) {
    this.durationMaximal = durationMaximal;
  }

  public void setDurationMaximal(Integer durationMaximal) {
    this.durationMaximal = JsonNullable.<Integer>of(durationMaximal);
  }


  public WorkItemFilterModel isAutomated(Boolean isAutomated) {
    this.isAutomated = JsonNullable.<Boolean>of(isAutomated);
    return this;
  }

   /**
   * Is result must consist of only manual/automated work items
   * @return isAutomated
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Is result must consist of only manual/automated work items")
  @JsonIgnore

  public Boolean getIsAutomated() {
        return isAutomated.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_IS_AUTOMATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getIsAutomated_JsonNullable() {
    return isAutomated;
  }
  
  @JsonProperty(JSON_PROPERTY_IS_AUTOMATED)
  public void setIsAutomated_JsonNullable(JsonNullable<Boolean> isAutomated) {
    this.isAutomated = isAutomated;
  }

  public void setIsAutomated(Boolean isAutomated) {
    this.isAutomated = JsonNullable.<Boolean>of(isAutomated);
  }


  public WorkItemFilterModel tagNames(Set<String> tagNames) {
    this.tagNames = JsonNullable.<Set<String>>of(tagNames);
    return this;
  }

  public WorkItemFilterModel addTagNamesItem(String tagNamesItem) {
    if (this.tagNames == null || !this.tagNames.isPresent()) {
      this.tagNames = JsonNullable.<Set<String>>of(new LinkedHashSet<>());
    }
    try {
      this.tagNames.get().add(tagNamesItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Collection of tags
   * @return tagNames
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Collection of tags")
  @JsonIgnore

  public Set<String> getTagNames() {
        return tagNames.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TAG_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Set<String>> getTagNames_JsonNullable() {
    return tagNames;
  }
  
  @JsonProperty(JSON_PROPERTY_TAG_NAMES)
  public void setTagNames_JsonNullable(JsonNullable<Set<String>> tagNames) {
    this.tagNames = tagNames;
  }

  public void setTagNames(Set<String> tagNames) {
    this.tagNames = JsonNullable.<Set<String>>of(tagNames);
  }


  public WorkItemFilterModel autoTestIds(Set<UUID> autoTestIds) {
    this.autoTestIds = JsonNullable.<Set<UUID>>of(autoTestIds);
    return this;
  }

  public WorkItemFilterModel addAutoTestIdsItem(UUID autoTestIdsItem) {
    if (this.autoTestIds == null || !this.autoTestIds.isPresent()) {
      this.autoTestIds = JsonNullable.<Set<UUID>>of(new LinkedHashSet<>());
    }
    try {
      this.autoTestIds.get().add(autoTestIdsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Collection of identifiers of linked autotests
   * @return autoTestIds
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Collection of identifiers of linked autotests")
  @JsonIgnore

  public Set<UUID> getAutoTestIds() {
        return autoTestIds.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AUTO_TEST_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Set<UUID>> getAutoTestIds_JsonNullable() {
    return autoTestIds;
  }
  
  @JsonProperty(JSON_PROPERTY_AUTO_TEST_IDS)
  public void setAutoTestIds_JsonNullable(JsonNullable<Set<UUID>> autoTestIds) {
    this.autoTestIds = autoTestIds;
  }

  public void setAutoTestIds(Set<UUID> autoTestIds) {
    this.autoTestIds = JsonNullable.<Set<UUID>>of(autoTestIds);
  }


  public WorkItemFilterModel exceptWorkItemIds(Set<UUID> exceptWorkItemIds) {
    this.exceptWorkItemIds = JsonNullable.<Set<UUID>>of(exceptWorkItemIds);
    return this;
  }

  public WorkItemFilterModel addExceptWorkItemIdsItem(UUID exceptWorkItemIdsItem) {
    if (this.exceptWorkItemIds == null || !this.exceptWorkItemIds.isPresent()) {
      this.exceptWorkItemIds = JsonNullable.<Set<UUID>>of(new LinkedHashSet<>());
    }
    try {
      this.exceptWorkItemIds.get().add(exceptWorkItemIdsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Get exceptWorkItemIds
   * @return exceptWorkItemIds
   * @deprecated
  **/
  @Deprecated
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public Set<UUID> getExceptWorkItemIds() {
        return exceptWorkItemIds.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EXCEPT_WORK_ITEM_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Set<UUID>> getExceptWorkItemIds_JsonNullable() {
    return exceptWorkItemIds;
  }
  
  @JsonProperty(JSON_PROPERTY_EXCEPT_WORK_ITEM_IDS)
  public void setExceptWorkItemIds_JsonNullable(JsonNullable<Set<UUID>> exceptWorkItemIds) {
    this.exceptWorkItemIds = exceptWorkItemIds;
  }

  public void setExceptWorkItemIds(Set<UUID> exceptWorkItemIds) {
    this.exceptWorkItemIds = JsonNullable.<Set<UUID>>of(exceptWorkItemIds);
  }


  /**
   * Return true if this WorkItemFilterModel object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkItemFilterModel workItemFilterModel = (WorkItemFilterModel) o;
    return equalsNullable(this.nameOrId, workItemFilterModel.nameOrId) &&
        equalsNullable(this.includeIds, workItemFilterModel.includeIds) &&
        equalsNullable(this.excludeIds, workItemFilterModel.excludeIds) &&
        equalsNullable(this.name, workItemFilterModel.name) &&
        equalsNullable(this.globalIds, workItemFilterModel.globalIds) &&
        equalsNullable(this.attributes, workItemFilterModel.attributes) &&
        equalsNullable(this.isDeleted, workItemFilterModel.isDeleted) &&
        equalsNullable(this.projectIds, workItemFilterModel.projectIds) &&
        equalsNullable(this.sectionIds, workItemFilterModel.sectionIds) &&
        equalsNullable(this.createdByIds, workItemFilterModel.createdByIds) &&
        equalsNullable(this.modifiedByIds, workItemFilterModel.modifiedByIds) &&
        equalsNullable(this.states, workItemFilterModel.states) &&
        equalsNullable(this.priorities, workItemFilterModel.priorities) &&
        equalsNullable(this.entityTypes, workItemFilterModel.entityTypes) &&
        equalsNullable(this.createdDateMinimal, workItemFilterModel.createdDateMinimal) &&
        equalsNullable(this.createdDateMaximal, workItemFilterModel.createdDateMaximal) &&
        equalsNullable(this.modifiedDateMinimal, workItemFilterModel.modifiedDateMinimal) &&
        equalsNullable(this.modifiedDateMaximal, workItemFilterModel.modifiedDateMaximal) &&
        equalsNullable(this.durationMinimal, workItemFilterModel.durationMinimal) &&
        equalsNullable(this.durationMaximal, workItemFilterModel.durationMaximal) &&
        equalsNullable(this.isAutomated, workItemFilterModel.isAutomated) &&
        equalsNullable(this.tagNames, workItemFilterModel.tagNames) &&
        equalsNullable(this.autoTestIds, workItemFilterModel.autoTestIds) &&
        equalsNullable(this.exceptWorkItemIds, workItemFilterModel.exceptWorkItemIds);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(nameOrId), hashCodeNullable(includeIds), hashCodeNullable(excludeIds), hashCodeNullable(name), hashCodeNullable(globalIds), hashCodeNullable(attributes), hashCodeNullable(isDeleted), hashCodeNullable(projectIds), hashCodeNullable(sectionIds), hashCodeNullable(createdByIds), hashCodeNullable(modifiedByIds), hashCodeNullable(states), hashCodeNullable(priorities), hashCodeNullable(entityTypes), hashCodeNullable(createdDateMinimal), hashCodeNullable(createdDateMaximal), hashCodeNullable(modifiedDateMinimal), hashCodeNullable(modifiedDateMaximal), hashCodeNullable(durationMinimal), hashCodeNullable(durationMaximal), hashCodeNullable(isAutomated), hashCodeNullable(tagNames), hashCodeNullable(autoTestIds), hashCodeNullable(exceptWorkItemIds));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkItemFilterModel {\n");
    sb.append("    nameOrId: ").append(toIndentedString(nameOrId)).append("\n");
    sb.append("    includeIds: ").append(toIndentedString(includeIds)).append("\n");
    sb.append("    excludeIds: ").append(toIndentedString(excludeIds)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    globalIds: ").append(toIndentedString(globalIds)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
    sb.append("    projectIds: ").append(toIndentedString(projectIds)).append("\n");
    sb.append("    sectionIds: ").append(toIndentedString(sectionIds)).append("\n");
    sb.append("    createdByIds: ").append(toIndentedString(createdByIds)).append("\n");
    sb.append("    modifiedByIds: ").append(toIndentedString(modifiedByIds)).append("\n");
    sb.append("    states: ").append(toIndentedString(states)).append("\n");
    sb.append("    priorities: ").append(toIndentedString(priorities)).append("\n");
    sb.append("    entityTypes: ").append(toIndentedString(entityTypes)).append("\n");
    sb.append("    createdDateMinimal: ").append(toIndentedString(createdDateMinimal)).append("\n");
    sb.append("    createdDateMaximal: ").append(toIndentedString(createdDateMaximal)).append("\n");
    sb.append("    modifiedDateMinimal: ").append(toIndentedString(modifiedDateMinimal)).append("\n");
    sb.append("    modifiedDateMaximal: ").append(toIndentedString(modifiedDateMaximal)).append("\n");
    sb.append("    durationMinimal: ").append(toIndentedString(durationMinimal)).append("\n");
    sb.append("    durationMaximal: ").append(toIndentedString(durationMaximal)).append("\n");
    sb.append("    isAutomated: ").append(toIndentedString(isAutomated)).append("\n");
    sb.append("    tagNames: ").append(toIndentedString(tagNames)).append("\n");
    sb.append("    autoTestIds: ").append(toIndentedString(autoTestIds)).append("\n");
    sb.append("    exceptWorkItemIds: ").append(toIndentedString(exceptWorkItemIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

