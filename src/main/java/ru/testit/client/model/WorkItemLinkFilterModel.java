/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.openapitools.jackson.nullable.JsonNullable;
import ru.testit.client.model.LinkType;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import ru.testit.client.invoker.JSON;


/**
 * WorkItemLinkFilterModel
 */
@JsonPropertyOrder({
  WorkItemLinkFilterModel.JSON_PROPERTY_TYPES,
  WorkItemLinkFilterModel.JSON_PROPERTY_TITLE,
  WorkItemLinkFilterModel.JSON_PROPERTY_URLS,
  WorkItemLinkFilterModel.JSON_PROPERTY_ONLY_WITHOUT_LINKS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0")
public class WorkItemLinkFilterModel {
  public static final String JSON_PROPERTY_TYPES = "types";
  private JsonNullable<List<LinkType>> types = JsonNullable.<List<LinkType>>undefined();

  public static final String JSON_PROPERTY_TITLE = "title";
  private JsonNullable<String> title = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_URLS = "urls";
  private JsonNullable<Set<String>> urls = JsonNullable.<Set<String>>undefined();

  public static final String JSON_PROPERTY_ONLY_WITHOUT_LINKS = "onlyWithoutLinks";
  private JsonNullable<Boolean> onlyWithoutLinks = JsonNullable.<Boolean>undefined();

  public WorkItemLinkFilterModel() { 
  }

  public WorkItemLinkFilterModel types(List<LinkType> types) {
    this.types = JsonNullable.<List<LinkType>>of(types);
    return this;
  }

  public WorkItemLinkFilterModel addTypesItem(LinkType typesItem) {
    if (this.types == null || !this.types.isPresent()) {
      this.types = JsonNullable.<List<LinkType>>of(new ArrayList<>());
    }
    try {
      this.types.get().add(typesItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Get types
   * @return types
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public List<LinkType> getTypes() {
        return types.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<LinkType>> getTypes_JsonNullable() {
    return types;
  }
  
  @JsonProperty(JSON_PROPERTY_TYPES)
  public void setTypes_JsonNullable(JsonNullable<List<LinkType>> types) {
    this.types = types;
  }

  public void setTypes(List<LinkType> types) {
    this.types = JsonNullable.<List<LinkType>>of(types);
  }


  public WorkItemLinkFilterModel title(String title) {
    this.title = JsonNullable.<String>of(title);
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public String getTitle() {
        return title.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getTitle_JsonNullable() {
    return title;
  }
  
  @JsonProperty(JSON_PROPERTY_TITLE)
  public void setTitle_JsonNullable(JsonNullable<String> title) {
    this.title = title;
  }

  public void setTitle(String title) {
    this.title = JsonNullable.<String>of(title);
  }


  public WorkItemLinkFilterModel urls(Set<String> urls) {
    this.urls = JsonNullable.<Set<String>>of(urls);
    return this;
  }

  public WorkItemLinkFilterModel addUrlsItem(String urlsItem) {
    if (this.urls == null || !this.urls.isPresent()) {
      this.urls = JsonNullable.<Set<String>>of(new LinkedHashSet<>());
    }
    try {
      this.urls.get().add(urlsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Get urls
   * @return urls
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Set<String> getUrls() {
        return urls.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_URLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Set<String>> getUrls_JsonNullable() {
    return urls;
  }
  
  @JsonProperty(JSON_PROPERTY_URLS)
  public void setUrls_JsonNullable(JsonNullable<Set<String>> urls) {
    this.urls = urls;
  }

  public void setUrls(Set<String> urls) {
    this.urls = JsonNullable.<Set<String>>of(urls);
  }


  public WorkItemLinkFilterModel onlyWithoutLinks(Boolean onlyWithoutLinks) {
    this.onlyWithoutLinks = JsonNullable.<Boolean>of(onlyWithoutLinks);
    return this;
  }

  /**
   * Get onlyWithoutLinks
   * @return onlyWithoutLinks
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Boolean getOnlyWithoutLinks() {
        return onlyWithoutLinks.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ONLY_WITHOUT_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getOnlyWithoutLinks_JsonNullable() {
    return onlyWithoutLinks;
  }
  
  @JsonProperty(JSON_PROPERTY_ONLY_WITHOUT_LINKS)
  public void setOnlyWithoutLinks_JsonNullable(JsonNullable<Boolean> onlyWithoutLinks) {
    this.onlyWithoutLinks = onlyWithoutLinks;
  }

  public void setOnlyWithoutLinks(Boolean onlyWithoutLinks) {
    this.onlyWithoutLinks = JsonNullable.<Boolean>of(onlyWithoutLinks);
  }


  /**
   * Return true if this WorkItemLinkFilterModel object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkItemLinkFilterModel workItemLinkFilterModel = (WorkItemLinkFilterModel) o;
    return equalsNullable(this.types, workItemLinkFilterModel.types) &&
        equalsNullable(this.title, workItemLinkFilterModel.title) &&
        equalsNullable(this.urls, workItemLinkFilterModel.urls) &&
        equalsNullable(this.onlyWithoutLinks, workItemLinkFilterModel.onlyWithoutLinks);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(types), hashCodeNullable(title), hashCodeNullable(urls), hashCodeNullable(onlyWithoutLinks));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkItemLinkFilterModel {\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    urls: ").append(toIndentedString(urls)).append("\n");
    sb.append("    onlyWithoutLinks: ").append(toIndentedString(onlyWithoutLinks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

