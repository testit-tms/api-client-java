/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import ru.testit.client.model.AttachmentPutModel;
import ru.testit.client.model.AutoTestIdModel;
import ru.testit.client.model.IterationPutModel;
import ru.testit.client.model.LinkPostModel;
import ru.testit.client.model.StepPutModel;
import ru.testit.client.model.TagShortModel;
import ru.testit.client.model.WorkItemEntityTypes;
import ru.testit.client.model.WorkItemPriorityModel;
import ru.testit.client.model.WorkItemStates;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import ru.testit.client.invoker.JSON;

/**
 * WorkItemPostModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class WorkItemPostModel {
  public static final String SERIALIZED_NAME_ENTITY_TYPE_NAME = "entityTypeName";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE_NAME)
  private WorkItemEntityTypes entityTypeName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private WorkItemStates state;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private WorkItemPriorityModel priority;

  public static final String SERIALIZED_NAME_STEPS = "steps";
  @SerializedName(SERIALIZED_NAME_STEPS)
  private List<StepPutModel> steps = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRECONDITION_STEPS = "preconditionSteps";
  @SerializedName(SERIALIZED_NAME_PRECONDITION_STEPS)
  private List<StepPutModel> preconditionSteps = new ArrayList<>();

  public static final String SERIALIZED_NAME_POSTCONDITION_STEPS = "postconditionSteps";
  @SerializedName(SERIALIZED_NAME_POSTCONDITION_STEPS)
  private List<StepPutModel> postconditionSteps = new ArrayList<>();

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Map<String, Object> attributes = new HashMap<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<TagShortModel> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<AttachmentPutModel> attachments = null;

  public static final String SERIALIZED_NAME_ITERATIONS = "iterations";
  @SerializedName(SERIALIZED_NAME_ITERATIONS)
  private List<IterationPutModel> iterations = null;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<LinkPostModel> links = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private UUID projectId;

  public static final String SERIALIZED_NAME_SECTION_ID = "sectionId";
  @SerializedName(SERIALIZED_NAME_SECTION_ID)
  private UUID sectionId;

  public static final String SERIALIZED_NAME_AUTO_TESTS = "autoTests";
  @SerializedName(SERIALIZED_NAME_AUTO_TESTS)
  private List<AutoTestIdModel> autoTests = null;

  public WorkItemPostModel() {
  }

  public WorkItemPostModel entityTypeName(WorkItemEntityTypes entityTypeName) {
    
    this.entityTypeName = entityTypeName;
    return this;
  }

   /**
   * Get entityTypeName
   * @return entityTypeName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public WorkItemEntityTypes getEntityTypeName() {
    return entityTypeName;
  }


  public void setEntityTypeName(WorkItemEntityTypes entityTypeName) {
    this.entityTypeName = entityTypeName;
  }


  public WorkItemPostModel description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "This is a basic test template", value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public WorkItemPostModel state(WorkItemStates state) {
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public WorkItemStates getState() {
    return state;
  }


  public void setState(WorkItemStates state) {
    this.state = state;
  }


  public WorkItemPostModel priority(WorkItemPriorityModel priority) {
    
    this.priority = priority;
    return this;
  }

   /**
   * Get priority
   * @return priority
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public WorkItemPriorityModel getPriority() {
    return priority;
  }


  public void setPriority(WorkItemPriorityModel priority) {
    this.priority = priority;
  }


  public WorkItemPostModel steps(List<StepPutModel> steps) {
    
    this.steps = steps;
    return this;
  }

  public WorkItemPostModel addStepsItem(StepPutModel stepsItem) {
    this.steps.add(stepsItem);
    return this;
  }

   /**
   * Get steps
   * @return steps
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<StepPutModel> getSteps() {
    return steps;
  }


  public void setSteps(List<StepPutModel> steps) {
    this.steps = steps;
  }


  public WorkItemPostModel preconditionSteps(List<StepPutModel> preconditionSteps) {
    
    this.preconditionSteps = preconditionSteps;
    return this;
  }

  public WorkItemPostModel addPreconditionStepsItem(StepPutModel preconditionStepsItem) {
    this.preconditionSteps.add(preconditionStepsItem);
    return this;
  }

   /**
   * Get preconditionSteps
   * @return preconditionSteps
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<StepPutModel> getPreconditionSteps() {
    return preconditionSteps;
  }


  public void setPreconditionSteps(List<StepPutModel> preconditionSteps) {
    this.preconditionSteps = preconditionSteps;
  }


  public WorkItemPostModel postconditionSteps(List<StepPutModel> postconditionSteps) {
    
    this.postconditionSteps = postconditionSteps;
    return this;
  }

  public WorkItemPostModel addPostconditionStepsItem(StepPutModel postconditionStepsItem) {
    this.postconditionSteps.add(postconditionStepsItem);
    return this;
  }

   /**
   * Get postconditionSteps
   * @return postconditionSteps
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<StepPutModel> getPostconditionSteps() {
    return postconditionSteps;
  }


  public void setPostconditionSteps(List<StepPutModel> postconditionSteps) {
    this.postconditionSteps = postconditionSteps;
  }


  public WorkItemPostModel duration(Integer duration) {
    
    this.duration = duration;
    return this;
  }

   /**
   * Must be 0 for shared steps and greater than 0 for the other types of work items
   * minimum: 0
   * maximum: 86400
   * @return duration
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "10000", required = true, value = "Must be 0 for shared steps and greater than 0 for the other types of work items")

  public Integer getDuration() {
    return duration;
  }


  public void setDuration(Integer duration) {
    this.duration = duration;
  }


  public WorkItemPostModel attributes(Map<String, Object> attributes) {
    
    this.attributes = attributes;
    return this;
  }

  public WorkItemPostModel putAttributesItem(String key, Object attributesItem) {
    this.attributes.put(key, attributesItem);
    return this;
  }

   /**
   * Get attributes
   * @return attributes
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Map<String, Object> getAttributes() {
    return attributes;
  }


  public void setAttributes(Map<String, Object> attributes) {
    this.attributes = attributes;
  }


  public WorkItemPostModel tags(List<TagShortModel> tags) {
    
    this.tags = tags;
    return this;
  }

  public WorkItemPostModel addTagsItem(TagShortModel tagsItem) {
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<TagShortModel> getTags() {
    return tags;
  }


  public void setTags(List<TagShortModel> tags) {
    this.tags = tags;
  }


  public WorkItemPostModel attachments(List<AttachmentPutModel> attachments) {
    
    this.attachments = attachments;
    return this;
  }

  public WorkItemPostModel addAttachmentsItem(AttachmentPutModel attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

   /**
   * Get attachments
   * @return attachments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<AttachmentPutModel> getAttachments() {
    return attachments;
  }


  public void setAttachments(List<AttachmentPutModel> attachments) {
    this.attachments = attachments;
  }


  public WorkItemPostModel iterations(List<IterationPutModel> iterations) {
    
    this.iterations = iterations;
    return this;
  }

  public WorkItemPostModel addIterationsItem(IterationPutModel iterationsItem) {
    if (this.iterations == null) {
      this.iterations = new ArrayList<>();
    }
    this.iterations.add(iterationsItem);
    return this;
  }

   /**
   * Get iterations
   * @return iterations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<IterationPutModel> getIterations() {
    return iterations;
  }


  public void setIterations(List<IterationPutModel> iterations) {
    this.iterations = iterations;
  }


  public WorkItemPostModel links(List<LinkPostModel> links) {
    
    this.links = links;
    return this;
  }

  public WorkItemPostModel addLinksItem(LinkPostModel linksItem) {
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<LinkPostModel> getLinks() {
    return links;
  }


  public void setLinks(List<LinkPostModel> links) {
    this.links = links;
  }


  public WorkItemPostModel name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Basic template", required = true, value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public WorkItemPostModel projectId(UUID projectId) {
    
    this.projectId = projectId;
    return this;
  }

   /**
   * This property is used to link workitem with project
   * @return projectId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "9f19cda3-c1e5-4922-8e26-50dd59f8b0b7", required = true, value = "This property is used to link workitem with project")

  public UUID getProjectId() {
    return projectId;
  }


  public void setProjectId(UUID projectId) {
    this.projectId = projectId;
  }


  public WorkItemPostModel sectionId(UUID sectionId) {
    
    this.sectionId = sectionId;
    return this;
  }

   /**
   * Get sectionId
   * @return sectionId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "9f19cda3-c1e5-4922-8e26-50dd59f8b0b7", required = true, value = "")

  public UUID getSectionId() {
    return sectionId;
  }


  public void setSectionId(UUID sectionId) {
    this.sectionId = sectionId;
  }


  public WorkItemPostModel autoTests(List<AutoTestIdModel> autoTests) {
    
    this.autoTests = autoTests;
    return this;
  }

  public WorkItemPostModel addAutoTestsItem(AutoTestIdModel autoTestsItem) {
    if (this.autoTests == null) {
      this.autoTests = new ArrayList<>();
    }
    this.autoTests.add(autoTestsItem);
    return this;
  }

   /**
   * Get autoTests
   * @return autoTests
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<AutoTestIdModel> getAutoTests() {
    return autoTests;
  }


  public void setAutoTests(List<AutoTestIdModel> autoTests) {
    this.autoTests = autoTests;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkItemPostModel workItemPostModel = (WorkItemPostModel) o;
    return Objects.equals(this.entityTypeName, workItemPostModel.entityTypeName) &&
        Objects.equals(this.description, workItemPostModel.description) &&
        Objects.equals(this.state, workItemPostModel.state) &&
        Objects.equals(this.priority, workItemPostModel.priority) &&
        Objects.equals(this.steps, workItemPostModel.steps) &&
        Objects.equals(this.preconditionSteps, workItemPostModel.preconditionSteps) &&
        Objects.equals(this.postconditionSteps, workItemPostModel.postconditionSteps) &&
        Objects.equals(this.duration, workItemPostModel.duration) &&
        Objects.equals(this.attributes, workItemPostModel.attributes) &&
        Objects.equals(this.tags, workItemPostModel.tags) &&
        Objects.equals(this.attachments, workItemPostModel.attachments) &&
        Objects.equals(this.iterations, workItemPostModel.iterations) &&
        Objects.equals(this.links, workItemPostModel.links) &&
        Objects.equals(this.name, workItemPostModel.name) &&
        Objects.equals(this.projectId, workItemPostModel.projectId) &&
        Objects.equals(this.sectionId, workItemPostModel.sectionId) &&
        Objects.equals(this.autoTests, workItemPostModel.autoTests);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(entityTypeName, description, state, priority, steps, preconditionSteps, postconditionSteps, duration, attributes, tags, attachments, iterations, links, name, projectId, sectionId, autoTests);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkItemPostModel {\n");
    sb.append("    entityTypeName: ").append(toIndentedString(entityTypeName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    steps: ").append(toIndentedString(steps)).append("\n");
    sb.append("    preconditionSteps: ").append(toIndentedString(preconditionSteps)).append("\n");
    sb.append("    postconditionSteps: ").append(toIndentedString(postconditionSteps)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    iterations: ").append(toIndentedString(iterations)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    sectionId: ").append(toIndentedString(sectionId)).append("\n");
    sb.append("    autoTests: ").append(toIndentedString(autoTests)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entityTypeName");
    openapiFields.add("description");
    openapiFields.add("state");
    openapiFields.add("priority");
    openapiFields.add("steps");
    openapiFields.add("preconditionSteps");
    openapiFields.add("postconditionSteps");
    openapiFields.add("duration");
    openapiFields.add("attributes");
    openapiFields.add("tags");
    openapiFields.add("attachments");
    openapiFields.add("iterations");
    openapiFields.add("links");
    openapiFields.add("name");
    openapiFields.add("projectId");
    openapiFields.add("sectionId");
    openapiFields.add("autoTests");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("entityTypeName");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("priority");
    openapiRequiredFields.add("steps");
    openapiRequiredFields.add("preconditionSteps");
    openapiRequiredFields.add("postconditionSteps");
    openapiRequiredFields.add("duration");
    openapiRequiredFields.add("attributes");
    openapiRequiredFields.add("tags");
    openapiRequiredFields.add("links");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("projectId");
    openapiRequiredFields.add("sectionId");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WorkItemPostModel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!WorkItemPostModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkItemPostModel is not found in the empty JSON string", WorkItemPostModel.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!WorkItemPostModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkItemPostModel` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WorkItemPostModel.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("steps").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `steps` to be an array in the JSON string but got `%s`", jsonObj.get("steps").toString()));
      }

      JsonArray jsonArraysteps = jsonObj.getAsJsonArray("steps");
      // validate the required field `steps` (array)
      for (int i = 0; i < jsonArraysteps.size(); i++) {
        StepPutModel.validateJsonObject(jsonArraysteps.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("preconditionSteps").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `preconditionSteps` to be an array in the JSON string but got `%s`", jsonObj.get("preconditionSteps").toString()));
      }

      JsonArray jsonArraypreconditionSteps = jsonObj.getAsJsonArray("preconditionSteps");
      // validate the required field `preconditionSteps` (array)
      for (int i = 0; i < jsonArraypreconditionSteps.size(); i++) {
        StepPutModel.validateJsonObject(jsonArraypreconditionSteps.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("postconditionSteps").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `postconditionSteps` to be an array in the JSON string but got `%s`", jsonObj.get("postconditionSteps").toString()));
      }

      JsonArray jsonArraypostconditionSteps = jsonObj.getAsJsonArray("postconditionSteps");
      // validate the required field `postconditionSteps` (array)
      for (int i = 0; i < jsonArraypostconditionSteps.size(); i++) {
        StepPutModel.validateJsonObject(jsonArraypostconditionSteps.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }

      JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
      // validate the required field `tags` (array)
      for (int i = 0; i < jsonArraytags.size(); i++) {
        TagShortModel.validateJsonObject(jsonArraytags.get(i).getAsJsonObject());
      };
      if (jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonNull()) {
        JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("attachments");
        if (jsonArrayattachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
          }

          // validate the optional field `attachments` (array)
          for (int i = 0; i < jsonArrayattachments.size(); i++) {
            AttachmentPutModel.validateJsonObject(jsonArrayattachments.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("iterations") != null && !jsonObj.get("iterations").isJsonNull()) {
        JsonArray jsonArrayiterations = jsonObj.getAsJsonArray("iterations");
        if (jsonArrayiterations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("iterations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `iterations` to be an array in the JSON string but got `%s`", jsonObj.get("iterations").toString()));
          }

          // validate the optional field `iterations` (array)
          for (int i = 0; i < jsonArrayiterations.size(); i++) {
            IterationPutModel.validateJsonObject(jsonArrayiterations.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("links").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
      }

      JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
      // validate the required field `links` (array)
      for (int i = 0; i < jsonArraylinks.size(); i++) {
        LinkPostModel.validateJsonObject(jsonArraylinks.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("projectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectId").toString()));
      }
      if (!jsonObj.get("sectionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sectionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sectionId").toString()));
      }
      if (jsonObj.get("autoTests") != null && !jsonObj.get("autoTests").isJsonNull()) {
        JsonArray jsonArrayautoTests = jsonObj.getAsJsonArray("autoTests");
        if (jsonArrayautoTests != null) {
          // ensure the json data is an array
          if (!jsonObj.get("autoTests").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `autoTests` to be an array in the JSON string but got `%s`", jsonObj.get("autoTests").toString()));
          }

          // validate the optional field `autoTests` (array)
          for (int i = 0; i < jsonArrayautoTests.size(); i++) {
            AutoTestIdModel.validateJsonObject(jsonArrayautoTests.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkItemPostModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkItemPostModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkItemPostModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkItemPostModel.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkItemPostModel>() {
           @Override
           public void write(JsonWriter out, WorkItemPostModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkItemPostModel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WorkItemPostModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WorkItemPostModel
  * @throws IOException if the JSON string is invalid with respect to WorkItemPostModel
  */
  public static WorkItemPostModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkItemPostModel.class);
  }

 /**
  * Convert an instance of WorkItemPostModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

