/*
 * API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ru.testit.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.UUID;
import org.threeten.bp.OffsetDateTime;
import ru.testit.model.NotificationTypeModel;
/**
 * NotificationModel
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-07-05T10:40:26.135191+03:00[Europe/Moscow]")
public class NotificationModel {
  @SerializedName("id")
  private UUID id = null;

  @SerializedName("createdDate")
  private OffsetDateTime createdDate = null;

  @SerializedName("isRead")
  private Boolean isRead = null;

  @SerializedName("entityId")
  private UUID entityId = null;

  @SerializedName("notificationType")
  private NotificationTypeModel notificationType = null;

  @SerializedName("projectGlobalId")
  private Long projectGlobalId = null;

  @SerializedName("projectName")
  private String projectName = null;

  @SerializedName("testPlanGlobalId")
  private Long testPlanGlobalId = null;

  @SerializedName("testPlanName")
  private String testPlanName = null;

  @SerializedName("workitemGlobalId")
  private Long workitemGlobalId = null;

  @SerializedName("comment")
  private String comment = null;

  @SerializedName("workItemName")
  private String workItemName = null;

  @SerializedName("attributeName")
  private String attributeName = null;

  @SerializedName("createdById")
  private UUID createdById = null;

  public NotificationModel id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }

  public NotificationModel createdDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

   /**
   * Get createdDate
   * @return createdDate
  **/
  @Schema(description = "")
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }

  public NotificationModel isRead(Boolean isRead) {
    this.isRead = isRead;
    return this;
  }

   /**
   * Get isRead
   * @return isRead
  **/
  @Schema(description = "")
  public Boolean isIsRead() {
    return isRead;
  }

  public void setIsRead(Boolean isRead) {
    this.isRead = isRead;
  }

  public NotificationModel entityId(UUID entityId) {
    this.entityId = entityId;
    return this;
  }

   /**
   * Get entityId
   * @return entityId
  **/
  @Schema(description = "")
  public UUID getEntityId() {
    return entityId;
  }

  public void setEntityId(UUID entityId) {
    this.entityId = entityId;
  }

  public NotificationModel notificationType(NotificationTypeModel notificationType) {
    this.notificationType = notificationType;
    return this;
  }

   /**
   * Get notificationType
   * @return notificationType
  **/
  @Schema(description = "")
  public NotificationTypeModel getNotificationType() {
    return notificationType;
  }

  public void setNotificationType(NotificationTypeModel notificationType) {
    this.notificationType = notificationType;
  }

  public NotificationModel projectGlobalId(Long projectGlobalId) {
    this.projectGlobalId = projectGlobalId;
    return this;
  }

   /**
   * Get projectGlobalId
   * @return projectGlobalId
  **/
  @Schema(description = "")
  public Long getProjectGlobalId() {
    return projectGlobalId;
  }

  public void setProjectGlobalId(Long projectGlobalId) {
    this.projectGlobalId = projectGlobalId;
  }

  public NotificationModel projectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

   /**
   * Get projectName
   * @return projectName
  **/
  @Schema(description = "")
  public String getProjectName() {
    return projectName;
  }

  public void setProjectName(String projectName) {
    this.projectName = projectName;
  }

  public NotificationModel testPlanGlobalId(Long testPlanGlobalId) {
    this.testPlanGlobalId = testPlanGlobalId;
    return this;
  }

   /**
   * Get testPlanGlobalId
   * @return testPlanGlobalId
  **/
  @Schema(description = "")
  public Long getTestPlanGlobalId() {
    return testPlanGlobalId;
  }

  public void setTestPlanGlobalId(Long testPlanGlobalId) {
    this.testPlanGlobalId = testPlanGlobalId;
  }

  public NotificationModel testPlanName(String testPlanName) {
    this.testPlanName = testPlanName;
    return this;
  }

   /**
   * Get testPlanName
   * @return testPlanName
  **/
  @Schema(description = "")
  public String getTestPlanName() {
    return testPlanName;
  }

  public void setTestPlanName(String testPlanName) {
    this.testPlanName = testPlanName;
  }

  public NotificationModel workitemGlobalId(Long workitemGlobalId) {
    this.workitemGlobalId = workitemGlobalId;
    return this;
  }

   /**
   * Get workitemGlobalId
   * @return workitemGlobalId
  **/
  @Schema(description = "")
  public Long getWorkitemGlobalId() {
    return workitemGlobalId;
  }

  public void setWorkitemGlobalId(Long workitemGlobalId) {
    this.workitemGlobalId = workitemGlobalId;
  }

  public NotificationModel comment(String comment) {
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @Schema(description = "")
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }

  public NotificationModel workItemName(String workItemName) {
    this.workItemName = workItemName;
    return this;
  }

   /**
   * Get workItemName
   * @return workItemName
  **/
  @Schema(description = "")
  public String getWorkItemName() {
    return workItemName;
  }

  public void setWorkItemName(String workItemName) {
    this.workItemName = workItemName;
  }

  public NotificationModel attributeName(String attributeName) {
    this.attributeName = attributeName;
    return this;
  }

   /**
   * Get attributeName
   * @return attributeName
  **/
  @Schema(description = "")
  public String getAttributeName() {
    return attributeName;
  }

  public void setAttributeName(String attributeName) {
    this.attributeName = attributeName;
  }

  public NotificationModel createdById(UUID createdById) {
    this.createdById = createdById;
    return this;
  }

   /**
   * Get createdById
   * @return createdById
  **/
  @Schema(description = "")
  public UUID getCreatedById() {
    return createdById;
  }

  public void setCreatedById(UUID createdById) {
    this.createdById = createdById;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationModel notificationModel = (NotificationModel) o;
    return Objects.equals(this.id, notificationModel.id) &&
        Objects.equals(this.createdDate, notificationModel.createdDate) &&
        Objects.equals(this.isRead, notificationModel.isRead) &&
        Objects.equals(this.entityId, notificationModel.entityId) &&
        Objects.equals(this.notificationType, notificationModel.notificationType) &&
        Objects.equals(this.projectGlobalId, notificationModel.projectGlobalId) &&
        Objects.equals(this.projectName, notificationModel.projectName) &&
        Objects.equals(this.testPlanGlobalId, notificationModel.testPlanGlobalId) &&
        Objects.equals(this.testPlanName, notificationModel.testPlanName) &&
        Objects.equals(this.workitemGlobalId, notificationModel.workitemGlobalId) &&
        Objects.equals(this.comment, notificationModel.comment) &&
        Objects.equals(this.workItemName, notificationModel.workItemName) &&
        Objects.equals(this.attributeName, notificationModel.attributeName) &&
        Objects.equals(this.createdById, notificationModel.createdById);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, createdDate, isRead, entityId, notificationType, projectGlobalId, projectName, testPlanGlobalId, testPlanName, workitemGlobalId, comment, workItemName, attributeName, createdById);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationModel {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    isRead: ").append(toIndentedString(isRead)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    notificationType: ").append(toIndentedString(notificationType)).append("\n");
    sb.append("    projectGlobalId: ").append(toIndentedString(projectGlobalId)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    testPlanGlobalId: ").append(toIndentedString(testPlanGlobalId)).append("\n");
    sb.append("    testPlanName: ").append(toIndentedString(testPlanName)).append("\n");
    sb.append("    workitemGlobalId: ").append(toIndentedString(workitemGlobalId)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    workItemName: ").append(toIndentedString(workItemName)).append("\n");
    sb.append("    attributeName: ").append(toIndentedString(attributeName)).append("\n");
    sb.append("    createdById: ").append(toIndentedString(createdById)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
