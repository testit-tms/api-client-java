/*
 * API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ru.testit.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import ru.testit.model.AutoTestModel;
import ru.testit.model.ConfigurationModel;
import ru.testit.model.PublicTestPointModel;
/**
 * PublicTestRunModel
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-07-05T10:40:26.135191+03:00[Europe/Moscow]")
public class PublicTestRunModel {
  @SerializedName("testRunId")
  private UUID testRunId = null;

  @SerializedName("testPlanId")
  private UUID testPlanId = null;

  @SerializedName("testPlanGlobalId")
  private Long testPlanGlobalId = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("productName")
  private String productName = null;

  @SerializedName("build")
  private String build = null;

  @SerializedName("configurations")
  private List<ConfigurationModel> configurations = null;

  @SerializedName("autoTests")
  private List<AutoTestModel> autoTests = null;

  @SerializedName("testPoints")
  private List<PublicTestPointModel> testPoints = null;

  @SerializedName("status")
  private String status = null;

  public PublicTestRunModel testRunId(UUID testRunId) {
    this.testRunId = testRunId;
    return this;
  }

   /**
   * Get testRunId
   * @return testRunId
  **/
  @Schema(description = "")
  public UUID getTestRunId() {
    return testRunId;
  }

  public void setTestRunId(UUID testRunId) {
    this.testRunId = testRunId;
  }

  public PublicTestRunModel testPlanId(UUID testPlanId) {
    this.testPlanId = testPlanId;
    return this;
  }

   /**
   * Get testPlanId
   * @return testPlanId
  **/
  @Schema(description = "")
  public UUID getTestPlanId() {
    return testPlanId;
  }

  public void setTestPlanId(UUID testPlanId) {
    this.testPlanId = testPlanId;
  }

  public PublicTestRunModel testPlanGlobalId(Long testPlanGlobalId) {
    this.testPlanGlobalId = testPlanGlobalId;
    return this;
  }

   /**
   * Get testPlanGlobalId
   * @return testPlanGlobalId
  **/
  @Schema(description = "")
  public Long getTestPlanGlobalId() {
    return testPlanGlobalId;
  }

  public void setTestPlanGlobalId(Long testPlanGlobalId) {
    this.testPlanGlobalId = testPlanGlobalId;
  }

  public PublicTestRunModel name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public PublicTestRunModel productName(String productName) {
    this.productName = productName;
    return this;
  }

   /**
   * Get productName
   * @return productName
  **/
  @Schema(description = "")
  public String getProductName() {
    return productName;
  }

  public void setProductName(String productName) {
    this.productName = productName;
  }

  public PublicTestRunModel build(String build) {
    this.build = build;
    return this;
  }

   /**
   * Get build
   * @return build
  **/
  @Schema(description = "")
  public String getBuild() {
    return build;
  }

  public void setBuild(String build) {
    this.build = build;
  }

  public PublicTestRunModel configurations(List<ConfigurationModel> configurations) {
    this.configurations = configurations;
    return this;
  }

  public PublicTestRunModel addConfigurationsItem(ConfigurationModel configurationsItem) {
    if (this.configurations == null) {
      this.configurations = new ArrayList<ConfigurationModel>();
    }
    this.configurations.add(configurationsItem);
    return this;
  }

   /**
   * Get configurations
   * @return configurations
  **/
  @Schema(description = "")
  public List<ConfigurationModel> getConfigurations() {
    return configurations;
  }

  public void setConfigurations(List<ConfigurationModel> configurations) {
    this.configurations = configurations;
  }

  public PublicTestRunModel autoTests(List<AutoTestModel> autoTests) {
    this.autoTests = autoTests;
    return this;
  }

  public PublicTestRunModel addAutoTestsItem(AutoTestModel autoTestsItem) {
    if (this.autoTests == null) {
      this.autoTests = new ArrayList<AutoTestModel>();
    }
    this.autoTests.add(autoTestsItem);
    return this;
  }

   /**
   * Get autoTests
   * @return autoTests
  **/
  @Schema(description = "")
  public List<AutoTestModel> getAutoTests() {
    return autoTests;
  }

  public void setAutoTests(List<AutoTestModel> autoTests) {
    this.autoTests = autoTests;
  }

  public PublicTestRunModel testPoints(List<PublicTestPointModel> testPoints) {
    this.testPoints = testPoints;
    return this;
  }

  public PublicTestRunModel addTestPointsItem(PublicTestPointModel testPointsItem) {
    if (this.testPoints == null) {
      this.testPoints = new ArrayList<PublicTestPointModel>();
    }
    this.testPoints.add(testPointsItem);
    return this;
  }

   /**
   * Get testPoints
   * @return testPoints
  **/
  @Schema(description = "")
  public List<PublicTestPointModel> getTestPoints() {
    return testPoints;
  }

  public void setTestPoints(List<PublicTestPointModel> testPoints) {
    this.testPoints = testPoints;
  }

  public PublicTestRunModel status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PublicTestRunModel publicTestRunModel = (PublicTestRunModel) o;
    return Objects.equals(this.testRunId, publicTestRunModel.testRunId) &&
        Objects.equals(this.testPlanId, publicTestRunModel.testPlanId) &&
        Objects.equals(this.testPlanGlobalId, publicTestRunModel.testPlanGlobalId) &&
        Objects.equals(this.name, publicTestRunModel.name) &&
        Objects.equals(this.productName, publicTestRunModel.productName) &&
        Objects.equals(this.build, publicTestRunModel.build) &&
        Objects.equals(this.configurations, publicTestRunModel.configurations) &&
        Objects.equals(this.autoTests, publicTestRunModel.autoTests) &&
        Objects.equals(this.testPoints, publicTestRunModel.testPoints) &&
        Objects.equals(this.status, publicTestRunModel.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(testRunId, testPlanId, testPlanGlobalId, name, productName, build, configurations, autoTests, testPoints, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PublicTestRunModel {\n");
    
    sb.append("    testRunId: ").append(toIndentedString(testRunId)).append("\n");
    sb.append("    testPlanId: ").append(toIndentedString(testPlanId)).append("\n");
    sb.append("    testPlanGlobalId: ").append(toIndentedString(testPlanGlobalId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    productName: ").append(toIndentedString(productName)).append("\n");
    sb.append("    build: ").append(toIndentedString(build)).append("\n");
    sb.append("    configurations: ").append(toIndentedString(configurations)).append("\n");
    sb.append("    autoTests: ").append(toIndentedString(autoTests)).append("\n");
    sb.append("    testPoints: ").append(toIndentedString(testPoints)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
