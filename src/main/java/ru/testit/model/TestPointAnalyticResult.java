/*
 * API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ru.testit.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import ru.testit.model.TestPlanGroupByStatus;
import ru.testit.model.TestPlanGroupByTestSuite;
import ru.testit.model.TestPlanGroupByTester;
import ru.testit.model.TestPlanGroupByTesterAndStatus;
/**
 * TestPointAnalyticResult
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-07-05T10:40:26.135191+03:00[Europe/Moscow]")
public class TestPointAnalyticResult {
  @SerializedName("countGroupByStatus")
  private List<TestPlanGroupByStatus> countGroupByStatus = null;

  @SerializedName("sumGroupByTester")
  private List<TestPlanGroupByTester> sumGroupByTester = null;

  @SerializedName("countGroupByTester")
  private List<TestPlanGroupByTester> countGroupByTester = null;

  @SerializedName("countGroupByTestSuite")
  private List<TestPlanGroupByTestSuite> countGroupByTestSuite = null;

  @SerializedName("countGroupByTesterAndStatus")
  private List<TestPlanGroupByTesterAndStatus> countGroupByTesterAndStatus = null;

  public TestPointAnalyticResult countGroupByStatus(List<TestPlanGroupByStatus> countGroupByStatus) {
    this.countGroupByStatus = countGroupByStatus;
    return this;
  }

  public TestPointAnalyticResult addCountGroupByStatusItem(TestPlanGroupByStatus countGroupByStatusItem) {
    if (this.countGroupByStatus == null) {
      this.countGroupByStatus = new ArrayList<TestPlanGroupByStatus>();
    }
    this.countGroupByStatus.add(countGroupByStatusItem);
    return this;
  }

   /**
   * Get countGroupByStatus
   * @return countGroupByStatus
  **/
  @Schema(description = "")
  public List<TestPlanGroupByStatus> getCountGroupByStatus() {
    return countGroupByStatus;
  }

  public void setCountGroupByStatus(List<TestPlanGroupByStatus> countGroupByStatus) {
    this.countGroupByStatus = countGroupByStatus;
  }

  public TestPointAnalyticResult sumGroupByTester(List<TestPlanGroupByTester> sumGroupByTester) {
    this.sumGroupByTester = sumGroupByTester;
    return this;
  }

  public TestPointAnalyticResult addSumGroupByTesterItem(TestPlanGroupByTester sumGroupByTesterItem) {
    if (this.sumGroupByTester == null) {
      this.sumGroupByTester = new ArrayList<TestPlanGroupByTester>();
    }
    this.sumGroupByTester.add(sumGroupByTesterItem);
    return this;
  }

   /**
   * Get sumGroupByTester
   * @return sumGroupByTester
  **/
  @Schema(description = "")
  public List<TestPlanGroupByTester> getSumGroupByTester() {
    return sumGroupByTester;
  }

  public void setSumGroupByTester(List<TestPlanGroupByTester> sumGroupByTester) {
    this.sumGroupByTester = sumGroupByTester;
  }

  public TestPointAnalyticResult countGroupByTester(List<TestPlanGroupByTester> countGroupByTester) {
    this.countGroupByTester = countGroupByTester;
    return this;
  }

  public TestPointAnalyticResult addCountGroupByTesterItem(TestPlanGroupByTester countGroupByTesterItem) {
    if (this.countGroupByTester == null) {
      this.countGroupByTester = new ArrayList<TestPlanGroupByTester>();
    }
    this.countGroupByTester.add(countGroupByTesterItem);
    return this;
  }

   /**
   * Get countGroupByTester
   * @return countGroupByTester
  **/
  @Schema(description = "")
  public List<TestPlanGroupByTester> getCountGroupByTester() {
    return countGroupByTester;
  }

  public void setCountGroupByTester(List<TestPlanGroupByTester> countGroupByTester) {
    this.countGroupByTester = countGroupByTester;
  }

  public TestPointAnalyticResult countGroupByTestSuite(List<TestPlanGroupByTestSuite> countGroupByTestSuite) {
    this.countGroupByTestSuite = countGroupByTestSuite;
    return this;
  }

  public TestPointAnalyticResult addCountGroupByTestSuiteItem(TestPlanGroupByTestSuite countGroupByTestSuiteItem) {
    if (this.countGroupByTestSuite == null) {
      this.countGroupByTestSuite = new ArrayList<TestPlanGroupByTestSuite>();
    }
    this.countGroupByTestSuite.add(countGroupByTestSuiteItem);
    return this;
  }

   /**
   * Get countGroupByTestSuite
   * @return countGroupByTestSuite
  **/
  @Schema(description = "")
  public List<TestPlanGroupByTestSuite> getCountGroupByTestSuite() {
    return countGroupByTestSuite;
  }

  public void setCountGroupByTestSuite(List<TestPlanGroupByTestSuite> countGroupByTestSuite) {
    this.countGroupByTestSuite = countGroupByTestSuite;
  }

  public TestPointAnalyticResult countGroupByTesterAndStatus(List<TestPlanGroupByTesterAndStatus> countGroupByTesterAndStatus) {
    this.countGroupByTesterAndStatus = countGroupByTesterAndStatus;
    return this;
  }

  public TestPointAnalyticResult addCountGroupByTesterAndStatusItem(TestPlanGroupByTesterAndStatus countGroupByTesterAndStatusItem) {
    if (this.countGroupByTesterAndStatus == null) {
      this.countGroupByTesterAndStatus = new ArrayList<TestPlanGroupByTesterAndStatus>();
    }
    this.countGroupByTesterAndStatus.add(countGroupByTesterAndStatusItem);
    return this;
  }

   /**
   * Get countGroupByTesterAndStatus
   * @return countGroupByTesterAndStatus
  **/
  @Schema(description = "")
  public List<TestPlanGroupByTesterAndStatus> getCountGroupByTesterAndStatus() {
    return countGroupByTesterAndStatus;
  }

  public void setCountGroupByTesterAndStatus(List<TestPlanGroupByTesterAndStatus> countGroupByTesterAndStatus) {
    this.countGroupByTesterAndStatus = countGroupByTesterAndStatus;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestPointAnalyticResult testPointAnalyticResult = (TestPointAnalyticResult) o;
    return Objects.equals(this.countGroupByStatus, testPointAnalyticResult.countGroupByStatus) &&
        Objects.equals(this.sumGroupByTester, testPointAnalyticResult.sumGroupByTester) &&
        Objects.equals(this.countGroupByTester, testPointAnalyticResult.countGroupByTester) &&
        Objects.equals(this.countGroupByTestSuite, testPointAnalyticResult.countGroupByTestSuite) &&
        Objects.equals(this.countGroupByTesterAndStatus, testPointAnalyticResult.countGroupByTesterAndStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countGroupByStatus, sumGroupByTester, countGroupByTester, countGroupByTestSuite, countGroupByTesterAndStatus);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestPointAnalyticResult {\n");
    
    sb.append("    countGroupByStatus: ").append(toIndentedString(countGroupByStatus)).append("\n");
    sb.append("    sumGroupByTester: ").append(toIndentedString(sumGroupByTester)).append("\n");
    sb.append("    countGroupByTester: ").append(toIndentedString(countGroupByTester)).append("\n");
    sb.append("    countGroupByTestSuite: ").append(toIndentedString(countGroupByTestSuite)).append("\n");
    sb.append("    countGroupByTesterAndStatus: ").append(toIndentedString(countGroupByTesterAndStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
