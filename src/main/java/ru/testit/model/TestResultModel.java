/*
 * API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ru.testit.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.threeten.bp.OffsetDateTime;
import ru.testit.model.AttachmentModel;
import ru.testit.model.AttachmentModelAutoTestStepResultsModel;
import ru.testit.model.AutoTestModel;
import ru.testit.model.LinkModel;
import ru.testit.model.StepCommentModel;
import ru.testit.model.StepResultModel;
import ru.testit.model.TestPointPutModel;
/**
 * TestResultModel
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-07-05T10:40:26.135191+03:00[Europe/Moscow]")
public class TestResultModel {
  @SerializedName("autoTestId")
  private UUID autoTestId = null;

  @SerializedName("configurationId")
  private UUID configurationId = null;

  @SerializedName("startedOn")
  private OffsetDateTime startedOn = null;

  @SerializedName("completedOn")
  private OffsetDateTime completedOn = null;

  @SerializedName("durationInMs")
  private Long durationInMs = null;

  @SerializedName("traces")
  private String traces = null;

  @SerializedName("failureType")
  private String failureType = null;

  @SerializedName("message")
  private String message = null;

  @SerializedName("runByUserId")
  private UUID runByUserId = null;

  @SerializedName("stoppedByUserId")
  private UUID stoppedByUserId = null;

  @SerializedName("testPointId")
  private UUID testPointId = null;

  @SerializedName("testRunId")
  private UUID testRunId = null;

  @SerializedName("testPoint")
  private TestPointPutModel testPoint = null;

  @SerializedName("autoTest")
  private AutoTestModel autoTest = null;

  @SerializedName("autoTestStepResults")
  private List<AttachmentModelAutoTestStepResultsModel> autoTestStepResults = null;

  @SerializedName("setupResults")
  private List<AttachmentModelAutoTestStepResultsModel> setupResults = null;

  @SerializedName("teardownResults")
  private List<AttachmentModelAutoTestStepResultsModel> teardownResults = null;

  @SerializedName("workItemVersionId")
  private UUID workItemVersionId = null;

  @SerializedName("workItemVersionNumber")
  private Integer workItemVersionNumber = null;

  @SerializedName("parameters")
  private Map<String, String> parameters = null;

  @SerializedName("properties")
  private Map<String, String> properties = null;

  @SerializedName("id")
  private UUID id = null;

  @SerializedName("createdDate")
  private OffsetDateTime createdDate = null;

  @SerializedName("modifiedDate")
  private OffsetDateTime modifiedDate = null;

  @SerializedName("createdById")
  private UUID createdById = null;

  @SerializedName("modifiedById")
  private UUID modifiedById = null;

  @SerializedName("stepComments")
  private List<StepCommentModel> stepComments = null;

  @SerializedName("failureClassIds")
  private List<UUID> failureClassIds = null;

  @SerializedName("outcome")
  private String outcome = null;

  @SerializedName("comment")
  private String comment = null;

  @SerializedName("links")
  private List<LinkModel> links = null;

  @SerializedName("stepResults")
  private List<StepResultModel> stepResults = null;

  @SerializedName("attachments")
  private List<AttachmentModel> attachments = null;

  public TestResultModel autoTestId(UUID autoTestId) {
    this.autoTestId = autoTestId;
    return this;
  }

   /**
   * Get autoTestId
   * @return autoTestId
  **/
  @Schema(description = "")
  public UUID getAutoTestId() {
    return autoTestId;
  }

  public void setAutoTestId(UUID autoTestId) {
    this.autoTestId = autoTestId;
  }

  public TestResultModel configurationId(UUID configurationId) {
    this.configurationId = configurationId;
    return this;
  }

   /**
   * Get configurationId
   * @return configurationId
  **/
  @Schema(description = "")
  public UUID getConfigurationId() {
    return configurationId;
  }

  public void setConfigurationId(UUID configurationId) {
    this.configurationId = configurationId;
  }

  public TestResultModel startedOn(OffsetDateTime startedOn) {
    this.startedOn = startedOn;
    return this;
  }

   /**
   * Get startedOn
   * @return startedOn
  **/
  @Schema(description = "")
  public OffsetDateTime getStartedOn() {
    return startedOn;
  }

  public void setStartedOn(OffsetDateTime startedOn) {
    this.startedOn = startedOn;
  }

  public TestResultModel completedOn(OffsetDateTime completedOn) {
    this.completedOn = completedOn;
    return this;
  }

   /**
   * Get completedOn
   * @return completedOn
  **/
  @Schema(description = "")
  public OffsetDateTime getCompletedOn() {
    return completedOn;
  }

  public void setCompletedOn(OffsetDateTime completedOn) {
    this.completedOn = completedOn;
  }

  public TestResultModel durationInMs(Long durationInMs) {
    this.durationInMs = durationInMs;
    return this;
  }

   /**
   * Get durationInMs
   * @return durationInMs
  **/
  @Schema(description = "")
  public Long getDurationInMs() {
    return durationInMs;
  }

  public void setDurationInMs(Long durationInMs) {
    this.durationInMs = durationInMs;
  }

  public TestResultModel traces(String traces) {
    this.traces = traces;
    return this;
  }

   /**
   * Get traces
   * @return traces
  **/
  @Schema(description = "")
  public String getTraces() {
    return traces;
  }

  public void setTraces(String traces) {
    this.traces = traces;
  }

  public TestResultModel failureType(String failureType) {
    this.failureType = failureType;
    return this;
  }

   /**
   * Get failureType
   * @return failureType
  **/
  @Schema(description = "")
  public String getFailureType() {
    return failureType;
  }

  public void setFailureType(String failureType) {
    this.failureType = failureType;
  }

  public TestResultModel message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @Schema(description = "")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public TestResultModel runByUserId(UUID runByUserId) {
    this.runByUserId = runByUserId;
    return this;
  }

   /**
   * Get runByUserId
   * @return runByUserId
  **/
  @Schema(description = "")
  public UUID getRunByUserId() {
    return runByUserId;
  }

  public void setRunByUserId(UUID runByUserId) {
    this.runByUserId = runByUserId;
  }

  public TestResultModel stoppedByUserId(UUID stoppedByUserId) {
    this.stoppedByUserId = stoppedByUserId;
    return this;
  }

   /**
   * Get stoppedByUserId
   * @return stoppedByUserId
  **/
  @Schema(description = "")
  public UUID getStoppedByUserId() {
    return stoppedByUserId;
  }

  public void setStoppedByUserId(UUID stoppedByUserId) {
    this.stoppedByUserId = stoppedByUserId;
  }

  public TestResultModel testPointId(UUID testPointId) {
    this.testPointId = testPointId;
    return this;
  }

   /**
   * Get testPointId
   * @return testPointId
  **/
  @Schema(description = "")
  public UUID getTestPointId() {
    return testPointId;
  }

  public void setTestPointId(UUID testPointId) {
    this.testPointId = testPointId;
  }

  public TestResultModel testRunId(UUID testRunId) {
    this.testRunId = testRunId;
    return this;
  }

   /**
   * Get testRunId
   * @return testRunId
  **/
  @Schema(description = "")
  public UUID getTestRunId() {
    return testRunId;
  }

  public void setTestRunId(UUID testRunId) {
    this.testRunId = testRunId;
  }

  public TestResultModel testPoint(TestPointPutModel testPoint) {
    this.testPoint = testPoint;
    return this;
  }

   /**
   * Get testPoint
   * @return testPoint
  **/
  @Schema(description = "")
  public TestPointPutModel getTestPoint() {
    return testPoint;
  }

  public void setTestPoint(TestPointPutModel testPoint) {
    this.testPoint = testPoint;
  }

  public TestResultModel autoTest(AutoTestModel autoTest) {
    this.autoTest = autoTest;
    return this;
  }

   /**
   * Get autoTest
   * @return autoTest
  **/
  @Schema(description = "")
  public AutoTestModel getAutoTest() {
    return autoTest;
  }

  public void setAutoTest(AutoTestModel autoTest) {
    this.autoTest = autoTest;
  }

  public TestResultModel autoTestStepResults(List<AttachmentModelAutoTestStepResultsModel> autoTestStepResults) {
    this.autoTestStepResults = autoTestStepResults;
    return this;
  }

  public TestResultModel addAutoTestStepResultsItem(AttachmentModelAutoTestStepResultsModel autoTestStepResultsItem) {
    if (this.autoTestStepResults == null) {
      this.autoTestStepResults = new ArrayList<AttachmentModelAutoTestStepResultsModel>();
    }
    this.autoTestStepResults.add(autoTestStepResultsItem);
    return this;
  }

   /**
   * Get autoTestStepResults
   * @return autoTestStepResults
  **/
  @Schema(description = "")
  public List<AttachmentModelAutoTestStepResultsModel> getAutoTestStepResults() {
    return autoTestStepResults;
  }

  public void setAutoTestStepResults(List<AttachmentModelAutoTestStepResultsModel> autoTestStepResults) {
    this.autoTestStepResults = autoTestStepResults;
  }

  public TestResultModel setupResults(List<AttachmentModelAutoTestStepResultsModel> setupResults) {
    this.setupResults = setupResults;
    return this;
  }

  public TestResultModel addSetupResultsItem(AttachmentModelAutoTestStepResultsModel setupResultsItem) {
    if (this.setupResults == null) {
      this.setupResults = new ArrayList<AttachmentModelAutoTestStepResultsModel>();
    }
    this.setupResults.add(setupResultsItem);
    return this;
  }

   /**
   * Get setupResults
   * @return setupResults
  **/
  @Schema(description = "")
  public List<AttachmentModelAutoTestStepResultsModel> getSetupResults() {
    return setupResults;
  }

  public void setSetupResults(List<AttachmentModelAutoTestStepResultsModel> setupResults) {
    this.setupResults = setupResults;
  }

  public TestResultModel teardownResults(List<AttachmentModelAutoTestStepResultsModel> teardownResults) {
    this.teardownResults = teardownResults;
    return this;
  }

  public TestResultModel addTeardownResultsItem(AttachmentModelAutoTestStepResultsModel teardownResultsItem) {
    if (this.teardownResults == null) {
      this.teardownResults = new ArrayList<AttachmentModelAutoTestStepResultsModel>();
    }
    this.teardownResults.add(teardownResultsItem);
    return this;
  }

   /**
   * Get teardownResults
   * @return teardownResults
  **/
  @Schema(description = "")
  public List<AttachmentModelAutoTestStepResultsModel> getTeardownResults() {
    return teardownResults;
  }

  public void setTeardownResults(List<AttachmentModelAutoTestStepResultsModel> teardownResults) {
    this.teardownResults = teardownResults;
  }

  public TestResultModel workItemVersionId(UUID workItemVersionId) {
    this.workItemVersionId = workItemVersionId;
    return this;
  }

   /**
   * Get workItemVersionId
   * @return workItemVersionId
  **/
  @Schema(description = "")
  public UUID getWorkItemVersionId() {
    return workItemVersionId;
  }

  public void setWorkItemVersionId(UUID workItemVersionId) {
    this.workItemVersionId = workItemVersionId;
  }

  public TestResultModel workItemVersionNumber(Integer workItemVersionNumber) {
    this.workItemVersionNumber = workItemVersionNumber;
    return this;
  }

   /**
   * Get workItemVersionNumber
   * @return workItemVersionNumber
  **/
  @Schema(description = "")
  public Integer getWorkItemVersionNumber() {
    return workItemVersionNumber;
  }

  public void setWorkItemVersionNumber(Integer workItemVersionNumber) {
    this.workItemVersionNumber = workItemVersionNumber;
  }

  public TestResultModel parameters(Map<String, String> parameters) {
    this.parameters = parameters;
    return this;
  }

  public TestResultModel putParametersItem(String key, String parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<String, String>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

   /**
   * Get parameters
   * @return parameters
  **/
  @Schema(description = "")
  public Map<String, String> getParameters() {
    return parameters;
  }

  public void setParameters(Map<String, String> parameters) {
    this.parameters = parameters;
  }

  public TestResultModel properties(Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public TestResultModel putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<String, String>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @Schema(description = "")
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }

  public TestResultModel id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }

  public TestResultModel createdDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

   /**
   * Get createdDate
   * @return createdDate
  **/
  @Schema(description = "")
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }

  public TestResultModel modifiedDate(OffsetDateTime modifiedDate) {
    this.modifiedDate = modifiedDate;
    return this;
  }

   /**
   * Get modifiedDate
   * @return modifiedDate
  **/
  @Schema(description = "")
  public OffsetDateTime getModifiedDate() {
    return modifiedDate;
  }

  public void setModifiedDate(OffsetDateTime modifiedDate) {
    this.modifiedDate = modifiedDate;
  }

  public TestResultModel createdById(UUID createdById) {
    this.createdById = createdById;
    return this;
  }

   /**
   * Get createdById
   * @return createdById
  **/
  @Schema(description = "")
  public UUID getCreatedById() {
    return createdById;
  }

  public void setCreatedById(UUID createdById) {
    this.createdById = createdById;
  }

  public TestResultModel modifiedById(UUID modifiedById) {
    this.modifiedById = modifiedById;
    return this;
  }

   /**
   * Get modifiedById
   * @return modifiedById
  **/
  @Schema(description = "")
  public UUID getModifiedById() {
    return modifiedById;
  }

  public void setModifiedById(UUID modifiedById) {
    this.modifiedById = modifiedById;
  }

  public TestResultModel stepComments(List<StepCommentModel> stepComments) {
    this.stepComments = stepComments;
    return this;
  }

  public TestResultModel addStepCommentsItem(StepCommentModel stepCommentsItem) {
    if (this.stepComments == null) {
      this.stepComments = new ArrayList<StepCommentModel>();
    }
    this.stepComments.add(stepCommentsItem);
    return this;
  }

   /**
   * Get stepComments
   * @return stepComments
  **/
  @Schema(description = "")
  public List<StepCommentModel> getStepComments() {
    return stepComments;
  }

  public void setStepComments(List<StepCommentModel> stepComments) {
    this.stepComments = stepComments;
  }

  public TestResultModel failureClassIds(List<UUID> failureClassIds) {
    this.failureClassIds = failureClassIds;
    return this;
  }

  public TestResultModel addFailureClassIdsItem(UUID failureClassIdsItem) {
    if (this.failureClassIds == null) {
      this.failureClassIds = new ArrayList<UUID>();
    }
    this.failureClassIds.add(failureClassIdsItem);
    return this;
  }

   /**
   * Get failureClassIds
   * @return failureClassIds
  **/
  @Schema(description = "")
  public List<UUID> getFailureClassIds() {
    return failureClassIds;
  }

  public void setFailureClassIds(List<UUID> failureClassIds) {
    this.failureClassIds = failureClassIds;
  }

  public TestResultModel outcome(String outcome) {
    this.outcome = outcome;
    return this;
  }

   /**
   * Get outcome
   * @return outcome
  **/
  @Schema(description = "")
  public String getOutcome() {
    return outcome;
  }

  public void setOutcome(String outcome) {
    this.outcome = outcome;
  }

  public TestResultModel comment(String comment) {
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @Schema(description = "")
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }

  public TestResultModel links(List<LinkModel> links) {
    this.links = links;
    return this;
  }

  public TestResultModel addLinksItem(LinkModel linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<LinkModel>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @Schema(description = "")
  public List<LinkModel> getLinks() {
    return links;
  }

  public void setLinks(List<LinkModel> links) {
    this.links = links;
  }

  public TestResultModel stepResults(List<StepResultModel> stepResults) {
    this.stepResults = stepResults;
    return this;
  }

  public TestResultModel addStepResultsItem(StepResultModel stepResultsItem) {
    if (this.stepResults == null) {
      this.stepResults = new ArrayList<StepResultModel>();
    }
    this.stepResults.add(stepResultsItem);
    return this;
  }

   /**
   * Get stepResults
   * @return stepResults
  **/
  @Schema(description = "")
  public List<StepResultModel> getStepResults() {
    return stepResults;
  }

  public void setStepResults(List<StepResultModel> stepResults) {
    this.stepResults = stepResults;
  }

  public TestResultModel attachments(List<AttachmentModel> attachments) {
    this.attachments = attachments;
    return this;
  }

  public TestResultModel addAttachmentsItem(AttachmentModel attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<AttachmentModel>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

   /**
   * Get attachments
   * @return attachments
  **/
  @Schema(description = "")
  public List<AttachmentModel> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<AttachmentModel> attachments) {
    this.attachments = attachments;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestResultModel testResultModel = (TestResultModel) o;
    return Objects.equals(this.autoTestId, testResultModel.autoTestId) &&
        Objects.equals(this.configurationId, testResultModel.configurationId) &&
        Objects.equals(this.startedOn, testResultModel.startedOn) &&
        Objects.equals(this.completedOn, testResultModel.completedOn) &&
        Objects.equals(this.durationInMs, testResultModel.durationInMs) &&
        Objects.equals(this.traces, testResultModel.traces) &&
        Objects.equals(this.failureType, testResultModel.failureType) &&
        Objects.equals(this.message, testResultModel.message) &&
        Objects.equals(this.runByUserId, testResultModel.runByUserId) &&
        Objects.equals(this.stoppedByUserId, testResultModel.stoppedByUserId) &&
        Objects.equals(this.testPointId, testResultModel.testPointId) &&
        Objects.equals(this.testRunId, testResultModel.testRunId) &&
        Objects.equals(this.testPoint, testResultModel.testPoint) &&
        Objects.equals(this.autoTest, testResultModel.autoTest) &&
        Objects.equals(this.autoTestStepResults, testResultModel.autoTestStepResults) &&
        Objects.equals(this.setupResults, testResultModel.setupResults) &&
        Objects.equals(this.teardownResults, testResultModel.teardownResults) &&
        Objects.equals(this.workItemVersionId, testResultModel.workItemVersionId) &&
        Objects.equals(this.workItemVersionNumber, testResultModel.workItemVersionNumber) &&
        Objects.equals(this.parameters, testResultModel.parameters) &&
        Objects.equals(this.properties, testResultModel.properties) &&
        Objects.equals(this.id, testResultModel.id) &&
        Objects.equals(this.createdDate, testResultModel.createdDate) &&
        Objects.equals(this.modifiedDate, testResultModel.modifiedDate) &&
        Objects.equals(this.createdById, testResultModel.createdById) &&
        Objects.equals(this.modifiedById, testResultModel.modifiedById) &&
        Objects.equals(this.stepComments, testResultModel.stepComments) &&
        Objects.equals(this.failureClassIds, testResultModel.failureClassIds) &&
        Objects.equals(this.outcome, testResultModel.outcome) &&
        Objects.equals(this.comment, testResultModel.comment) &&
        Objects.equals(this.links, testResultModel.links) &&
        Objects.equals(this.stepResults, testResultModel.stepResults) &&
        Objects.equals(this.attachments, testResultModel.attachments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoTestId, configurationId, startedOn, completedOn, durationInMs, traces, failureType, message, runByUserId, stoppedByUserId, testPointId, testRunId, testPoint, autoTest, autoTestStepResults, setupResults, teardownResults, workItemVersionId, workItemVersionNumber, parameters, properties, id, createdDate, modifiedDate, createdById, modifiedById, stepComments, failureClassIds, outcome, comment, links, stepResults, attachments);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestResultModel {\n");
    
    sb.append("    autoTestId: ").append(toIndentedString(autoTestId)).append("\n");
    sb.append("    configurationId: ").append(toIndentedString(configurationId)).append("\n");
    sb.append("    startedOn: ").append(toIndentedString(startedOn)).append("\n");
    sb.append("    completedOn: ").append(toIndentedString(completedOn)).append("\n");
    sb.append("    durationInMs: ").append(toIndentedString(durationInMs)).append("\n");
    sb.append("    traces: ").append(toIndentedString(traces)).append("\n");
    sb.append("    failureType: ").append(toIndentedString(failureType)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    runByUserId: ").append(toIndentedString(runByUserId)).append("\n");
    sb.append("    stoppedByUserId: ").append(toIndentedString(stoppedByUserId)).append("\n");
    sb.append("    testPointId: ").append(toIndentedString(testPointId)).append("\n");
    sb.append("    testRunId: ").append(toIndentedString(testRunId)).append("\n");
    sb.append("    testPoint: ").append(toIndentedString(testPoint)).append("\n");
    sb.append("    autoTest: ").append(toIndentedString(autoTest)).append("\n");
    sb.append("    autoTestStepResults: ").append(toIndentedString(autoTestStepResults)).append("\n");
    sb.append("    setupResults: ").append(toIndentedString(setupResults)).append("\n");
    sb.append("    teardownResults: ").append(toIndentedString(teardownResults)).append("\n");
    sb.append("    workItemVersionId: ").append(toIndentedString(workItemVersionId)).append("\n");
    sb.append("    workItemVersionNumber: ").append(toIndentedString(workItemVersionNumber)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("    createdById: ").append(toIndentedString(createdById)).append("\n");
    sb.append("    modifiedById: ").append(toIndentedString(modifiedById)).append("\n");
    sb.append("    stepComments: ").append(toIndentedString(stepComments)).append("\n");
    sb.append("    failureClassIds: ").append(toIndentedString(failureClassIds)).append("\n");
    sb.append("    outcome: ").append(toIndentedString(outcome)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    stepResults: ").append(toIndentedString(stepResults)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
