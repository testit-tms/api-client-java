/*
 * API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ru.testit.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.threeten.bp.OffsetDateTime;
import ru.testit.model.AttachmentModel;
import ru.testit.model.AutoTestShortModel;
import ru.testit.model.TestPointPutModel;
/**
 * TestResultShortModel
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-07-05T10:40:26.135191+03:00[Europe/Moscow]")
public class TestResultShortModel {
  @SerializedName("id")
  private UUID id = null;

  @SerializedName("outcome")
  private String outcome = null;

  @SerializedName("traces")
  private String traces = null;

  @SerializedName("failureType")
  private String failureType = null;

  @SerializedName("message")
  private String message = null;

  @SerializedName("testPoint")
  private TestPointPutModel testPoint = null;

  @SerializedName("createdDate")
  private OffsetDateTime createdDate = null;

  @SerializedName("autoTest")
  private AutoTestShortModel autoTest = null;

  @SerializedName("attachments")
  private List<AttachmentModel> attachments = null;

  public TestResultShortModel id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }

  public TestResultShortModel outcome(String outcome) {
    this.outcome = outcome;
    return this;
  }

   /**
   * Get outcome
   * @return outcome
  **/
  @Schema(description = "")
  public String getOutcome() {
    return outcome;
  }

  public void setOutcome(String outcome) {
    this.outcome = outcome;
  }

  public TestResultShortModel traces(String traces) {
    this.traces = traces;
    return this;
  }

   /**
   * Get traces
   * @return traces
  **/
  @Schema(description = "")
  public String getTraces() {
    return traces;
  }

  public void setTraces(String traces) {
    this.traces = traces;
  }

  public TestResultShortModel failureType(String failureType) {
    this.failureType = failureType;
    return this;
  }

   /**
   * Get failureType
   * @return failureType
  **/
  @Schema(description = "")
  public String getFailureType() {
    return failureType;
  }

  public void setFailureType(String failureType) {
    this.failureType = failureType;
  }

  public TestResultShortModel message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @Schema(description = "")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public TestResultShortModel testPoint(TestPointPutModel testPoint) {
    this.testPoint = testPoint;
    return this;
  }

   /**
   * Get testPoint
   * @return testPoint
  **/
  @Schema(description = "")
  public TestPointPutModel getTestPoint() {
    return testPoint;
  }

  public void setTestPoint(TestPointPutModel testPoint) {
    this.testPoint = testPoint;
  }

  public TestResultShortModel createdDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

   /**
   * Get createdDate
   * @return createdDate
  **/
  @Schema(description = "")
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }

  public TestResultShortModel autoTest(AutoTestShortModel autoTest) {
    this.autoTest = autoTest;
    return this;
  }

   /**
   * Get autoTest
   * @return autoTest
  **/
  @Schema(description = "")
  public AutoTestShortModel getAutoTest() {
    return autoTest;
  }

  public void setAutoTest(AutoTestShortModel autoTest) {
    this.autoTest = autoTest;
  }

  public TestResultShortModel attachments(List<AttachmentModel> attachments) {
    this.attachments = attachments;
    return this;
  }

  public TestResultShortModel addAttachmentsItem(AttachmentModel attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<AttachmentModel>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

   /**
   * Get attachments
   * @return attachments
  **/
  @Schema(description = "")
  public List<AttachmentModel> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<AttachmentModel> attachments) {
    this.attachments = attachments;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestResultShortModel testResultShortModel = (TestResultShortModel) o;
    return Objects.equals(this.id, testResultShortModel.id) &&
        Objects.equals(this.outcome, testResultShortModel.outcome) &&
        Objects.equals(this.traces, testResultShortModel.traces) &&
        Objects.equals(this.failureType, testResultShortModel.failureType) &&
        Objects.equals(this.message, testResultShortModel.message) &&
        Objects.equals(this.testPoint, testResultShortModel.testPoint) &&
        Objects.equals(this.createdDate, testResultShortModel.createdDate) &&
        Objects.equals(this.autoTest, testResultShortModel.autoTest) &&
        Objects.equals(this.attachments, testResultShortModel.attachments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, outcome, traces, failureType, message, testPoint, createdDate, autoTest, attachments);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestResultShortModel {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    outcome: ").append(toIndentedString(outcome)).append("\n");
    sb.append("    traces: ").append(toIndentedString(traces)).append("\n");
    sb.append("    failureType: ").append(toIndentedString(failureType)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    testPoint: ").append(toIndentedString(testPoint)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    autoTest: ").append(toIndentedString(autoTest)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
