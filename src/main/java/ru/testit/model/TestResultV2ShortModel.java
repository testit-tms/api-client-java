/*
 * API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ru.testit.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.threeten.bp.OffsetDateTime;
import ru.testit.model.AttachmentModel;
import ru.testit.model.LinkModel;
import ru.testit.model.TestPointShortModel;
/**
 * TestResultV2ShortModel
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-07-05T10:40:26.135191+03:00[Europe/Moscow]")
public class TestResultV2ShortModel {
  @SerializedName("id")
  private UUID id = null;

  @SerializedName("configurationId")
  private UUID configurationId = null;

  @SerializedName("workItemVersionId")
  private UUID workItemVersionId = null;

  @SerializedName("autoTestId")
  private UUID autoTestId = null;

  @SerializedName("message")
  private String message = null;

  @SerializedName("traces")
  private String traces = null;

  @SerializedName("startedOn")
  private OffsetDateTime startedOn = null;

  @SerializedName("completedOn")
  private OffsetDateTime completedOn = null;

  @SerializedName("runByUserId")
  private UUID runByUserId = null;

  @SerializedName("stoppedByUserId")
  private UUID stoppedByUserId = null;

  @SerializedName("testPointId")
  private UUID testPointId = null;

  @SerializedName("testPoint")
  private TestPointShortModel testPoint = null;

  @SerializedName("testRunId")
  private UUID testRunId = null;

  @SerializedName("outcome")
  private String outcome = null;

  @SerializedName("comment")
  private String comment = null;

  @SerializedName("links")
  private List<LinkModel> links = null;

  @SerializedName("attachments")
  private List<AttachmentModel> attachments = null;

  @SerializedName("parameters")
  private Map<String, String> parameters = null;

  @SerializedName("properties")
  private Map<String, String> properties = null;

  public TestResultV2ShortModel id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(example = "9891bb36-71eb-4a4a-a049-eae838db9514", description = "")
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }

  public TestResultV2ShortModel configurationId(UUID configurationId) {
    this.configurationId = configurationId;
    return this;
  }

   /**
   * Get configurationId
   * @return configurationId
  **/
  @Schema(example = "9891bb36-71eb-4a4a-a049-eae838db9514", description = "")
  public UUID getConfigurationId() {
    return configurationId;
  }

  public void setConfigurationId(UUID configurationId) {
    this.configurationId = configurationId;
  }

  public TestResultV2ShortModel workItemVersionId(UUID workItemVersionId) {
    this.workItemVersionId = workItemVersionId;
    return this;
  }

   /**
   * Get workItemVersionId
   * @return workItemVersionId
  **/
  @Schema(example = "9891bb36-71eb-4a4a-a049-eae838db9514", description = "")
  public UUID getWorkItemVersionId() {
    return workItemVersionId;
  }

  public void setWorkItemVersionId(UUID workItemVersionId) {
    this.workItemVersionId = workItemVersionId;
  }

  public TestResultV2ShortModel autoTestId(UUID autoTestId) {
    this.autoTestId = autoTestId;
    return this;
  }

   /**
   * Get autoTestId
   * @return autoTestId
  **/
  @Schema(example = "9891bb36-71eb-4a4a-a049-eae838db9514", description = "")
  public UUID getAutoTestId() {
    return autoTestId;
  }

  public void setAutoTestId(UUID autoTestId) {
    this.autoTestId = autoTestId;
  }

  public TestResultV2ShortModel message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @Schema(example = "9891bb36-71eb-4a4a-a049-eae838db9514", description = "")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public TestResultV2ShortModel traces(String traces) {
    this.traces = traces;
    return this;
  }

   /**
   * Get traces
   * @return traces
  **/
  @Schema(example = "Exception in thread main java.lang.NullPointerException at com.example.myproject.MyTest.HealtCheck()", description = "")
  public String getTraces() {
    return traces;
  }

  public void setTraces(String traces) {
    this.traces = traces;
  }

  public TestResultV2ShortModel startedOn(OffsetDateTime startedOn) {
    this.startedOn = startedOn;
    return this;
  }

   /**
   * Get startedOn
   * @return startedOn
  **/
  @Schema(example = "2022-06-30T11:46:45.461804600Z", description = "")
  public OffsetDateTime getStartedOn() {
    return startedOn;
  }

  public void setStartedOn(OffsetDateTime startedOn) {
    this.startedOn = startedOn;
  }

  public TestResultV2ShortModel completedOn(OffsetDateTime completedOn) {
    this.completedOn = completedOn;
    return this;
  }

   /**
   * Get completedOn
   * @return completedOn
  **/
  @Schema(example = "2022-06-30T11:46:45.461804600Z", description = "")
  public OffsetDateTime getCompletedOn() {
    return completedOn;
  }

  public void setCompletedOn(OffsetDateTime completedOn) {
    this.completedOn = completedOn;
  }

  public TestResultV2ShortModel runByUserId(UUID runByUserId) {
    this.runByUserId = runByUserId;
    return this;
  }

   /**
   * Get runByUserId
   * @return runByUserId
  **/
  @Schema(example = "9891bb36-71eb-4a4a-a049-eae838db9514", description = "")
  public UUID getRunByUserId() {
    return runByUserId;
  }

  public void setRunByUserId(UUID runByUserId) {
    this.runByUserId = runByUserId;
  }

  public TestResultV2ShortModel stoppedByUserId(UUID stoppedByUserId) {
    this.stoppedByUserId = stoppedByUserId;
    return this;
  }

   /**
   * Get stoppedByUserId
   * @return stoppedByUserId
  **/
  @Schema(example = "9891bb36-71eb-4a4a-a049-eae838db9514", description = "")
  public UUID getStoppedByUserId() {
    return stoppedByUserId;
  }

  public void setStoppedByUserId(UUID stoppedByUserId) {
    this.stoppedByUserId = stoppedByUserId;
  }

  public TestResultV2ShortModel testPointId(UUID testPointId) {
    this.testPointId = testPointId;
    return this;
  }

   /**
   * Get testPointId
   * @return testPointId
  **/
  @Schema(example = "9891bb36-71eb-4a4a-a049-eae838db9514", description = "")
  public UUID getTestPointId() {
    return testPointId;
  }

  public void setTestPointId(UUID testPointId) {
    this.testPointId = testPointId;
  }

  public TestResultV2ShortModel testPoint(TestPointShortModel testPoint) {
    this.testPoint = testPoint;
    return this;
  }

   /**
   * Get testPoint
   * @return testPoint
  **/
  @Schema(description = "")
  public TestPointShortModel getTestPoint() {
    return testPoint;
  }

  public void setTestPoint(TestPointShortModel testPoint) {
    this.testPoint = testPoint;
  }

  public TestResultV2ShortModel testRunId(UUID testRunId) {
    this.testRunId = testRunId;
    return this;
  }

   /**
   * Get testRunId
   * @return testRunId
  **/
  @Schema(example = "9891bb36-71eb-4a4a-a049-eae838db9514", description = "")
  public UUID getTestRunId() {
    return testRunId;
  }

  public void setTestRunId(UUID testRunId) {
    this.testRunId = testRunId;
  }

  public TestResultV2ShortModel outcome(String outcome) {
    this.outcome = outcome;
    return this;
  }

   /**
   * Property can contain one of these values: Passed, Failed, InProgress, Blocked, Skipped
   * @return outcome
  **/
  @Schema(example = "Passed", description = "Property can contain one of these values: Passed, Failed, InProgress, Blocked, Skipped")
  public String getOutcome() {
    return outcome;
  }

  public void setOutcome(String outcome) {
    this.outcome = outcome;
  }

  public TestResultV2ShortModel comment(String comment) {
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @Schema(example = "my first comment", description = "")
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }

  public TestResultV2ShortModel links(List<LinkModel> links) {
    this.links = links;
    return this;
  }

  public TestResultV2ShortModel addLinksItem(LinkModel linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<LinkModel>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @Schema(description = "")
  public List<LinkModel> getLinks() {
    return links;
  }

  public void setLinks(List<LinkModel> links) {
    this.links = links;
  }

  public TestResultV2ShortModel attachments(List<AttachmentModel> attachments) {
    this.attachments = attachments;
    return this;
  }

  public TestResultV2ShortModel addAttachmentsItem(AttachmentModel attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<AttachmentModel>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

   /**
   * Get attachments
   * @return attachments
  **/
  @Schema(description = "")
  public List<AttachmentModel> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<AttachmentModel> attachments) {
    this.attachments = attachments;
  }

  public TestResultV2ShortModel parameters(Map<String, String> parameters) {
    this.parameters = parameters;
    return this;
  }

  public TestResultV2ShortModel putParametersItem(String key, String parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<String, String>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

   /**
   * Get parameters
   * @return parameters
  **/
  @Schema(description = "")
  public Map<String, String> getParameters() {
    return parameters;
  }

  public void setParameters(Map<String, String> parameters) {
    this.parameters = parameters;
  }

  public TestResultV2ShortModel properties(Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public TestResultV2ShortModel putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<String, String>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @Schema(description = "")
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestResultV2ShortModel testResultV2ShortModel = (TestResultV2ShortModel) o;
    return Objects.equals(this.id, testResultV2ShortModel.id) &&
        Objects.equals(this.configurationId, testResultV2ShortModel.configurationId) &&
        Objects.equals(this.workItemVersionId, testResultV2ShortModel.workItemVersionId) &&
        Objects.equals(this.autoTestId, testResultV2ShortModel.autoTestId) &&
        Objects.equals(this.message, testResultV2ShortModel.message) &&
        Objects.equals(this.traces, testResultV2ShortModel.traces) &&
        Objects.equals(this.startedOn, testResultV2ShortModel.startedOn) &&
        Objects.equals(this.completedOn, testResultV2ShortModel.completedOn) &&
        Objects.equals(this.runByUserId, testResultV2ShortModel.runByUserId) &&
        Objects.equals(this.stoppedByUserId, testResultV2ShortModel.stoppedByUserId) &&
        Objects.equals(this.testPointId, testResultV2ShortModel.testPointId) &&
        Objects.equals(this.testPoint, testResultV2ShortModel.testPoint) &&
        Objects.equals(this.testRunId, testResultV2ShortModel.testRunId) &&
        Objects.equals(this.outcome, testResultV2ShortModel.outcome) &&
        Objects.equals(this.comment, testResultV2ShortModel.comment) &&
        Objects.equals(this.links, testResultV2ShortModel.links) &&
        Objects.equals(this.attachments, testResultV2ShortModel.attachments) &&
        Objects.equals(this.parameters, testResultV2ShortModel.parameters) &&
        Objects.equals(this.properties, testResultV2ShortModel.properties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, configurationId, workItemVersionId, autoTestId, message, traces, startedOn, completedOn, runByUserId, stoppedByUserId, testPointId, testPoint, testRunId, outcome, comment, links, attachments, parameters, properties);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestResultV2ShortModel {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    configurationId: ").append(toIndentedString(configurationId)).append("\n");
    sb.append("    workItemVersionId: ").append(toIndentedString(workItemVersionId)).append("\n");
    sb.append("    autoTestId: ").append(toIndentedString(autoTestId)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    traces: ").append(toIndentedString(traces)).append("\n");
    sb.append("    startedOn: ").append(toIndentedString(startedOn)).append("\n");
    sb.append("    completedOn: ").append(toIndentedString(completedOn)).append("\n");
    sb.append("    runByUserId: ").append(toIndentedString(runByUserId)).append("\n");
    sb.append("    stoppedByUserId: ").append(toIndentedString(stoppedByUserId)).append("\n");
    sb.append("    testPointId: ").append(toIndentedString(testPointId)).append("\n");
    sb.append("    testPoint: ").append(toIndentedString(testPoint)).append("\n");
    sb.append("    testRunId: ").append(toIndentedString(testRunId)).append("\n");
    sb.append("    outcome: ").append(toIndentedString(outcome)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
