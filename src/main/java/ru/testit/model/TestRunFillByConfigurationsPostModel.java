/*
 * API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ru.testit.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import ru.testit.model.TestPointSelector;
/**
 * TestRunFillByConfigurationsPostModel
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-07-05T10:40:26.135191+03:00[Europe/Moscow]")
public class TestRunFillByConfigurationsPostModel {
  @SerializedName("testPointSelectors")
  private List<TestPointSelector> testPointSelectors = new ArrayList<TestPointSelector>();

  @SerializedName("projectId")
  private UUID projectId = null;

  @SerializedName("testPlanId")
  private UUID testPlanId = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("launchSource")
  private String launchSource = null;

  public TestRunFillByConfigurationsPostModel testPointSelectors(List<TestPointSelector> testPointSelectors) {
    this.testPointSelectors = testPointSelectors;
    return this;
  }

  public TestRunFillByConfigurationsPostModel addTestPointSelectorsItem(TestPointSelector testPointSelectorsItem) {
    this.testPointSelectors.add(testPointSelectorsItem);
    return this;
  }

   /**
   * Get testPointSelectors
   * @return testPointSelectors
  **/
  @Schema(required = true, description = "")
  public List<TestPointSelector> getTestPointSelectors() {
    return testPointSelectors;
  }

  public void setTestPointSelectors(List<TestPointSelector> testPointSelectors) {
    this.testPointSelectors = testPointSelectors;
  }

  public TestRunFillByConfigurationsPostModel projectId(UUID projectId) {
    this.projectId = projectId;
    return this;
  }

   /**
   * This property is used to link test run with project
   * @return projectId
  **/
  @Schema(example = "9891bb36-71eb-4a4a-a049-eae838db9514", required = true, description = "This property is used to link test run with project")
  public UUID getProjectId() {
    return projectId;
  }

  public void setProjectId(UUID projectId) {
    this.projectId = projectId;
  }

  public TestRunFillByConfigurationsPostModel testPlanId(UUID testPlanId) {
    this.testPlanId = testPlanId;
    return this;
  }

   /**
   * This property is used to link test run with test plan
   * @return testPlanId
  **/
  @Schema(example = "9891bb36-71eb-4a4a-a049-eae838db9514", required = true, description = "This property is used to link test run with test plan")
  public UUID getTestPlanId() {
    return testPlanId;
  }

  public void setTestPlanId(UUID testPlanId) {
    this.testPlanId = testPlanId;
  }

  public TestRunFillByConfigurationsPostModel name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(example = "First run", description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public TestRunFillByConfigurationsPostModel description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public TestRunFillByConfigurationsPostModel launchSource(String launchSource) {
    this.launchSource = launchSource;
    return this;
  }

   /**
   * Get launchSource
   * @return launchSource
  **/
  @Schema(example = "By user via API", description = "")
  public String getLaunchSource() {
    return launchSource;
  }

  public void setLaunchSource(String launchSource) {
    this.launchSource = launchSource;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestRunFillByConfigurationsPostModel testRunFillByConfigurationsPostModel = (TestRunFillByConfigurationsPostModel) o;
    return Objects.equals(this.testPointSelectors, testRunFillByConfigurationsPostModel.testPointSelectors) &&
        Objects.equals(this.projectId, testRunFillByConfigurationsPostModel.projectId) &&
        Objects.equals(this.testPlanId, testRunFillByConfigurationsPostModel.testPlanId) &&
        Objects.equals(this.name, testRunFillByConfigurationsPostModel.name) &&
        Objects.equals(this.description, testRunFillByConfigurationsPostModel.description) &&
        Objects.equals(this.launchSource, testRunFillByConfigurationsPostModel.launchSource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(testPointSelectors, projectId, testPlanId, name, description, launchSource);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestRunFillByConfigurationsPostModel {\n");
    
    sb.append("    testPointSelectors: ").append(toIndentedString(testPointSelectors)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    testPlanId: ").append(toIndentedString(testPlanId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    launchSource: ").append(toIndentedString(launchSource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
