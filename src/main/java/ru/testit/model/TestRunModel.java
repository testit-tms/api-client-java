/*
 * API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ru.testit.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.threeten.bp.OffsetDateTime;
import ru.testit.model.AutoTestModel;
import ru.testit.model.TestPlanModel;
import ru.testit.model.TestResultModel;
import ru.testit.model.TestRunAnalyticResultModel;
import ru.testit.model.TestRunStateTypeModel;
/**
 * TestRunModel
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-07-05T10:40:26.135191+03:00[Europe/Moscow]")
public class TestRunModel {
  @SerializedName("autoTests")
  private List<AutoTestModel> autoTests = null;

  @SerializedName("autoTestsCount")
  private Integer autoTestsCount = null;

  @SerializedName("testSuiteIds")
  private List<UUID> testSuiteIds = null;

  @SerializedName("isAutomated")
  private Boolean isAutomated = null;

  @SerializedName("analytic")
  private TestRunAnalyticResultModel analytic = null;

  @SerializedName("testResults")
  private List<TestResultModel> testResults = null;

  @SerializedName("testPlan")
  private TestPlanModel testPlan = null;

  @SerializedName("createdDate")
  private OffsetDateTime createdDate = null;

  @SerializedName("modifiedDate")
  private OffsetDateTime modifiedDate = null;

  @SerializedName("createdById")
  private UUID createdById = null;

  @SerializedName("modifiedById")
  private UUID modifiedById = null;

  @SerializedName("createdByUserName")
  private String createdByUserName = null;

  @SerializedName("startedDate")
  private OffsetDateTime startedDate = null;

  @SerializedName("completedDate")
  private OffsetDateTime completedDate = null;

  @SerializedName("build")
  private String build = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("stateName")
  private TestRunStateTypeModel stateName = null;

  @SerializedName("projectId")
  private UUID projectId = null;

  @SerializedName("testPlanId")
  private UUID testPlanId = null;

  @SerializedName("runByUserId")
  private UUID runByUserId = null;

  @SerializedName("stoppedByUserId")
  private UUID stoppedByUserId = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("launchSource")
  private String launchSource = null;

  @SerializedName("id")
  private UUID id = null;

  @SerializedName("isDeleted")
  private Boolean isDeleted = null;

  public TestRunModel autoTests(List<AutoTestModel> autoTests) {
    this.autoTests = autoTests;
    return this;
  }

  public TestRunModel addAutoTestsItem(AutoTestModel autoTestsItem) {
    if (this.autoTests == null) {
      this.autoTests = new ArrayList<AutoTestModel>();
    }
    this.autoTests.add(autoTestsItem);
    return this;
  }

   /**
   * Get autoTests
   * @return autoTests
  **/
  @Schema(description = "")
  public List<AutoTestModel> getAutoTests() {
    return autoTests;
  }

  public void setAutoTests(List<AutoTestModel> autoTests) {
    this.autoTests = autoTests;
  }

  public TestRunModel autoTestsCount(Integer autoTestsCount) {
    this.autoTestsCount = autoTestsCount;
    return this;
  }

   /**
   * Get autoTestsCount
   * @return autoTestsCount
  **/
  @Schema(description = "")
  public Integer getAutoTestsCount() {
    return autoTestsCount;
  }

  public void setAutoTestsCount(Integer autoTestsCount) {
    this.autoTestsCount = autoTestsCount;
  }

  public TestRunModel testSuiteIds(List<UUID> testSuiteIds) {
    this.testSuiteIds = testSuiteIds;
    return this;
  }

  public TestRunModel addTestSuiteIdsItem(UUID testSuiteIdsItem) {
    if (this.testSuiteIds == null) {
      this.testSuiteIds = new ArrayList<UUID>();
    }
    this.testSuiteIds.add(testSuiteIdsItem);
    return this;
  }

   /**
   * Get testSuiteIds
   * @return testSuiteIds
  **/
  @Schema(description = "")
  public List<UUID> getTestSuiteIds() {
    return testSuiteIds;
  }

  public void setTestSuiteIds(List<UUID> testSuiteIds) {
    this.testSuiteIds = testSuiteIds;
  }

  public TestRunModel isAutomated(Boolean isAutomated) {
    this.isAutomated = isAutomated;
    return this;
  }

   /**
   * Get isAutomated
   * @return isAutomated
  **/
  @Schema(description = "")
  public Boolean isIsAutomated() {
    return isAutomated;
  }

  public void setIsAutomated(Boolean isAutomated) {
    this.isAutomated = isAutomated;
  }

  public TestRunModel analytic(TestRunAnalyticResultModel analytic) {
    this.analytic = analytic;
    return this;
  }

   /**
   * Get analytic
   * @return analytic
  **/
  @Schema(description = "")
  public TestRunAnalyticResultModel getAnalytic() {
    return analytic;
  }

  public void setAnalytic(TestRunAnalyticResultModel analytic) {
    this.analytic = analytic;
  }

  public TestRunModel testResults(List<TestResultModel> testResults) {
    this.testResults = testResults;
    return this;
  }

  public TestRunModel addTestResultsItem(TestResultModel testResultsItem) {
    if (this.testResults == null) {
      this.testResults = new ArrayList<TestResultModel>();
    }
    this.testResults.add(testResultsItem);
    return this;
  }

   /**
   * Get testResults
   * @return testResults
  **/
  @Schema(description = "")
  public List<TestResultModel> getTestResults() {
    return testResults;
  }

  public void setTestResults(List<TestResultModel> testResults) {
    this.testResults = testResults;
  }

  public TestRunModel testPlan(TestPlanModel testPlan) {
    this.testPlan = testPlan;
    return this;
  }

   /**
   * Get testPlan
   * @return testPlan
  **/
  @Schema(description = "")
  public TestPlanModel getTestPlan() {
    return testPlan;
  }

  public void setTestPlan(TestPlanModel testPlan) {
    this.testPlan = testPlan;
  }

  public TestRunModel createdDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

   /**
   * Get createdDate
   * @return createdDate
  **/
  @Schema(description = "")
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }

  public TestRunModel modifiedDate(OffsetDateTime modifiedDate) {
    this.modifiedDate = modifiedDate;
    return this;
  }

   /**
   * Get modifiedDate
   * @return modifiedDate
  **/
  @Schema(description = "")
  public OffsetDateTime getModifiedDate() {
    return modifiedDate;
  }

  public void setModifiedDate(OffsetDateTime modifiedDate) {
    this.modifiedDate = modifiedDate;
  }

  public TestRunModel createdById(UUID createdById) {
    this.createdById = createdById;
    return this;
  }

   /**
   * Get createdById
   * @return createdById
  **/
  @Schema(description = "")
  public UUID getCreatedById() {
    return createdById;
  }

  public void setCreatedById(UUID createdById) {
    this.createdById = createdById;
  }

  public TestRunModel modifiedById(UUID modifiedById) {
    this.modifiedById = modifiedById;
    return this;
  }

   /**
   * Get modifiedById
   * @return modifiedById
  **/
  @Schema(description = "")
  public UUID getModifiedById() {
    return modifiedById;
  }

  public void setModifiedById(UUID modifiedById) {
    this.modifiedById = modifiedById;
  }

  public TestRunModel createdByUserName(String createdByUserName) {
    this.createdByUserName = createdByUserName;
    return this;
  }

   /**
   * Get createdByUserName
   * @return createdByUserName
  **/
  @Schema(description = "")
  public String getCreatedByUserName() {
    return createdByUserName;
  }

  public void setCreatedByUserName(String createdByUserName) {
    this.createdByUserName = createdByUserName;
  }

  public TestRunModel startedDate(OffsetDateTime startedDate) {
    this.startedDate = startedDate;
    return this;
  }

   /**
   * Get startedDate
   * @return startedDate
  **/
  @Schema(description = "")
  public OffsetDateTime getStartedDate() {
    return startedDate;
  }

  public void setStartedDate(OffsetDateTime startedDate) {
    this.startedDate = startedDate;
  }

  public TestRunModel completedDate(OffsetDateTime completedDate) {
    this.completedDate = completedDate;
    return this;
  }

   /**
   * Get completedDate
   * @return completedDate
  **/
  @Schema(description = "")
  public OffsetDateTime getCompletedDate() {
    return completedDate;
  }

  public void setCompletedDate(OffsetDateTime completedDate) {
    this.completedDate = completedDate;
  }

  public TestRunModel build(String build) {
    this.build = build;
    return this;
  }

   /**
   * Get build
   * @return build
  **/
  @Schema(description = "")
  public String getBuild() {
    return build;
  }

  public void setBuild(String build) {
    this.build = build;
  }

  public TestRunModel description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public TestRunModel stateName(TestRunStateTypeModel stateName) {
    this.stateName = stateName;
    return this;
  }

   /**
   * Get stateName
   * @return stateName
  **/
  @Schema(description = "")
  public TestRunStateTypeModel getStateName() {
    return stateName;
  }

  public void setStateName(TestRunStateTypeModel stateName) {
    this.stateName = stateName;
  }

  public TestRunModel projectId(UUID projectId) {
    this.projectId = projectId;
    return this;
  }

   /**
   * Get projectId
   * @return projectId
  **/
  @Schema(description = "")
  public UUID getProjectId() {
    return projectId;
  }

  public void setProjectId(UUID projectId) {
    this.projectId = projectId;
  }

  public TestRunModel testPlanId(UUID testPlanId) {
    this.testPlanId = testPlanId;
    return this;
  }

   /**
   * Get testPlanId
   * @return testPlanId
  **/
  @Schema(description = "")
  public UUID getTestPlanId() {
    return testPlanId;
  }

  public void setTestPlanId(UUID testPlanId) {
    this.testPlanId = testPlanId;
  }

  public TestRunModel runByUserId(UUID runByUserId) {
    this.runByUserId = runByUserId;
    return this;
  }

   /**
   * Get runByUserId
   * @return runByUserId
  **/
  @Schema(description = "")
  public UUID getRunByUserId() {
    return runByUserId;
  }

  public void setRunByUserId(UUID runByUserId) {
    this.runByUserId = runByUserId;
  }

  public TestRunModel stoppedByUserId(UUID stoppedByUserId) {
    this.stoppedByUserId = stoppedByUserId;
    return this;
  }

   /**
   * Get stoppedByUserId
   * @return stoppedByUserId
  **/
  @Schema(description = "")
  public UUID getStoppedByUserId() {
    return stoppedByUserId;
  }

  public void setStoppedByUserId(UUID stoppedByUserId) {
    this.stoppedByUserId = stoppedByUserId;
  }

  public TestRunModel name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public TestRunModel launchSource(String launchSource) {
    this.launchSource = launchSource;
    return this;
  }

   /**
   * Get launchSource
   * @return launchSource
  **/
  @Schema(description = "")
  public String getLaunchSource() {
    return launchSource;
  }

  public void setLaunchSource(String launchSource) {
    this.launchSource = launchSource;
  }

  public TestRunModel id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(example = "9891bb36-71eb-4a4a-a049-eae838db9514", description = "")
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }

  public TestRunModel isDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
    return this;
  }

   /**
   * Get isDeleted
   * @return isDeleted
  **/
  @Schema(example = "true", description = "")
  public Boolean isIsDeleted() {
    return isDeleted;
  }

  public void setIsDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestRunModel testRunModel = (TestRunModel) o;
    return Objects.equals(this.autoTests, testRunModel.autoTests) &&
        Objects.equals(this.autoTestsCount, testRunModel.autoTestsCount) &&
        Objects.equals(this.testSuiteIds, testRunModel.testSuiteIds) &&
        Objects.equals(this.isAutomated, testRunModel.isAutomated) &&
        Objects.equals(this.analytic, testRunModel.analytic) &&
        Objects.equals(this.testResults, testRunModel.testResults) &&
        Objects.equals(this.testPlan, testRunModel.testPlan) &&
        Objects.equals(this.createdDate, testRunModel.createdDate) &&
        Objects.equals(this.modifiedDate, testRunModel.modifiedDate) &&
        Objects.equals(this.createdById, testRunModel.createdById) &&
        Objects.equals(this.modifiedById, testRunModel.modifiedById) &&
        Objects.equals(this.createdByUserName, testRunModel.createdByUserName) &&
        Objects.equals(this.startedDate, testRunModel.startedDate) &&
        Objects.equals(this.completedDate, testRunModel.completedDate) &&
        Objects.equals(this.build, testRunModel.build) &&
        Objects.equals(this.description, testRunModel.description) &&
        Objects.equals(this.stateName, testRunModel.stateName) &&
        Objects.equals(this.projectId, testRunModel.projectId) &&
        Objects.equals(this.testPlanId, testRunModel.testPlanId) &&
        Objects.equals(this.runByUserId, testRunModel.runByUserId) &&
        Objects.equals(this.stoppedByUserId, testRunModel.stoppedByUserId) &&
        Objects.equals(this.name, testRunModel.name) &&
        Objects.equals(this.launchSource, testRunModel.launchSource) &&
        Objects.equals(this.id, testRunModel.id) &&
        Objects.equals(this.isDeleted, testRunModel.isDeleted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoTests, autoTestsCount, testSuiteIds, isAutomated, analytic, testResults, testPlan, createdDate, modifiedDate, createdById, modifiedById, createdByUserName, startedDate, completedDate, build, description, stateName, projectId, testPlanId, runByUserId, stoppedByUserId, name, launchSource, id, isDeleted);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestRunModel {\n");
    
    sb.append("    autoTests: ").append(toIndentedString(autoTests)).append("\n");
    sb.append("    autoTestsCount: ").append(toIndentedString(autoTestsCount)).append("\n");
    sb.append("    testSuiteIds: ").append(toIndentedString(testSuiteIds)).append("\n");
    sb.append("    isAutomated: ").append(toIndentedString(isAutomated)).append("\n");
    sb.append("    analytic: ").append(toIndentedString(analytic)).append("\n");
    sb.append("    testResults: ").append(toIndentedString(testResults)).append("\n");
    sb.append("    testPlan: ").append(toIndentedString(testPlan)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("    createdById: ").append(toIndentedString(createdById)).append("\n");
    sb.append("    modifiedById: ").append(toIndentedString(modifiedById)).append("\n");
    sb.append("    createdByUserName: ").append(toIndentedString(createdByUserName)).append("\n");
    sb.append("    startedDate: ").append(toIndentedString(startedDate)).append("\n");
    sb.append("    completedDate: ").append(toIndentedString(completedDate)).append("\n");
    sb.append("    build: ").append(toIndentedString(build)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    stateName: ").append(toIndentedString(stateName)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    testPlanId: ").append(toIndentedString(testPlanId)).append("\n");
    sb.append("    runByUserId: ").append(toIndentedString(runByUserId)).append("\n");
    sb.append("    stoppedByUserId: ").append(toIndentedString(stoppedByUserId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    launchSource: ").append(toIndentedString(launchSource)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
