/*
 * API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ru.testit.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.threeten.bp.OffsetDateTime;
import ru.testit.model.WorkItemPriorityModel;
import ru.testit.model.WorkItemStates;
/**
 * Collection of filters to apply to search
 */
@Schema(description = "Collection of filters to apply to search")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-07-05T10:40:26.135191+03:00[Europe/Moscow]")
public class WorkItemFilterModel {
  @SerializedName("nameOrId")
  private String nameOrId = null;

  @SerializedName("includeIds")
  private List<UUID> includeIds = null;

  @SerializedName("excludeIds")
  private List<UUID> excludeIds = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("globalIds")
  private List<Long> globalIds = null;

  @SerializedName("attributes")
  private Map<String, List<String>> attributes = null;

  @SerializedName("isDeleted")
  private Boolean isDeleted = null;

  @SerializedName("projectIds")
  private List<UUID> projectIds = null;

  @SerializedName("sectionIds")
  private List<UUID> sectionIds = null;

  @SerializedName("createdByIds")
  private List<UUID> createdByIds = null;

  @SerializedName("modifiedByIds")
  private List<UUID> modifiedByIds = null;

  @SerializedName("states")
  private List<WorkItemStates> states = null;

  @SerializedName("priorities")
  private List<WorkItemPriorityModel> priorities = null;

  @SerializedName("entityTypes")
  private List<String> entityTypes = null;

  @SerializedName("createdDateMinimal")
  private OffsetDateTime createdDateMinimal = null;

  @SerializedName("createdDateMaximal")
  private OffsetDateTime createdDateMaximal = null;

  @SerializedName("modifiedDateMinimal")
  private OffsetDateTime modifiedDateMinimal = null;

  @SerializedName("modifiedDateMaximal")
  private OffsetDateTime modifiedDateMaximal = null;

  @SerializedName("durationMinimal")
  private Integer durationMinimal = null;

  @SerializedName("durationMaximal")
  private Integer durationMaximal = null;

  @SerializedName("isAutomated")
  private Boolean isAutomated = null;

  @SerializedName("tagNames")
  private List<String> tagNames = null;

  @SerializedName("autoTestIds")
  private List<UUID> autoTestIds = null;

  @SerializedName("exceptWorkItemIds")
  private List<UUID> exceptWorkItemIds = null;

  public WorkItemFilterModel nameOrId(String nameOrId) {
    this.nameOrId = nameOrId;
    return this;
  }

   /**
   * Name or identifier (UUID) of work item
   * @return nameOrId
  **/
  @Schema(description = "Name or identifier (UUID) of work item")
  public String getNameOrId() {
    return nameOrId;
  }

  public void setNameOrId(String nameOrId) {
    this.nameOrId = nameOrId;
  }

  public WorkItemFilterModel includeIds(List<UUID> includeIds) {
    this.includeIds = includeIds;
    return this;
  }

  public WorkItemFilterModel addIncludeIdsItem(UUID includeIdsItem) {
    if (this.includeIds == null) {
      this.includeIds = new ArrayList<UUID>();
    }
    this.includeIds.add(includeIdsItem);
    return this;
  }

   /**
   * Collection of identifiers of work items which need to be included in result regardless of filtering
   * @return includeIds
  **/
  @Schema(description = "Collection of identifiers of work items which need to be included in result regardless of filtering")
  public List<UUID> getIncludeIds() {
    return includeIds;
  }

  public void setIncludeIds(List<UUID> includeIds) {
    this.includeIds = includeIds;
  }

  public WorkItemFilterModel excludeIds(List<UUID> excludeIds) {
    this.excludeIds = excludeIds;
    return this;
  }

  public WorkItemFilterModel addExcludeIdsItem(UUID excludeIdsItem) {
    if (this.excludeIds == null) {
      this.excludeIds = new ArrayList<UUID>();
    }
    this.excludeIds.add(excludeIdsItem);
    return this;
  }

   /**
   * Collection of identifiers of work items which need to be excluded from result regardless of filtering
   * @return excludeIds
  **/
  @Schema(description = "Collection of identifiers of work items which need to be excluded from result regardless of filtering")
  public List<UUID> getExcludeIds() {
    return excludeIds;
  }

  public void setExcludeIds(List<UUID> excludeIds) {
    this.excludeIds = excludeIds;
  }

  public WorkItemFilterModel name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of work item
   * @return name
  **/
  @Schema(description = "Name of work item")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public WorkItemFilterModel globalIds(List<Long> globalIds) {
    this.globalIds = globalIds;
    return this;
  }

  public WorkItemFilterModel addGlobalIdsItem(Long globalIdsItem) {
    if (this.globalIds == null) {
      this.globalIds = new ArrayList<Long>();
    }
    this.globalIds.add(globalIdsItem);
    return this;
  }

   /**
   * Collection of global (integer) identifiers
   * @return globalIds
  **/
  @Schema(description = "Collection of global (integer) identifiers")
  public List<Long> getGlobalIds() {
    return globalIds;
  }

  public void setGlobalIds(List<Long> globalIds) {
    this.globalIds = globalIds;
  }

  public WorkItemFilterModel attributes(Map<String, List<String>> attributes) {
    this.attributes = attributes;
    return this;
  }

  public WorkItemFilterModel putAttributesItem(String key, List<String> attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<String, List<String>>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

   /**
   * Custom attributes of work item
   * @return attributes
  **/
  @Schema(description = "Custom attributes of work item")
  public Map<String, List<String>> getAttributes() {
    return attributes;
  }

  public void setAttributes(Map<String, List<String>> attributes) {
    this.attributes = attributes;
  }

  public WorkItemFilterModel isDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
    return this;
  }

   /**
   * Is result must consist of only actual/deleted work items
   * @return isDeleted
  **/
  @Schema(description = "Is result must consist of only actual/deleted work items")
  public Boolean isIsDeleted() {
    return isDeleted;
  }

  public void setIsDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
  }

  public WorkItemFilterModel projectIds(List<UUID> projectIds) {
    this.projectIds = projectIds;
    return this;
  }

  public WorkItemFilterModel addProjectIdsItem(UUID projectIdsItem) {
    if (this.projectIds == null) {
      this.projectIds = new ArrayList<UUID>();
    }
    this.projectIds.add(projectIdsItem);
    return this;
  }

   /**
   * Collection of project identifiers
   * @return projectIds
  **/
  @Schema(description = "Collection of project identifiers")
  public List<UUID> getProjectIds() {
    return projectIds;
  }

  public void setProjectIds(List<UUID> projectIds) {
    this.projectIds = projectIds;
  }

  public WorkItemFilterModel sectionIds(List<UUID> sectionIds) {
    this.sectionIds = sectionIds;
    return this;
  }

  public WorkItemFilterModel addSectionIdsItem(UUID sectionIdsItem) {
    if (this.sectionIds == null) {
      this.sectionIds = new ArrayList<UUID>();
    }
    this.sectionIds.add(sectionIdsItem);
    return this;
  }

   /**
   * Collection of section identifiers
   * @return sectionIds
  **/
  @Schema(description = "Collection of section identifiers")
  public List<UUID> getSectionIds() {
    return sectionIds;
  }

  public void setSectionIds(List<UUID> sectionIds) {
    this.sectionIds = sectionIds;
  }

  public WorkItemFilterModel createdByIds(List<UUID> createdByIds) {
    this.createdByIds = createdByIds;
    return this;
  }

  public WorkItemFilterModel addCreatedByIdsItem(UUID createdByIdsItem) {
    if (this.createdByIds == null) {
      this.createdByIds = new ArrayList<UUID>();
    }
    this.createdByIds.add(createdByIdsItem);
    return this;
  }

   /**
   * Collection of identifiers of users who created work item
   * @return createdByIds
  **/
  @Schema(description = "Collection of identifiers of users who created work item")
  public List<UUID> getCreatedByIds() {
    return createdByIds;
  }

  public void setCreatedByIds(List<UUID> createdByIds) {
    this.createdByIds = createdByIds;
  }

  public WorkItemFilterModel modifiedByIds(List<UUID> modifiedByIds) {
    this.modifiedByIds = modifiedByIds;
    return this;
  }

  public WorkItemFilterModel addModifiedByIdsItem(UUID modifiedByIdsItem) {
    if (this.modifiedByIds == null) {
      this.modifiedByIds = new ArrayList<UUID>();
    }
    this.modifiedByIds.add(modifiedByIdsItem);
    return this;
  }

   /**
   * Collection of identifiers of users who applied last modification to work item
   * @return modifiedByIds
  **/
  @Schema(description = "Collection of identifiers of users who applied last modification to work item")
  public List<UUID> getModifiedByIds() {
    return modifiedByIds;
  }

  public void setModifiedByIds(List<UUID> modifiedByIds) {
    this.modifiedByIds = modifiedByIds;
  }

  public WorkItemFilterModel states(List<WorkItemStates> states) {
    this.states = states;
    return this;
  }

  public WorkItemFilterModel addStatesItem(WorkItemStates statesItem) {
    if (this.states == null) {
      this.states = new ArrayList<WorkItemStates>();
    }
    this.states.add(statesItem);
    return this;
  }

   /**
   * Collection of states of work item
   * @return states
  **/
  @Schema(description = "Collection of states of work item")
  public List<WorkItemStates> getStates() {
    return states;
  }

  public void setStates(List<WorkItemStates> states) {
    this.states = states;
  }

  public WorkItemFilterModel priorities(List<WorkItemPriorityModel> priorities) {
    this.priorities = priorities;
    return this;
  }

  public WorkItemFilterModel addPrioritiesItem(WorkItemPriorityModel prioritiesItem) {
    if (this.priorities == null) {
      this.priorities = new ArrayList<WorkItemPriorityModel>();
    }
    this.priorities.add(prioritiesItem);
    return this;
  }

   /**
   * Collection of priorities of work item
   * @return priorities
  **/
  @Schema(description = "Collection of priorities of work item")
  public List<WorkItemPriorityModel> getPriorities() {
    return priorities;
  }

  public void setPriorities(List<WorkItemPriorityModel> priorities) {
    this.priorities = priorities;
  }

  public WorkItemFilterModel entityTypes(List<String> entityTypes) {
    this.entityTypes = entityTypes;
    return this;
  }

  public WorkItemFilterModel addEntityTypesItem(String entityTypesItem) {
    if (this.entityTypes == null) {
      this.entityTypes = new ArrayList<String>();
    }
    this.entityTypes.add(entityTypesItem);
    return this;
  }

   /**
   * Collection of types of work item  &lt;br&gt;Allowed values: &#x60;TestCases&#x60;, &#x60;CheckLists&#x60;, &#x60;SharedSteps&#x60;
   * @return entityTypes
  **/
  @Schema(description = "Collection of types of work item  <br>Allowed values: `TestCases`, `CheckLists`, `SharedSteps`")
  public List<String> getEntityTypes() {
    return entityTypes;
  }

  public void setEntityTypes(List<String> entityTypes) {
    this.entityTypes = entityTypes;
  }

  public WorkItemFilterModel createdDateMinimal(OffsetDateTime createdDateMinimal) {
    this.createdDateMinimal = createdDateMinimal;
    return this;
  }

   /**
   * Minimum date and time of work item creation
   * @return createdDateMinimal
  **/
  @Schema(description = "Minimum date and time of work item creation")
  public OffsetDateTime getCreatedDateMinimal() {
    return createdDateMinimal;
  }

  public void setCreatedDateMinimal(OffsetDateTime createdDateMinimal) {
    this.createdDateMinimal = createdDateMinimal;
  }

  public WorkItemFilterModel createdDateMaximal(OffsetDateTime createdDateMaximal) {
    this.createdDateMaximal = createdDateMaximal;
    return this;
  }

   /**
   * Maximum date and time of work item creation
   * @return createdDateMaximal
  **/
  @Schema(description = "Maximum date and time of work item creation")
  public OffsetDateTime getCreatedDateMaximal() {
    return createdDateMaximal;
  }

  public void setCreatedDateMaximal(OffsetDateTime createdDateMaximal) {
    this.createdDateMaximal = createdDateMaximal;
  }

  public WorkItemFilterModel modifiedDateMinimal(OffsetDateTime modifiedDateMinimal) {
    this.modifiedDateMinimal = modifiedDateMinimal;
    return this;
  }

   /**
   * Minimum date and time of work item last modification
   * @return modifiedDateMinimal
  **/
  @Schema(description = "Minimum date and time of work item last modification")
  public OffsetDateTime getModifiedDateMinimal() {
    return modifiedDateMinimal;
  }

  public void setModifiedDateMinimal(OffsetDateTime modifiedDateMinimal) {
    this.modifiedDateMinimal = modifiedDateMinimal;
  }

  public WorkItemFilterModel modifiedDateMaximal(OffsetDateTime modifiedDateMaximal) {
    this.modifiedDateMaximal = modifiedDateMaximal;
    return this;
  }

   /**
   * Maximum date and time of work item last modification
   * @return modifiedDateMaximal
  **/
  @Schema(description = "Maximum date and time of work item last modification")
  public OffsetDateTime getModifiedDateMaximal() {
    return modifiedDateMaximal;
  }

  public void setModifiedDateMaximal(OffsetDateTime modifiedDateMaximal) {
    this.modifiedDateMaximal = modifiedDateMaximal;
  }

  public WorkItemFilterModel durationMinimal(Integer durationMinimal) {
    this.durationMinimal = durationMinimal;
    return this;
  }

   /**
   * Minimum completion time (seconds) of work item
   * @return durationMinimal
  **/
  @Schema(description = "Minimum completion time (seconds) of work item")
  public Integer getDurationMinimal() {
    return durationMinimal;
  }

  public void setDurationMinimal(Integer durationMinimal) {
    this.durationMinimal = durationMinimal;
  }

  public WorkItemFilterModel durationMaximal(Integer durationMaximal) {
    this.durationMaximal = durationMaximal;
    return this;
  }

   /**
   * Maximum completion time (seconds) of work item
   * @return durationMaximal
  **/
  @Schema(description = "Maximum completion time (seconds) of work item")
  public Integer getDurationMaximal() {
    return durationMaximal;
  }

  public void setDurationMaximal(Integer durationMaximal) {
    this.durationMaximal = durationMaximal;
  }

  public WorkItemFilterModel isAutomated(Boolean isAutomated) {
    this.isAutomated = isAutomated;
    return this;
  }

   /**
   * Is result must consist of only manual/automated work items
   * @return isAutomated
  **/
  @Schema(description = "Is result must consist of only manual/automated work items")
  public Boolean isIsAutomated() {
    return isAutomated;
  }

  public void setIsAutomated(Boolean isAutomated) {
    this.isAutomated = isAutomated;
  }

  public WorkItemFilterModel tagNames(List<String> tagNames) {
    this.tagNames = tagNames;
    return this;
  }

  public WorkItemFilterModel addTagNamesItem(String tagNamesItem) {
    if (this.tagNames == null) {
      this.tagNames = new ArrayList<String>();
    }
    this.tagNames.add(tagNamesItem);
    return this;
  }

   /**
   * Collection of tags
   * @return tagNames
  **/
  @Schema(description = "Collection of tags")
  public List<String> getTagNames() {
    return tagNames;
  }

  public void setTagNames(List<String> tagNames) {
    this.tagNames = tagNames;
  }

  public WorkItemFilterModel autoTestIds(List<UUID> autoTestIds) {
    this.autoTestIds = autoTestIds;
    return this;
  }

  public WorkItemFilterModel addAutoTestIdsItem(UUID autoTestIdsItem) {
    if (this.autoTestIds == null) {
      this.autoTestIds = new ArrayList<UUID>();
    }
    this.autoTestIds.add(autoTestIdsItem);
    return this;
  }

   /**
   * Collection of identifiers of linked autotests
   * @return autoTestIds
  **/
  @Schema(description = "Collection of identifiers of linked autotests")
  public List<UUID> getAutoTestIds() {
    return autoTestIds;
  }

  public void setAutoTestIds(List<UUID> autoTestIds) {
    this.autoTestIds = autoTestIds;
  }

  public WorkItemFilterModel exceptWorkItemIds(List<UUID> exceptWorkItemIds) {
    this.exceptWorkItemIds = exceptWorkItemIds;
    return this;
  }

  public WorkItemFilterModel addExceptWorkItemIdsItem(UUID exceptWorkItemIdsItem) {
    if (this.exceptWorkItemIds == null) {
      this.exceptWorkItemIds = new ArrayList<UUID>();
    }
    this.exceptWorkItemIds.add(exceptWorkItemIdsItem);
    return this;
  }

   /**
   * Get exceptWorkItemIds
   * @return exceptWorkItemIds
  **/
  @Schema(description = "")
  public List<UUID> getExceptWorkItemIds() {
    return exceptWorkItemIds;
  }

  public void setExceptWorkItemIds(List<UUID> exceptWorkItemIds) {
    this.exceptWorkItemIds = exceptWorkItemIds;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkItemFilterModel workItemFilterModel = (WorkItemFilterModel) o;
    return Objects.equals(this.nameOrId, workItemFilterModel.nameOrId) &&
        Objects.equals(this.includeIds, workItemFilterModel.includeIds) &&
        Objects.equals(this.excludeIds, workItemFilterModel.excludeIds) &&
        Objects.equals(this.name, workItemFilterModel.name) &&
        Objects.equals(this.globalIds, workItemFilterModel.globalIds) &&
        Objects.equals(this.attributes, workItemFilterModel.attributes) &&
        Objects.equals(this.isDeleted, workItemFilterModel.isDeleted) &&
        Objects.equals(this.projectIds, workItemFilterModel.projectIds) &&
        Objects.equals(this.sectionIds, workItemFilterModel.sectionIds) &&
        Objects.equals(this.createdByIds, workItemFilterModel.createdByIds) &&
        Objects.equals(this.modifiedByIds, workItemFilterModel.modifiedByIds) &&
        Objects.equals(this.states, workItemFilterModel.states) &&
        Objects.equals(this.priorities, workItemFilterModel.priorities) &&
        Objects.equals(this.entityTypes, workItemFilterModel.entityTypes) &&
        Objects.equals(this.createdDateMinimal, workItemFilterModel.createdDateMinimal) &&
        Objects.equals(this.createdDateMaximal, workItemFilterModel.createdDateMaximal) &&
        Objects.equals(this.modifiedDateMinimal, workItemFilterModel.modifiedDateMinimal) &&
        Objects.equals(this.modifiedDateMaximal, workItemFilterModel.modifiedDateMaximal) &&
        Objects.equals(this.durationMinimal, workItemFilterModel.durationMinimal) &&
        Objects.equals(this.durationMaximal, workItemFilterModel.durationMaximal) &&
        Objects.equals(this.isAutomated, workItemFilterModel.isAutomated) &&
        Objects.equals(this.tagNames, workItemFilterModel.tagNames) &&
        Objects.equals(this.autoTestIds, workItemFilterModel.autoTestIds) &&
        Objects.equals(this.exceptWorkItemIds, workItemFilterModel.exceptWorkItemIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nameOrId, includeIds, excludeIds, name, globalIds, attributes, isDeleted, projectIds, sectionIds, createdByIds, modifiedByIds, states, priorities, entityTypes, createdDateMinimal, createdDateMaximal, modifiedDateMinimal, modifiedDateMaximal, durationMinimal, durationMaximal, isAutomated, tagNames, autoTestIds, exceptWorkItemIds);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkItemFilterModel {\n");
    
    sb.append("    nameOrId: ").append(toIndentedString(nameOrId)).append("\n");
    sb.append("    includeIds: ").append(toIndentedString(includeIds)).append("\n");
    sb.append("    excludeIds: ").append(toIndentedString(excludeIds)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    globalIds: ").append(toIndentedString(globalIds)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
    sb.append("    projectIds: ").append(toIndentedString(projectIds)).append("\n");
    sb.append("    sectionIds: ").append(toIndentedString(sectionIds)).append("\n");
    sb.append("    createdByIds: ").append(toIndentedString(createdByIds)).append("\n");
    sb.append("    modifiedByIds: ").append(toIndentedString(modifiedByIds)).append("\n");
    sb.append("    states: ").append(toIndentedString(states)).append("\n");
    sb.append("    priorities: ").append(toIndentedString(priorities)).append("\n");
    sb.append("    entityTypes: ").append(toIndentedString(entityTypes)).append("\n");
    sb.append("    createdDateMinimal: ").append(toIndentedString(createdDateMinimal)).append("\n");
    sb.append("    createdDateMaximal: ").append(toIndentedString(createdDateMaximal)).append("\n");
    sb.append("    modifiedDateMinimal: ").append(toIndentedString(modifiedDateMinimal)).append("\n");
    sb.append("    modifiedDateMaximal: ").append(toIndentedString(modifiedDateMaximal)).append("\n");
    sb.append("    durationMinimal: ").append(toIndentedString(durationMinimal)).append("\n");
    sb.append("    durationMaximal: ").append(toIndentedString(durationMaximal)).append("\n");
    sb.append("    isAutomated: ").append(toIndentedString(isAutomated)).append("\n");
    sb.append("    tagNames: ").append(toIndentedString(tagNames)).append("\n");
    sb.append("    autoTestIds: ").append(toIndentedString(autoTestIds)).append("\n");
    sb.append("    exceptWorkItemIds: ").append(toIndentedString(exceptWorkItemIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
