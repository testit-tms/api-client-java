/*
 * API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ru.testit.client;

import ru.testit.model.AutoTestAverageDurationModel;
import ru.testit.model.AutoTestModel;
import ru.testit.model.AutoTestPostModel;
import ru.testit.model.AutoTestPutModel;
import org.threeten.bp.OffsetDateTime;
import ru.testit.model.TestResultChronologyModel;
import ru.testit.model.TestResultHistoryReportModel;
import ru.testit.model.TestRunShortModel;
import java.util.UUID;
import ru.testit.model.WorkItemIdModel;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for AutoTestsApi
 */
@Ignore
public class AutoTestsApiTest {

    private final AutoTestsApi api = new AutoTestsApi();

    /**
     * Create AutoTest
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest parameters (listed in the example) and runs method execution  &lt;br&gt;System creates autotest  &lt;br&gt;[Optional] If steps enumeration is set, system creates step items and relates them to autotest  &lt;br&gt;[Optional] If setup enumeration is set, system creates setup items and relates them to autotest  &lt;br&gt;[Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest  &lt;br&gt;[Optional] If label enumeration is set, system creates labels and relates them to autotest  &lt;br&gt;[Optional] If link enumeration is set, system creates links and relates them to autotest  &lt;br&gt;System returns autotest model (example listed in response parameters)
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createAutoTestTest() throws Exception {
        AutoTestPostModel body = null;
        AutoTestModel response = api.createAutoTest(body);

        // TODO: test validations
    }
    /**
     * Create AutoTests multiple
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest parameters (listed in the example) and runs method execution  &lt;br&gt;System creates autotest  &lt;br&gt;[Optional] If steps enumeration is set, system creates step items and relates them to autotest  &lt;br&gt;[Optional] If setup enumeration is set, system creates setup items and relates them to autotest  &lt;br&gt;[Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest  &lt;br&gt;[Optional] If label enumeration is set, system creates labels and relates them to autotest  &lt;br&gt;[Optional] If link enumeration is set, system creates links and relates them to autotest  &lt;br&gt;System returns autotest model (example listed in response parameters)
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createMultipleTest() throws Exception {
        List<AutoTestPostModel> body = null;
        List<AutoTestModel> response = api.createMultiple(body);

        // TODO: test validations
    }
    /**
     * Delete AutoTest by Id or GlobalId
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest internal (guid format) or global (integer format) identifier and runs method execution  &lt;br&gt;System finds the autotest by the identifier  &lt;br&gt;System deletes autotest and returns no content response
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteAutoTestTest() throws Exception {
        String autoTestId = null;
        api.deleteAutoTest(autoTestId);

        // TODO: test validations
    }
    /**
     * Delete AutoTest link from WorkItem by Id or GlobalId  (if workItemId is not specified, then remove all links WorkItems to AutoTest)
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest internal (guid format) or global (integer format) identifier  &lt;br&gt;[Optional] User sets workitem internal (guid format) or global (integer format) identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System finds the autotest by the autotest identifier  &lt;br&gt;                      [Optional] if workitem id is set by User, System finds the workitem by the workitem identifier and unlinks it                      from autotest.                    &lt;br&gt;[Optional] Otherwise, if workitem id is not specified, System unlinks all workitems linked to autotest.  &lt;br&gt;System returns no content response
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteAutoTestLinkFromWorkItemTest() throws Exception {
        String autoTestId = null;
        String workItemId = null;
        api.deleteAutoTestLinkFromWorkItem(autoTestId, workItemId);

        // TODO: test validations
    }
    /**
     * Get all AutoTests (if parameters are specified, then it&#x27;s filtered by them.)
     *
     * &lt;br&gt;Use case  &lt;br&gt;[Optional] User sets search parameters (listed in request parameters) and runs method execution  &lt;br&gt;System returns all autotests, matching search criteria
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAllAutoTestsTest() throws Exception {
        UUID projectId = null;
        String externalId = null;
        Long globalId = null;
        String namespace = null;
        Boolean isNamespaceNull = null;
        String classname = null;
        Boolean isClassnameNull = null;
        Boolean isDeleted = null;
        List<String> labels = null;
        Integer stabilityMinimal = null;
        Integer stabilityMaximal = null;
        Boolean isFlaky = null;
        Boolean includeSteps = null;
        Boolean includeLabels = null;
          = null;
          = null;
          = null;
          = null;
          = null;
        List<AutoTestModel> response = api.getAllAutoTests(projectId, externalId, globalId, namespace, isNamespaceNull, classname, isClassnameNull, isDeleted, labels, stabilityMinimal, stabilityMaximal, isFlaky, includeSteps, includeLabels, , , , , );

        // TODO: test validations
    }
    /**
     * Get AutoTest average duration by Id or GlobalId
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest internal (guid format) or global (integer format) identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System calculates pass average duration and fail average duration of autotest from all related test results  &lt;br&gt;System returns pass average duration and fail average duration for autotest
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAutoTestAverageDurationTest() throws Exception {
        String autoTestId = null;
        AutoTestAverageDurationModel response = api.getAutoTestAverageDuration(autoTestId);

        // TODO: test validations
    }
    /**
     * Get AutoTest by Id or GlobalId
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest internal or global identifier and runs method execution  &lt;br&gt;                      System returns autotest, which internal or global identifier equals the identifier value set in the previous                      action                  
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAutoTestByIdTest() throws Exception {
        String autoTestId = null;
        AutoTestModel response = api.getAutoTestById(autoTestId);

        // TODO: test validations
    }
    /**
     * Get AutoTest chronology by Id or GlobalId
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest internal (guid format) or global (integer format) identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search all test results related to autotest (with default limit equal 100)  &lt;br&gt;                      System orders the test results by CompletedOn property descending and then orders by CreatedDate property                      descending                    &lt;br&gt;System returns test result chronology for autotest
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAutoTestChronologyTest() throws Exception {
        String autoTestId = null;
        List<TestResultChronologyModel> response = api.getAutoTestChronology(autoTestId);

        // TODO: test validations
    }
    /**
     * Stopped and completed TestRuns which contain AutoTest by Id or GlobalId
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest internal (guid format) or global (integer format) identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search for all test runs related to the autotest  &lt;br&gt;System returns the enumeration of test runs
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getTestRunsTest() throws Exception {
        String autoTestId = null;
        List<TestRunShortModel> response = api.getTestRuns(autoTestId);

        // TODO: test validations
    }
    /**
     * History of TestResults for AutoTest by Id or GlobalId
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest internal (guid format) or global (integer format) identifier  &lt;br&gt;User sets getTestResultHistoryReportQuery (listed in the example)  &lt;br&gt;User runs method execution  &lt;br&gt;System search for test results using filters set by user in getTestResultHistoryReportQuery and autoTestId  &lt;br&gt;System returns the enumeration of test results
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getWorkItemResultsTest() throws Exception {
        String autoTestId = null;
        OffsetDateTime from = null;
        OffsetDateTime to = null;
        List<UUID> configurationIds = null;
        List<UUID> testPlanIds = null;
        List<UUID> userIds = null;
        List<String> outcomes = null;
        Boolean isAutomated = null;
        List<UUID> testRunIds = null;
          = null;
          = null;
          = null;
          = null;
          = null;
        List<TestResultHistoryReportModel> response = api.getWorkItemResults(autoTestId, from, to, configurationIds, testPlanIds, userIds, outcomes, isAutomated, testRunIds, , , , , );

        // TODO: test validations
    }
    /**
     * Get all WorkItems Ids linked to AutoTest by Id or GlobalId
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest internal (guid format) or global (integer format) identifier and runs method execution  &lt;br&gt;System finds the autotest by the identifier  &lt;br&gt;System finds all actual and not deleted WorkItems related to the found autotest  &lt;br&gt;System returns the enumeration of WorkItems
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getWorkItemsLinkedToAutoTestTest() throws Exception {
        String autoTestId = null;
        Boolean isWorkItemDeleted = null;
        List<WorkItemIdModel> response = api.getWorkItemsLinkedToAutoTest(autoTestId, isWorkItemDeleted);

        // TODO: test validations
    }
    /**
     * Link AutoTest to WorkItem by Id or GlobalId
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest internal (guid format) or global (integer format) identifier  &lt;br&gt;User sets workitem internal (guid format) or global (integer format) identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System finds the autotest by the autotest identifier  &lt;br&gt;System finds the workitem by the workitem identifier  &lt;br&gt;System relates the workitem with the autotest and returns no content response
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void linkAutoTestToWorkItemTest() throws Exception {
        String autoTestId = null;
        WorkItemIdModel body = null;
        api.linkAutoTestToWorkItem(autoTestId, body);

        // TODO: test validations
    }
    /**
     * Update AutoTest
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest updated parameters values (listed in the example) and runs method execution  &lt;br&gt;System finds the autotest by the identifier  &lt;br&gt;System updates autotest parameters   &lt;br&gt;                      [Optional] If steps enumeration is set, system creates step items, relates them to autotest                      and deletes relations with current steps( if exist)                    &lt;br&gt;                      [Optional] If Setup enumeration is set, system creates setup items and relates them to autotest                      and deletes relations with current Setup items (if exist)                    &lt;br&gt;                      [Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest                      and deletes relations with current teardown items (if exist)                    &lt;br&gt;                      [Optional] If label enumeration is set, system creates labels and relates them to autotest                      and deletes relations with current Labels (if exist)                    &lt;br&gt;                      [Optional] If link enumeration is set, system creates links and relates them to autotest                      and deletes relations with current Links (if exist)                    &lt;br&gt;System updates autotest and returns no content response
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateAutoTestTest() throws Exception {
        AutoTestPutModel body = null;
        api.updateAutoTest(body);

        // TODO: test validations
    }
    /**
     * Update AutoTests multiple
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets autotest updated parameters values (listed in the example) and runs method execution  &lt;br&gt;System finds the autotest by the identifier  &lt;br&gt;System updates autotest parameters   &lt;br&gt;                      [Optional] If steps enumeration is set, system creates step items, relates them to autotest                      and deletes relations with current steps( if exist)                    &lt;br&gt;                      [Optional] If Setup enumeration is set, system creates setup items and relates them to autotest                      and deletes relations with current Setup items (if exist)                    &lt;br&gt;                      [Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest                      and deletes relations with current teardown items (if exist)                    &lt;br&gt;                      [Optional] If label enumeration is set, system creates labels and relates them to autotest                      and deletes relations with current Labels (if exist)                    &lt;br&gt;                      [Optional] If link enumeration is set, system creates links and relates them to autotest                      and deletes relations with current Links (if exist)                    &lt;br&gt;System updates autotest and returns no content response
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateMultipleTest() throws Exception {
        List<AutoTestPutModel> body = null;
        api.updateMultiple(body);

        // TODO: test validations
    }
}
