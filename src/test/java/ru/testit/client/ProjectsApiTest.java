/*
 * API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ru.testit.client;

import ru.testit.model.AutoTestNamespaceModel;
import ru.testit.model.ConfigurationModel;
import ru.testit.model.CustomAttributeModel;
import ru.testit.model.CustomAttributePostModel;
import ru.testit.model.CustomAttributeTestPlanProjectRelationPutModel;
import java.io.File;
import org.threeten.bp.OffsetDateTime;
import ru.testit.model.ProblemDetails;
import ru.testit.model.ProjectExportQueryModel;
import ru.testit.model.ProjectExportWithTestPlansPostModel;
import ru.testit.model.ProjectModel;
import ru.testit.model.ProjectPostModel;
import ru.testit.model.ProjectPutModel;
import ru.testit.model.SectionModel;
import ru.testit.model.TestPlanModel;
import ru.testit.model.TestRunV2GetModel;
import java.util.UUID;
import ru.testit.model.WorkItemShortModel;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for ProjectsApi
 */
@Ignore
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Import Project from json file  Project can be imported only once (this method or ImportToExistingProject)  Next import will sync content in previously imported project.
     *
     * &lt;br&gt;Use case  &lt;br&gt;User attaches project as json file taken from export or export-by-testPlans method  &lt;br&gt;User runs method execution  &lt;br&gt;System creates project  &lt;br&gt;System returns no content response
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void callImportTest() throws Exception {
        File file = null;
        String apiVersion = null;
        Boolean includeAttachments = null;
        api.callImport(file, apiVersion, includeAttachments);

        // TODO: test validations
    }
    /**
     * Add attributes to project for test plans
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and attributes identifiers  &lt;br&gt;User runs method execution  &lt;br&gt;System updates project and add attributes to project for test plans  &lt;br&gt;System returns no content response
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createCustomAttributeTestPlanProjectRelationsTest() throws Exception {
        String projectId = null;
        List<UUID> body = null;
        api.createCustomAttributeTestPlanProjectRelations(projectId, body);

        // TODO: test validations
    }
    /**
     * Create Project
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project parameters (listed in request example) and runs method execution  &lt;br&gt;System creates project  &lt;br&gt;System returns project model (example listed in response parameters)
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createProjectTest() throws Exception {
        ProjectPostModel body = null;
        ProjectModel response = api.createProject(body);

        // TODO: test validations
    }
    /**
     * Create Projects Attribute
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets attribute parameters (listed in request example) and runs method execution  &lt;br&gt;System search project  &lt;br&gt;System creates attribute and relates it to the project  &lt;br&gt;System returns project attribute properties (example listed in response parameters)
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createProjectsAttributeTest() throws Exception {
        String projectId = null;
        CustomAttributePostModel body = null;
        CustomAttributeModel response = api.createProjectsAttribute(projectId, body);

        // TODO: test validations
    }
    /**
     * Delete attribute from project for test plans
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and attribute identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System updates project and delete attribute from project for test plans  &lt;br&gt;System returns no content response
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteCustomAttributeTestPlanProjectRelationsTest() throws Exception {
        String projectId = null;
        UUID attributeId = null;
        api.deleteCustomAttributeTestPlanProjectRelations(projectId, attributeId);

        // TODO: test validations
    }
    /**
     * Delete Project by Id or GlobalId
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search and delete project  &lt;br&gt;System returns no content response
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteProjectTest() throws Exception {
        String projectId = null;
        api.deleteProject(projectId);

        // TODO: test validations
    }
    /**
     * Delete all AutoTests from Project
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System delete all autotests from project  &lt;br&gt;System returns no content response
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteProjectAutoTestsTest() throws Exception {
        String projectId = null;
        api.deleteProjectAutoTests(projectId);

        // TODO: test validations
    }
    /**
     * Delete Projects Attribute by Id
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project identifier and runs method execution  &lt;br&gt;User sets attribute identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search and delete attribute  &lt;br&gt;System returns no content response
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteProjectsAttributeTest() throws Exception {
        String projectId = null;
        UUID attributeId = null;
        api.deleteProjectsAttribute(projectId, attributeId);

        // TODO: test validations
    }
    /**
     * Export Project with tests, sections and configurations in json file
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;                      System returns project data as json file, containing project data, related attributes, sections and                      workitems                  
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void exportTest() throws Exception {
        String projectId = null;
        ProjectExportQueryModel body = null;
        Boolean includeAttachments = null;
        File response = api.export(projectId, body, includeAttachments);

        // TODO: test validations
    }
    /**
     * Export Project with tests, sections, configurations, testPlans, testSuites and testPoints as json file
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;                      System returns project data as json file, containing project data, related attributes, sections, workitems,                      test plans, test suites, test points and configurations                  
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void exportWithTestPlansAndConfigurationsTest() throws Exception {
        String projectId = null;
        ProjectExportWithTestPlansPostModel body = null;
        Boolean includeAttachments = null;
        File response = api.exportWithTestPlansAndConfigurations(projectId, body, includeAttachments);

        // TODO: test validations
    }
    /**
     * Get all Projects (if isDeleted is true, return deleted Projects)
     *
     * &lt;br&gt;Use case  &lt;br&gt;[Optional] User sets isDeleted field value  &lt;br&gt;[Optional] If User sets isDeleted field value as true, System search all deleted projects  &lt;br&gt;[Optional] If User sets isDeleted field value as false, System search all projects which are not deleted  &lt;br&gt;If User did not set isDeleted field value, System search all projects  &lt;br&gt;System returns array of all found projects(listed in response model)
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAllProjectsTest() throws Exception {
        Boolean isDeleted = null;
        String projectName = null;
          = null;
          = null;
          = null;
          = null;
          = null;
        List<ProjectModel> response = api.getAllProjects(isDeleted, projectName, , , , , );

        // TODO: test validations
    }
    /**
     * Get Projects Attribute by Id
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;User sets project attribute identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search project attribute   &lt;br&gt;System returns project attribute (listed in response model)
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAttributeByProjectIdTest() throws Exception {
        String projectId = null;
        UUID attributeId = null;
        CustomAttributeModel response = api.getAttributeByProjectId(projectId, attributeId);

        // TODO: test validations
    }
    /**
     * Get Projects Attributes by Id or GlobalId
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;[Optional] User sets isDeleted field value  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;                      [Optional] If User sets isDeleted field value as true, System search all deleted attributes related to                      project                    &lt;br&gt;                      [Optional] If User sets isDeleted field value as false, System search all attributes related to project which                      are not deleted                    &lt;br&gt;[Optional] If User did not set isDeleted field value, System search all attributes related to project  &lt;br&gt;System returns array of found attributes (listed in response model)
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAttributesByProjectIdTest() throws Exception {
        String projectId = null;
        Boolean isDeleted = null;
        List<CustomAttributeModel> response = api.getAttributesByProjectId(projectId, isDeleted);

        // TODO: test validations
    }
    /**
     * Get AutoTests Namespaces for Project by Id or GlobalId
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search all autotest related to the project  &lt;br&gt;System returns array of autotest with namespaces and classnames (listed in response)
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAutoTestsNamespacesTest() throws Exception {
        String projectId = null;
        List<AutoTestNamespaceModel> response = api.getAutoTestsNamespaces(projectId);

        // TODO: test validations
    }
    /**
     * Get Configurations for Project by Id or GlobalId
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search all configurations related to project  &lt;br&gt;System returns array of found configurations (listed in response model)
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getConfigurationsByProjectIdTest() throws Exception {
        String projectId = null;
        List<ConfigurationModel> response = api.getConfigurationsByProjectId(projectId);

        // TODO: test validations
    }
    /**
     * Get project for test plans attributes
     *
     * &lt;br&gt;Use case  &lt;br&gt;User runs method execution  &lt;br&gt;System returns project for test plans attributes by project identifier
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCustomAttributeTestPlanProjectRelationsTest() throws Exception {
        String projectId = null;
        List<CustomAttributeModel> response = api.getCustomAttributeTestPlanProjectRelations(projectId);

        // TODO: test validations
    }
    /**
     * Get Project by Id or GlobalId
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search project  &lt;br&gt;System returns project (example listed in response parameters)
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getProjectByIdTest() throws Exception {
        String projectId = null;
        ProjectModel response = api.getProjectById(projectId);

        // TODO: test validations
    }
    /**
     * Get Sections for Project by Id or GlobalId
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search all sections related to the project  &lt;br&gt;System returns array of sections (listed in response)
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getSectionsByProjectIdTest() throws Exception {
        String projectId = null;
          = null;
          = null;
          = null;
          = null;
          = null;
        List<SectionModel> response = api.getSectionsByProjectId(projectId, , , , , );

        // TODO: test validations
    }
    /**
     * Get TestPlans for Project by Id or GlobalId (if isDeleted is true, return deleted TestPlans)
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;[Optional] User sets isDeleted field value  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;                      [Optional] If User sets isDeleted field value as true, System search all deleted test plans related to                      project                    &lt;br&gt;                      [Optional] If User sets isDeleted field value as false, System search all test plans related to project which                      are not deleted                    &lt;br&gt;[Optional] If User did not set isDeleted field value, System search all v related to project  &lt;br&gt;System returns array of found test plans (listed in response model)
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getTestPlansByProjectIdTest() throws Exception {
        String projectId = null;
        Boolean isDeleted = null;
        List<TestPlanModel> response = api.getTestPlansByProjectId(projectId, isDeleted);

        // TODO: test validations
    }
    /**
     * Get TestRuns for Project by Id or GlobalId
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search all test runs related to project  &lt;br&gt;System returns array of found test runs (listed in response model)
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getTestRunsByProjectIdTest() throws Exception {
        String projectId = null;
        Boolean notStarted = null;
        Boolean inProgress = null;
        Boolean stopped = null;
        Boolean completed = null;
        OffsetDateTime createdDateFrom = null;
        OffsetDateTime createdDateTo = null;
        UUID testPlanId = null;
          = null;
          = null;
          = null;
          = null;
          = null;
        List<TestRunV2GetModel> response = api.getTestRunsByProjectId(projectId, notStarted, inProgress, stopped, completed, createdDateFrom, createdDateTo, testPlanId, , , , , );

        // TODO: test validations
    }
    /**
     * Get WorkItems for Project by Id or GlobalId (if isDeleted is true, return deleted WorkItems)
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;[Optional] User sets isDeleted field value  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;[Optional] If User sets isDeleted field value as true, System search all deleted workitems related to project  &lt;br&gt;                      [Optional] If User sets isDeleted field value as false, System search all workitems related to project which                      are not deleted                    &lt;br&gt;If User did not set isDeleted field value, System search all  workitems related to project  &lt;br&gt;System returns array of found workitems (listed in response model)
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getWorkItemsByProjectIdTest() throws Exception {
        String projectId = null;
        Boolean isDeleted = null;
        List<String> tagNames = null;
        Boolean includeIterations = null;
          = null;
          = null;
          = null;
          = null;
          = null;
        List<WorkItemShortModel> response = api.getWorkItemsByProjectId(projectId, isDeleted, tagNames, includeIterations, , , , , );

        // TODO: test validations
    }
    /**
     * Import to existing Project from json file.  Sections can be imported in only one target project!
     *
     * &lt;br&gt;Use case  &lt;br&gt;User attaches project as json file taken from export or export-by-testPlans method  &lt;br&gt;User runs method execution  &lt;br&gt;System updates project  &lt;br&gt;System returns no content response
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void importToExistingProjectTest() throws Exception {
        String projectId = null;
        File file = null;
        String apiVersion = null;
        Boolean includeAttachments = null;
        api.importToExistingProject(projectId, file, apiVersion, includeAttachments);

        // TODO: test validations
    }
    /**
     * Restore Project by Id or GlobalId
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search and restores deleted project  &lt;br&gt;System returns no content response
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void restoreProjectTest() throws Exception {
        String projectId = null;
        api.restoreProject(projectId);

        // TODO: test validations
    }
    /**
     * Update project attribute for test plan
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and attribute model  &lt;br&gt;User runs method execution  &lt;br&gt;System updates project and project attribute for test plan  &lt;br&gt;System returns no content response
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateCustomAttributeTestPlanProjectRelationsTest() throws Exception {
        String projectId = null;
        CustomAttributeTestPlanProjectRelationPutModel body = null;
        api.updateCustomAttributeTestPlanProjectRelations(projectId, body);

        // TODO: test validations
    }
    /**
     * Update Project
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project parameters (listed in request example) and runs method execution  &lt;br&gt;System updates project  &lt;br&gt;System returns updated project model (example listed in response parameters)
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateProjectTest() throws Exception {
        ProjectPutModel body = null;
        api.updateProject(body);

        // TODO: test validations
    }
    /**
     * Update Projects Attribute
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project parameters (listed in request example) and runs method execution  &lt;br&gt;System updates project  &lt;br&gt;System updates attribute related to the project  &lt;br&gt;System returns no content response
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateProjectsAttributeTest() throws Exception {
        String projectId = null;
        CustomAttributeModel body = null;
        api.updateProjectsAttribute(projectId, body);

        // TODO: test validations
    }
}
