/*
 * API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ru.testit.client;

import ru.testit.model.SectionMoveModel;
import ru.testit.model.SectionPostModel;
import ru.testit.model.SectionPutModel;
import ru.testit.model.SectionRenameModel;
import ru.testit.model.SectionWithStepsModel;
import java.util.UUID;
import ru.testit.model.WorkItemShortModel;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for SectionsApi
 */
@Ignore
public class SectionsApiTest {

    private final SectionsApi api = new SectionsApi();

    /**
     * Create Section
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets section properties (listed in request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System creates section property values  &lt;br&gt;System returns section (listed in response example)
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createSectionTest() throws Exception {
        SectionPostModel body = null;
        SectionWithStepsModel response = api.createSection(body);

        // TODO: test validations
    }
    /**
     * Delete Section by id
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets section identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search section by the identifier  &lt;br&gt;System search and delete nested sections of the found section  &lt;br&gt;System search and delete workitems related to the found nested sections  &lt;br&gt;System deletes initial section and related workitem  &lt;br&gt;System returns no content response
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteSectionTest() throws Exception {
        UUID sectionId = null;
        api.deleteSection(sectionId);

        // TODO: test validations
    }
    /**
     * Get Section by id
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets section internal (guid format) identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search section by the section identifier  &lt;br&gt;                      [Optional] If isDeleted flag equals false, deleted workitems are not being searched.                      If true, deleted workitems are also being searched, null for all workitems.                    &lt;br&gt;System returns section
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getSectionByIdTest() throws Exception {
        UUID sectionId = null;
        Boolean isDeleted = null;
        SectionWithStepsModel response = api.getSectionById(sectionId, isDeleted);

        // TODO: test validations
    }
    /**
     * Get WorkItems for Section (if isDeleted is true, return deleted WorkItems)
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets section identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search section by the identifier  &lt;br&gt;System search workitems related to the section  &lt;br&gt;                      [Optional] If isDeleted flag equals false, deleted workitems are not being searched.                      If true, deleted workitems are also being searched, null for all workitems.                    &lt;br&gt;System returns workitem collection
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getWorkItemsBySectionIdTest() throws Exception {
        UUID sectionId = null;
        Boolean isDeleted = null;
        List<String> tagNames = null;
        Boolean includeIterations = null;
          = null;
          = null;
          = null;
          = null;
          = null;
        List<WorkItemShortModel> response = api.getWorkItemsBySectionId(sectionId, isDeleted, tagNames, includeIterations, , , , , );

        // TODO: test validations
    }
    /**
     * Move Section. Can be moved inside another section. It is possible to indicate a project
     *
     * &lt;br&gt;Use case  &lt;br&gt;                      User sets section identifier, old parent identifier, parent identifier and  next section identifier (listed                      in request example)                    &lt;br&gt;User runs method execution  &lt;br&gt;System search section by the identifier  &lt;br&gt;System unlink section from the old parent and links to the new one  &lt;br&gt;System updates section rank using the next section identifier  &lt;br&gt;System returns no content response
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void moveTest() throws Exception {
        SectionMoveModel body = null;
        api.move(body);

        // TODO: test validations
    }
    /**
     * Rename Section
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets section identifier and new name (listed in request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System search section by the identifier  &lt;br&gt;System updates section name using the new name  &lt;br&gt;System returns no content response
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void renameTest() throws Exception {
        SectionRenameModel body = null;
        api.rename(body);

        // TODO: test validations
    }
    /**
     * Update Section
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets section properties (listed in request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System search section by the identifier  &lt;br&gt;System updates section using the property values  &lt;br&gt;System returns no content response
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateSectionTest() throws Exception {
        SectionPutModel body = null;
        api.updateSection(body);

        // TODO: test validations
    }
}
