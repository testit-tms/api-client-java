/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.api;

import ru.testit.client.invoker.ApiException;
import ru.testit.client.model.ApiV2ConfigurationsCreateByParametersPostRequest;
import ru.testit.client.model.ApiV2ConfigurationsPurgeBulkPostRequest;
import ru.testit.client.model.ApiV2ConfigurationsPutRequest;
import ru.testit.client.model.ApiV2ConfigurationsSearchPostRequest;
import ru.testit.client.model.ConfigurationModel;
import ru.testit.client.model.CreateConfigurationRequest;
import ru.testit.client.model.Operation;
import ru.testit.client.model.ProblemDetails;
import java.util.UUID;
import ru.testit.client.model.ValidationProblemDetails;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConfigurationsApi
 */
@Disabled
public class ConfigurationsApiTest {

    private final ConfigurationsApi api = new ConfigurationsApi();

    /**
     * Create configurations by parameters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2ConfigurationsCreateByParametersPostTest() throws ApiException {
        ApiV2ConfigurationsCreateByParametersPostRequest apiV2ConfigurationsCreateByParametersPostRequest = null;
        List<UUID> response = api.apiV2ConfigurationsCreateByParametersPost(apiV2ConfigurationsCreateByParametersPostRequest);
        // TODO: test validations
    }

    /**
     * Delete multiple configurations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2ConfigurationsDeleteBulkPostTest() throws ApiException {
        ApiV2ConfigurationsPurgeBulkPostRequest apiV2ConfigurationsPurgeBulkPostRequest = null;
        Integer response = api.apiV2ConfigurationsDeleteBulkPost(apiV2ConfigurationsPurgeBulkPostRequest);
        // TODO: test validations
    }

    /**
     * Delete configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2ConfigurationsIdDeleteTest() throws ApiException {
        String id = null;
        api.apiV2ConfigurationsIdDelete(id);
        // TODO: test validations
    }

    /**
     * Patch configuration
     *
     * See &lt;a href&#x3D;\&quot;https://www.rfc-editor.org/rfc/rfc6902\&quot; target&#x3D;\&quot;_blank\&quot;&gt;RFC 6902: JavaScript Object Notation (JSON) Patch&lt;/a&gt; for details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2ConfigurationsIdPatchTest() throws ApiException {
        UUID id = null;
        List<Operation> operation = null;
        api.apiV2ConfigurationsIdPatch(id, operation);
        // TODO: test validations
    }

    /**
     * Permanently delete configuration from archive
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2ConfigurationsIdPurgePostTest() throws ApiException {
        String id = null;
        api.apiV2ConfigurationsIdPurgePost(id);
        // TODO: test validations
    }

    /**
     * Restore configuration from the archive
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2ConfigurationsIdRestorePostTest() throws ApiException {
        String id = null;
        api.apiV2ConfigurationsIdRestorePost(id);
        // TODO: test validations
    }

    /**
     * Permanently delete multiple archived configurations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2ConfigurationsPurgeBulkPostTest() throws ApiException {
        ApiV2ConfigurationsPurgeBulkPostRequest apiV2ConfigurationsPurgeBulkPostRequest = null;
        api.apiV2ConfigurationsPurgeBulkPost(apiV2ConfigurationsPurgeBulkPostRequest);
        // TODO: test validations
    }

    /**
     * Edit configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2ConfigurationsPutTest() throws ApiException {
        ApiV2ConfigurationsPutRequest apiV2ConfigurationsPutRequest = null;
        api.apiV2ConfigurationsPut(apiV2ConfigurationsPutRequest);
        // TODO: test validations
    }

    /**
     * Restore multiple configurations from the archive
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2ConfigurationsRestoreBulkPostTest() throws ApiException {
        ApiV2ConfigurationsPurgeBulkPostRequest apiV2ConfigurationsPurgeBulkPostRequest = null;
        Integer response = api.apiV2ConfigurationsRestoreBulkPost(apiV2ConfigurationsPurgeBulkPostRequest);
        // TODO: test validations
    }

    /**
     * Search for configurations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2ConfigurationsSearchPostTest() throws ApiException {
        Integer skip = null;
        Integer take = null;
        String orderBy = null;
        String searchField = null;
        String searchValue = null;
        ApiV2ConfigurationsSearchPostRequest apiV2ConfigurationsSearchPostRequest = null;
        List<ConfigurationModel> response = api.apiV2ConfigurationsSearchPost(skip, take, orderBy, searchField, searchValue, apiV2ConfigurationsSearchPostRequest);
        // TODO: test validations
    }

    /**
     * Create Configuration
     *
     *  Use case   User sets configuration model (listed in the request example)   User runs method execution   System creates configuration   System returns created configuration (listed in the response example)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createConfigurationTest() throws ApiException {
        CreateConfigurationRequest createConfigurationRequest = null;
        ConfigurationModel response = api.createConfiguration(createConfigurationRequest);
        // TODO: test validations
    }

    /**
     * Get configuration by internal or global ID
     *
     *  Use case   User sets configuration internal (guid format) or global (integer format) identifier   User runs method execution   System search configuration using the identifier   System returns configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConfigurationByIdTest() throws ApiException {
        String id = null;
        ConfigurationModel response = api.getConfigurationById(id);
        // TODO: test validations
    }

}
