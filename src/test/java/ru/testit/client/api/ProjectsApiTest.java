/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.api;

import ru.testit.client.invoker.*;
import ru.testit.client.invoker.auth.*;
import ru.testit.client.model.AutoTestNamespaceModel;
import ru.testit.client.model.ConfigurationModel;
import ru.testit.client.model.CustomAttributeModel;
import ru.testit.client.model.CustomAttributePostModel;
import ru.testit.client.model.CustomAttributePutModel;
import ru.testit.client.model.CustomAttributeTestPlanProjectRelationPutModel;
import ru.testit.client.model.FailureClassModel;
import java.io.File;
import ru.testit.client.model.FilterModel;
import java.time.OffsetDateTime;
import ru.testit.client.model.ProblemDetails;
import ru.testit.client.model.ProjectExportQueryModel;
import ru.testit.client.model.ProjectExportWithTestPlansPostModel;
import ru.testit.client.model.ProjectModel;
import ru.testit.client.model.ProjectPostModel;
import ru.testit.client.model.ProjectPutModel;
import ru.testit.client.model.ProjectSelectModel;
import ru.testit.client.model.PublicTestRunModel;
import ru.testit.client.model.SectionModel;
import ru.testit.client.model.TagShortModel;
import ru.testit.client.model.TestPlanModel;
import ru.testit.client.model.TestPlanSearchQueryModel;
import ru.testit.client.model.TestPlanWithAnalyticModel;
import ru.testit.client.model.TestRunModel;
import ru.testit.client.model.TestRunV2GetModel;
import java.util.UUID;
import ru.testit.client.model.ValidationProblemDetails;
import ru.testit.client.model.WorkItemShortModel;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Delete CustomAttributeTemplate from Project
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User sets attribute template internal identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System delete attribute template from project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2ProjectsIdCustomAttributeTemplatesTemplateIdDeleteTest() throws ApiException {
        //String id = null;
        //UUID templateId = null;
        //api.apiV2ProjectsIdCustomAttributeTemplatesTemplateIdDelete(id, templateId);
        // TODO: test validations
    }

    /**
     * Add CustomAttributeTemplate to Project
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User sets attribute template internal identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System add attribute template to project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2ProjectsIdCustomAttributeTemplatesTemplateIdPostTest() throws ApiException {
        //String id = null;
        //UUID templateId = null;
        //api.apiV2ProjectsIdCustomAttributeTemplatesTemplateIdPost(id, templateId);
        // TODO: test validations
    }

    /**
     * Get Project FailureClasses
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System returns project failre classes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2ProjectsIdFailureClassesGetTest() throws ApiException {
        //String id = null;
        //Boolean isDeleted = null;
        //List<FailureClassModel> response = api.apiV2ProjectsIdFailureClassesGet(id, isDeleted);
        // TODO: test validations
    }

    /**
     * Mark Project as favorite
     *
     * User permissions for project:  {Read only}  {Execute}  {Write}  {Full control}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2ProjectsIdFavoritePutTest() throws ApiException {
        //String id = null;
        //api.apiV2ProjectsIdFavoritePut(id);
        // TODO: test validations
    }

    /**
     * Get Project filters
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System returns project filters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2ProjectsIdFiltersGetTest() throws ApiException {
        //String id = null;
        //List<FilterModel> response = api.apiV2ProjectsIdFiltersGet(id);
        // TODO: test validations
    }

    /**
     * Get TestPlans analytics
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal identifier  &lt;br&gt;User sets query params  &lt;br&gt;User runs method execution  &lt;br&gt;System return analytics
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2ProjectsIdTestPlansAnalyticsGetTest() throws ApiException {
        //UUID id = null;
        //Boolean isDeleted = null;
        //Boolean mustUpdateCache = null;
        //Integer skip = null;
        //Integer take = null;
        //String orderBy = null;
        //String searchField = null;
        //String searchValue = null;
        //List<TestPlanWithAnalyticModel> response = api.apiV2ProjectsIdTestPlansAnalyticsGet(id, isDeleted, mustUpdateCache, skip, take, orderBy, searchField, searchValue);
        // TODO: test validations
    }

    /**
     * Get Project TestPlans with analytics
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User sets request body   &lt;br&gt;User runs method execution  &lt;br&gt;System returns project testplans with analytics
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2ProjectsIdTestPlansSearchPostTest() throws ApiException {
        //String id = null;
        //Boolean mustUpdateCache = null;
        //Integer skip = null;
        //Integer take = null;
        //String orderBy = null;
        //String searchField = null;
        //String searchValue = null;
        //TestPlanSearchQueryModel testPlanSearchQueryModel = null;
        //List<TestPlanWithAnalyticModel> response = api.apiV2ProjectsIdTestPlansSearchPost(id, mustUpdateCache, skip, take, orderBy, searchField, searchValue, testPlanSearchQueryModel);
        // TODO: test validations
    }

    /**
     * Get active Project TestRuns
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System returns active testruns
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2ProjectsIdTestRunsActiveGetTest() throws ApiException {
        //String id = null;
        //List<PublicTestRunModel> response = api.apiV2ProjectsIdTestRunsActiveGet(id);
        // TODO: test validations
    }

    /**
     * Get Project TestRuns full models
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User sets query params   &lt;br&gt;User runs method execution  &lt;br&gt;System returns project test runs full models
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2ProjectsIdTestRunsFullGetTest() throws ApiException {
        //String id = null;
        //Boolean includeTestResults = null;
        //Boolean mustAggregateTestResults = null;
        //Boolean notStarted = null;
        //Boolean inProgress = null;
        //Boolean stopped = null;
        //Boolean completed = null;
        //OffsetDateTime createdDateFrom = null;
        //OffsetDateTime createdDateTo = null;
        //UUID testPlanId = null;
        //Integer skip = null;
        //Integer take = null;
        //String orderBy = null;
        //String searchField = null;
        //String searchValue = null;
        //List<TestRunModel> response = api.apiV2ProjectsIdTestRunsFullGet(id, includeTestResults, mustAggregateTestResults, notStarted, inProgress, stopped, completed, createdDateFrom, createdDateTo, testPlanId, skip, take, orderBy, searchField, searchValue);
        // TODO: test validations
    }

    /**
     * Get WorkItems Tags
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System returns work items tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2ProjectsIdWorkItemsTagsGetTest() throws ApiException {
        //UUID id = null;
        //Boolean isDeleted = null;
        //List<TagShortModel> response = api.apiV2ProjectsIdWorkItemsTagsGet(id, isDeleted);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2ProjectsSearchPostTest() throws ApiException {
        //Integer skip = null;
        //Integer take = null;
        //String orderBy = null;
        //String searchField = null;
        //String searchValue = null;
        //ProjectSelectModel projectSelectModel = null;
        //List<ProjectModel> response = api.apiV2ProjectsSearchPost(skip, take, orderBy, searchField, searchValue, projectSelectModel);
        // TODO: test validations
    }

    /**
     * Import project from JSON file
     *
     * &lt;br&gt;    &lt;b&gt;A project can only be exported to another TMS instance, different from the one it was imported from.&lt;/b&gt;    &lt;br&gt;This method imports a &#x60;.json&#x60; file with a project to the test management system.  &lt;br&gt;In the body of the request, send the &#x60;.json&#x60; file received by the &#x60;POST /api/v2/projects/export&#x60; method:  &lt;br&gt;    &lt;code&gt;              curl -X POST \&quot;http://{domain.com}/api/v2/projects/import\&quot; \\              -H \&quot;accept: /\&quot; -H \&quot;Authorization: PrivateToken {token}\&quot; -H \&quot;Content-Type: multipart/form-data\&quot; \\              -F \&quot;file&#x3D;@import.txt;type&#x3D;text/plain\&quot;              &lt;/code&gt;    &lt;br&gt;              In the second instance, a project with the name of the imported one is created.              User attributes and the test library (along with content and structure) are imported.                &lt;br&gt;Test plan execution history from the first instance of TMS cannot be transferred.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void callImportTest() throws ApiException {
        //Boolean includeAttachments = null;
        //File _file = null;
        //api.callImport(includeAttachments, _file);
        // TODO: test validations
    }

    /**
     * Add attributes to project&#39;s test plans
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and attributes identifiers  &lt;br&gt;User runs method execution  &lt;br&gt;System updates project and add attributes to project for test plans  &lt;br&gt;System returns no content response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCustomAttributeTestPlanProjectRelationsTest() throws ApiException {
        //String id = null;
        //List<UUID> UUID = null;
        //api.createCustomAttributeTestPlanProjectRelations(id, UUID);
        // TODO: test validations
    }

    /**
     * Create project
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project parameters (listed in request example) and runs method execution  &lt;br&gt;System creates project  &lt;br&gt;System returns project model (example listed in response parameters)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProjectTest() throws ApiException {
        //ProjectPostModel projectPostModel = null;
        //ProjectModel response = api.createProject(projectPostModel);
        // TODO: test validations
    }

    /**
     * Create project attribute
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets attribute parameters (listed in request example) and runs method execution  &lt;br&gt;System search project  &lt;br&gt;System creates attribute and relates it to the project  &lt;br&gt;System returns project attribute properties (example listed in response parameters)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProjectsAttributeTest() throws ApiException {
        //String id = null;
        //CustomAttributePostModel customAttributePostModel = null;
        //CustomAttributeModel response = api.createProjectsAttribute(id, customAttributePostModel);
        // TODO: test validations
    }

    /**
     * Delete attribute from project&#39;s test plans
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and attribute identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System updates project and delete attribute from project for test plans  &lt;br&gt;System returns no content response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCustomAttributeTestPlanProjectRelationsTest() throws ApiException {
        //String id = null;
        //UUID attributeId = null;
        //api.deleteCustomAttributeTestPlanProjectRelations(id, attributeId);
        // TODO: test validations
    }

    /**
     * Delete project
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search and delete project  &lt;br&gt;System returns no content response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProjectTest() throws ApiException {
        //String id = null;
        //api.deleteProject(id);
        // TODO: test validations
    }

    /**
     * Delete project
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier   &lt;br&gt;User runs method execution  &lt;br&gt;System delete all autotests from project  &lt;br&gt;System returns no content response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProjectAutoTestsTest() throws ApiException {
        //String id = null;
        //api.deleteProjectAutoTests(id);
        // TODO: test validations
    }

    /**
     * Delete project attribute
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project identifier and runs method execution  &lt;br&gt;User sets attribute identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search and delete attribute  &lt;br&gt;System returns no content response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProjectsAttributeTest() throws ApiException {
        //String id = null;
        //UUID attributeId = null;
        //api.deleteProjectsAttribute(id, attributeId);
        // TODO: test validations
    }

    /**
     * Export project as JSON file
     *
     * &lt;br&gt;This method exports the selected project or its part (sections, work items) to a &#x60;.json&#x60; file.  &lt;br&gt;In the request body, you can specify sections and test cases to be exported.  &lt;br&gt;Example of a request to export two sections and two test cases:  &lt;br&gt;    &lt;code&gt;              curl -X POST \&quot;http://{domain}.com/api/v2/projects/27a32ce6-d972-4ef8-bef5-51be4bf9e468/export\&quot; \\              -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: PrivateToken {token}\&quot; -H \&quot;Content-Type: application/json-patch+json\&quot; \\              -d \&quot;{\\\&quot;sectionIds\\\&quot;:[\\\&quot;3fa85f64-5717-4562-b3fc-2c963f66afa6\\\&quot;,\\\&quot;9fa85f64-5717-4562-b3fc-2c963f66a000\\\&quot;],\\\&quot;workItemIds\\\&quot;:[\\\&quot;3fa85f64-5717-4562-b3fc-2c963f66afa6\\\&quot;,\\\&quot;90085f64-5717-4562-b3fc-2c963f66a000\\\&quot;]}\&quot;              &lt;/code&gt;    &lt;br&gt;In the response, you get:  &lt;br&gt;              - A &#x60;.zip&#x60; file with attachments and a.json file if you enable attachments export.&lt;br /&gt;              - A &#x60;.json&#x60; file with the project if you do not enable attachments export.              
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportTest() throws ApiException {
        //String id = null;
        //Boolean includeAttachments = null;
        //ProjectExportQueryModel projectExportQueryModel = null;
        //File response = api.export(id, includeAttachments, projectExportQueryModel);
        // TODO: test validations
    }

    /**
     * Export project with test plans, test suites and test points as JSON file
     *
     * &lt;br&gt;    &lt;b&gt;You cannot export test cases execution history.&lt;/b&gt;    &lt;br&gt;This method exports the project with the test library and specified test plans to another TMS instance.  &lt;br&gt;              After sending a correct request, the project is exported to a &#x60;.json&#x60; file.              If you enable attachment export, the &#x60;.json&#x60; file and the attachments are placed in a &#x60;.zip&#x60; file.              You can import such a project by using the &#x60;POST /api/v2/projects/import&#x60; method.              
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportWithTestPlansAndConfigurationsTest() throws ApiException {
        //String id = null;
        //Boolean includeAttachments = null;
        //ProjectExportWithTestPlansPostModel projectExportWithTestPlansPostModel = null;
        //File response = api.exportWithTestPlansAndConfigurations(id, includeAttachments, projectExportWithTestPlansPostModel);
        // TODO: test validations
    }

    /**
     * Get all projects
     *
     * &lt;br&gt;Use case  &lt;br&gt;[Optional] User sets isDeleted field value  &lt;br&gt;[Optional] If User sets isDeleted field value as true, System search all deleted projects  &lt;br&gt;[Optional] If User sets isDeleted field value as false, System search all projects which are not deleted  &lt;br&gt;If User did not set isDeleted field value, System search all projects  &lt;br&gt;System returns array of all found projects(listed in response model)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllProjectsTest() throws ApiException {
        //Boolean isDeleted = null;
        //String projectName = null;
        //Integer skip = null;
        //Integer take = null;
        //String orderBy = null;
        //String searchField = null;
        //String searchValue = null;
        //List<ProjectModel> response = api.getAllProjects(isDeleted, projectName, skip, take, orderBy, searchField, searchValue);
        // TODO: test validations
    }

    /**
     * Get project attribute
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;User sets project attribute identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search project attribute   &lt;br&gt;System returns project attribute (listed in response model)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAttributeByProjectIdTest() throws ApiException {
        //String id = null;
        //UUID attributeId = null;
        //CustomAttributeModel response = api.getAttributeByProjectId(id, attributeId);
        // TODO: test validations
    }

    /**
     * Get project attributes
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;[Optional] User sets isDeleted field value  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;[Optional] If User sets isDeleted field value as true, System search all deleted attributes related to project  &lt;br&gt;[Optional] If User sets isDeleted field value as false, System search all attributes related to project which are not deleted  &lt;br&gt;[Optional] If User did not set isDeleted field value, System search all attributes related to project  &lt;br&gt;System returns array of found attributes (listed in response model)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAttributesByProjectIdTest() throws ApiException {
        //String id = null;
        //Boolean isDeleted = null;
        //List<CustomAttributeModel> response = api.getAttributesByProjectId(id, isDeleted);
        // TODO: test validations
    }

    /**
     * Get namespaces of autotests in project
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search all autotest related to the project  &lt;br&gt;System returns array of autotest with namespaces and classnames (listed in response)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAutoTestsNamespacesTest() throws ApiException {
        //String id = null;
        //List<AutoTestNamespaceModel> response = api.getAutoTestsNamespaces(id);
        // TODO: test validations
    }

    /**
     * Get project configurations
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search all configurations related to project  &lt;br&gt;System returns array of found configurations (listed in response model)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConfigurationsByProjectIdTest() throws ApiException {
        //String id = null;
        //List<ConfigurationModel> response = api.getConfigurationsByProjectId(id);
        // TODO: test validations
    }

    /**
     * Get project&#39;s test plan attributes
     *
     * &lt;br&gt;Use case  &lt;br&gt;User runs method execution  &lt;br&gt;System returns project for test plans attributes by project identifier
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomAttributeTestPlanProjectRelationsTest() throws ApiException {
        //String id = null;
        //List<CustomAttributeModel> response = api.getCustomAttributeTestPlanProjectRelations(id);
        // TODO: test validations
    }

    /**
     * Get project by ID
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search project  &lt;br&gt;System returns project (example listed in response parameters)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectByIdTest() throws ApiException {
        //String id = null;
        //ProjectModel response = api.getProjectById(id);
        // TODO: test validations
    }

    /**
     * Get project sections
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search all sections related to the project  &lt;br&gt;System returns array of sections (listed in response)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSectionsByProjectIdTest() throws ApiException {
        //String id = null;
        //Integer skip = null;
        //Integer take = null;
        //String orderBy = null;
        //String searchField = null;
        //String searchValue = null;
        //List<SectionModel> response = api.getSectionsByProjectId(id, skip, take, orderBy, searchField, searchValue);
        // TODO: test validations
    }

    /**
     * Get project test plans
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;[Optional] User sets isDeleted field value  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;[Optional] If User sets isDeleted field value as true, System search all deleted test plans related to project  &lt;br&gt;[Optional] If User sets isDeleted field value as false, System search all test plans related to project which are not deleted  &lt;br&gt;[Optional] If User did not set isDeleted field value, System search all v related to project  &lt;br&gt;System returns array of found test plans (listed in response model)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTestPlansByProjectIdTest() throws ApiException {
        //String id = null;
        //Boolean isDeleted = null;
        //List<TestPlanModel> response = api.getTestPlansByProjectId(id, isDeleted);
        // TODO: test validations
    }

    /**
     * Get project test runs
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;System search all test runs related to project  &lt;br&gt;System returns array of found test runs (listed in response model)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTestRunsByProjectIdTest() throws ApiException {
        //String id = null;
        //Boolean notStarted = null;
        //Boolean inProgress = null;
        //Boolean stopped = null;
        //Boolean completed = null;
        //OffsetDateTime createdDateFrom = null;
        //OffsetDateTime createdDateTo = null;
        //UUID testPlanId = null;
        //Integer skip = null;
        //Integer take = null;
        //String orderBy = null;
        //String searchField = null;
        //String searchValue = null;
        //List<TestRunV2GetModel> response = api.getTestRunsByProjectId(id, notStarted, inProgress, stopped, completed, createdDateFrom, createdDateTo, testPlanId, skip, take, orderBy, searchField, searchValue);
        // TODO: test validations
    }

    /**
     * Get project work items
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier  &lt;br&gt;[Optional] User sets isDeleted field value  &lt;br&gt;User runs method execution  &lt;br&gt;System search project  &lt;br&gt;[Optional] If User sets isDeleted field value as true, System search all deleted workitems related to project  &lt;br&gt;[Optional] If User sets isDeleted field value as false, System search all workitems related to project which are not deleted  &lt;br&gt;If User did not set isDeleted field value, System search all  workitems related to project  &lt;br&gt;System returns array of found workitems (listed in response model)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkItemsByProjectIdTest() throws ApiException {
        //String id = null;
        //Boolean isDeleted = null;
        //List<String> tagNames = null;
        //Boolean includeIterations = null;
        //Integer skip = null;
        //Integer take = null;
        //String orderBy = null;
        //String searchField = null;
        //String searchValue = null;
        //List<WorkItemShortModel> response = api.getWorkItemsByProjectId(id, isDeleted, tagNames, includeIterations, skip, take, orderBy, searchField, searchValue);
        // TODO: test validations
    }

    /**
     * Import project from JSON file into existing project
     *
     * &lt;br&gt;Use case  &lt;br&gt;User attaches project as json file taken from export or export-by-testPlans method  &lt;br&gt;User runs method execution  &lt;br&gt;System updates project  &lt;br&gt;System returns no content response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importToExistingProjectTest() throws ApiException {
        //String id = null;
        //Boolean includeAttachments = null;
        //File _file = null;
        //api.importToExistingProject(id, includeAttachments, _file);
        // TODO: test validations
    }

    /**
     * Restore project
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and runs method execution  &lt;br&gt;System search and restores deleted project  &lt;br&gt;System returns no content response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restoreProjectTest() throws ApiException {
        //String id = null;
        //api.restoreProject(id);
        // TODO: test validations
    }

    /**
     * Update attribute of project&#39;s test plans
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project internal or global identifier and attribute model  &lt;br&gt;User runs method execution  &lt;br&gt;System updates project and project attribute for test plan  &lt;br&gt;System returns no content response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCustomAttributeTestPlanProjectRelationsTest() throws ApiException {
        //String id = null;
        //CustomAttributeTestPlanProjectRelationPutModel customAttributeTestPlanProjectRelationPutModel = null;
        //api.updateCustomAttributeTestPlanProjectRelations(id, customAttributeTestPlanProjectRelationPutModel);
        // TODO: test validations
    }

    /**
     * Update project
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project parameters (listed in request example) and runs method execution  &lt;br&gt;System updates project  &lt;br&gt;System returns updated project model (example listed in response parameters)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProjectTest() throws ApiException {
        //ProjectPutModel projectPutModel = null;
        //api.updateProject(projectPutModel);
        // TODO: test validations
    }

    /**
     * Update project attribute
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets project parameters (listed in request example) and runs method execution  &lt;br&gt;System updates project  &lt;br&gt;System updates attribute related to the project  &lt;br&gt;System returns no content response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProjectsAttributeTest() throws ApiException {
        //String id = null;
        //CustomAttributePutModel customAttributePutModel = null;
        //api.updateProjectsAttribute(id, customAttributePutModel);
        // TODO: test validations
    }

}
