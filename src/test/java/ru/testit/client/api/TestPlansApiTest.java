/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.api;

import ru.testit.client.invoker.*;
import ru.testit.client.invoker.auth.*;
import ru.testit.client.model.ConfigurationModel;
import java.io.File;
import ru.testit.client.model.GetXlsxTestPointsByTestPlanModel;
import java.time.OffsetDateTime;
import ru.testit.client.model.ProblemDetails;
import java.util.Set;
import ru.testit.client.model.TestPlanChangeModel;
import ru.testit.client.model.TestPlanLink;
import ru.testit.client.model.TestPlanModel;
import ru.testit.client.model.TestPlanPostModel;
import ru.testit.client.model.TestPlanPutModel;
import ru.testit.client.model.TestPlanShortModel;
import ru.testit.client.model.TestPlanWithTestSuiteTreeModel;
import ru.testit.client.model.TestPointAnalyticResult;
import ru.testit.client.model.TestPointWithLastResultModel;
import ru.testit.client.model.TestRunModel;
import ru.testit.client.model.TestSuiteV2TreeModel;
import java.util.UUID;
import ru.testit.client.model.ValidationProblemDetails;
import ru.testit.client.model.WorkItemSelectModel;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TestPlansApi
 */
public class TestPlansApiTest {

    private final TestPlansApi api = new TestPlansApi();

    /**
     * Add test-points to test suite with sections
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTestPointsWithSectionsTest() throws ApiException {
        //String id = null;
        //WorkItemSelectModel workItemSelectModel = null;
        //api.addTestPointsWithSections(id, workItemSelectModel);
        // TODO: test validations
    }

    /**
     * Add WorkItems to TestPlan with Sections as TestSuites
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets TestPlan identifier  &lt;br&gt;User sets WorkItem identifiers (listed in request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System added WorkItems and Sections to TestPlan  &lt;br&gt;System returns no content response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addWorkItemsWithSectionsTest() throws ApiException {
        //String id = null;
        //Set<UUID> UUID = null;
        //api.addWorkItemsWithSections(id, UUID);
        // TODO: test validations
    }

    /**
     * Get analytics by TestPlan
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets test plan identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System returns analytics by test plan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2TestPlansIdAnalyticsGetTest() throws ApiException {
        //String id = null;
        //TestPointAnalyticResult response = api.apiV2TestPlansIdAnalyticsGet(id);
        // TODO: test validations
    }

    /**
     * Auto-balance for TestPlan with testers
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets TestPlan identifier  &lt;br&gt;User sets testers identifiers (listed in request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System auto-balances TestPlan  &lt;br&gt;System returns test plan model (listed in response example)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2TestPlansIdAutobalancePostTest() throws ApiException {
        //String id = null;
        //Set<UUID> testers = null;
        //TestPlanWithTestSuiteTreeModel response = api.apiV2TestPlansIdAutobalancePost(id, testers);
        // TODO: test validations
    }

    /**
     * Get TestPlan configurations
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets test plan identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System return test plan configurations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2TestPlansIdConfigurationsGetTest() throws ApiException {
        //String id = null;
        //List<ConfigurationModel> response = api.apiV2TestPlansIdConfigurationsGet(id);
        // TODO: test validations
    }

    /**
     * Export TestPoints from TestPlan in xls format
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets test plan identifier  &lt;br&gt;User sets filter model (listed in request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System return export xlsx file
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2TestPlansIdExportTestPointsXlsxPostTest() throws ApiException {
        //String id = null;
        //Long timeZoneOffsetInMinutes = null;
        //GetXlsxTestPointsByTestPlanModel getXlsxTestPointsByTestPlanModel = null;
        //File response = api.apiV2TestPlansIdExportTestPointsXlsxPost(id, timeZoneOffsetInMinutes, getXlsxTestPointsByTestPlanModel);
        // TODO: test validations
    }

    /**
     * Export TestResults history from TestPlan in xls format
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets test plan identifier  &lt;br&gt;User sets filter model (listed in request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System return export xlsx file
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2TestPlansIdExportTestResultHistoryXlsxPostTest() throws ApiException {
        //String id = null;
        //Boolean mustReturnOnlyLastTestResult = null;
        //Boolean includeSteps = null;
        //Boolean includeDeletedTestSuites = null;
        //Long timeZoneOffsetInMinutes = null;
        //File response = api.apiV2TestPlansIdExportTestResultHistoryXlsxPost(id, mustReturnOnlyLastTestResult, includeSteps, includeDeletedTestSuites, timeZoneOffsetInMinutes);
        // TODO: test validations
    }

    /**
     * Get TestPlan history
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets test plan identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System return test plan history
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2TestPlansIdHistoryGetTest() throws ApiException {
        //String id = null;
        //Integer skip = null;
        //Integer take = null;
        //String orderBy = null;
        //String searchField = null;
        //String searchValue = null;
        //List<TestPlanChangeModel> response = api.apiV2TestPlansIdHistoryGet(id, skip, take, orderBy, searchField, searchValue);
        // TODO: test validations
    }

    /**
     * Get Links of TestPlan
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets test plan identifier  &lt;br&gt;User sets pagination filter (listed in request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System returns links of TestPlan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2TestPlansIdLinksGetTest() throws ApiException {
        //String id = null;
        //Integer skip = null;
        //Integer take = null;
        //String orderBy = null;
        //List<TestPlanLink> response = api.apiV2TestPlansIdLinksGet(id, skip, take, orderBy);
        // TODO: test validations
    }

    /**
     * Get TestPoints with last result from TestPlan
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets test plan identifier  &lt;br&gt;User sets filter (listed in request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System return test points with last result from test plan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2TestPlansIdTestPointsLastResultsGetTest() throws ApiException {
        //String id = null;
        //Boolean mustAddGroupingElements = null;
        //UUID testerId = null;
        //Integer skip = null;
        //Integer take = null;
        //String orderBy = null;
        //String searchField = null;
        //String searchValue = null;
        //List<TestPointWithLastResultModel> response = api.apiV2TestPlansIdTestPointsLastResultsGet(id, mustAddGroupingElements, testerId, skip, take, orderBy, searchField, searchValue);
        // TODO: test validations
    }

    /**
     * Reset TestPoints status of TestPlan
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets test plan identifier  &lt;br&gt;User sets test points identifiers  &lt;br&gt;User runs method execution  &lt;br&gt;System reset test points statuses of test plan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2TestPlansIdTestPointsResetPostTest() throws ApiException {
        //String id = null;
        //List<UUID> UUID = null;
        //api.apiV2TestPlansIdTestPointsResetPost(id, UUID);
        // TODO: test validations
    }

    /**
     * Get TestRuns of TestPlan
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets test plan identifier  &lt;br&gt;User sets TestRun status filter (listed in request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System returns TestRuns for TestPlan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2TestPlansIdTestRunsGetTest() throws ApiException {
        //String id = null;
        //Boolean notStarted = null;
        //Boolean inProgress = null;
        //Boolean stopped = null;
        //Boolean completed = null;
        //Integer skip = null;
        //Integer take = null;
        //String orderBy = null;
        //String searchField = null;
        //String searchValue = null;
        //List<TestRunModel> response = api.apiV2TestPlansIdTestRunsGet(id, notStarted, inProgress, stopped, completed, skip, take, orderBy, searchField, searchValue);
        // TODO: test validations
    }

    /**
     * Get max modified date in TestRun for TestPlan
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets test plan identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System returns max modified date in TestRun for TestPlan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2TestPlansIdTestRunsTestResultsLastModifiedModifiedDateGetTest() throws ApiException {
        //String id = null;
        //OffsetDateTime response = api.apiV2TestPlansIdTestRunsTestResultsLastModifiedModifiedDateGet(id);
        // TODO: test validations
    }

    /**
     * Send unlock TestPlan notification
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets test plan identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System send unlock test plan notification
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2TestPlansIdUnlockRequestPostTest() throws ApiException {
        //String id = null;
        //api.apiV2TestPlansIdUnlockRequestPost(id);
        // TODO: test validations
    }

    /**
     * Get TestPlans short models by Project identifiers
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets projects identifiers  &lt;br&gt;User runs method execution  &lt;br&gt;System return test plans short models (listed in response example)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2TestPlansShortsPostTest() throws ApiException {
        //Boolean isDeleted = null;
        //Set<UUID> UUID = null;
        //List<TestPlanShortModel> response = api.apiV2TestPlansShortsPost(isDeleted, UUID);
        // TODO: test validations
    }

    /**
     * Clone TestPlan
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets test plan identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System clones test plan  &lt;br&gt;System returns test plan (listed in response example)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloneTest() throws ApiException {
        //String id = null;
        //TestPlanModel response = api.clone(id);
        // TODO: test validations
    }

    /**
     * Complete TestPlan
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets test plan identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System completes the test plan and updates test plan status  &lt;br&gt;System returns no content response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void completeTest() throws ApiException {
        //String id = null;
        //api.complete(id);
        // TODO: test validations
    }

    /**
     * Create TestPlan
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets test plan properties (listed in request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System creates test plan  &lt;br&gt;System returns test plan (listed in response example)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTestPlanTest() throws ApiException {
        //TestPlanPostModel testPlanPostModel = null;
        //TestPlanModel response = api.createTestPlan(testPlanPostModel);
        // TODO: test validations
    }

    /**
     * Delete TestPlan
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets test plan identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System delete test plan  &lt;br&gt;System returns no content response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTestPlanTest() throws ApiException {
        //String id = null;
        //api.deleteTestPlan(id);
        // TODO: test validations
    }

    /**
     * Get TestPlan by Id
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets test plan identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System search  test plan by the identifier  &lt;br&gt;System returns test plan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTestPlanByIdTest() throws ApiException {
        //String id = null;
        //TestPlanModel response = api.getTestPlanById(id);
        // TODO: test validations
    }

    /**
     * Get TestSuites Tree By Id
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets test plan identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System finds test suites related to the test plan  &lt;br&gt;System returns test suites as a tree model (listed in response example)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTestSuitesByIdTest() throws ApiException {
        //String id = null;
        //List<TestSuiteV2TreeModel> response = api.getTestSuitesById(id);
        // TODO: test validations
    }

    /**
     * Pause TestPlan
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets test plan identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System pauses the test plan and updates test plan status  &lt;br&gt;System returns no content response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pauseTest() throws ApiException {
        //String id = null;
        //api.pause(id);
        // TODO: test validations
    }

    /**
     * Restore TestPlan
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets test plan identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System restores test plan  &lt;br&gt;System returns no content response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restoreTestPlanTest() throws ApiException {
        //String id = null;
        //api.restoreTestPlan(id);
        // TODO: test validations
    }

    /**
     * Start TestPlan
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets test plan identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System starts the test plan and updates test plan status  &lt;br&gt;System returns no content response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startTest() throws ApiException {
        //String id = null;
        //api.start(id);
        // TODO: test validations
    }

    /**
     * Update TestPlan
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets test plan properties(listed in request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System updates test plan  &lt;br&gt;System returns no content response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTestPlanTest() throws ApiException {
        //TestPlanPutModel testPlanPutModel = null;
        //api.updateTestPlan(testPlanPutModel);
        // TODO: test validations
    }

}
