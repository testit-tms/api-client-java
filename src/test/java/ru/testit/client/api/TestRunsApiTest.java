/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.api;

import ru.testit.client.invoker.*;
import ru.testit.client.invoker.auth.*;
import ru.testit.client.model.AutoTestResultsForTestRunModel;
import java.time.OffsetDateTime;
import ru.testit.client.model.ProblemDetails;
import ru.testit.client.model.TestPointResultModel;
import ru.testit.client.model.TestRunFillByAutoTestsPostModel;
import ru.testit.client.model.TestRunFillByConfigurationsPostModel;
import ru.testit.client.model.TestRunFillByWorkItemsPostModel;
import ru.testit.client.model.TestRunV2GetModel;
import ru.testit.client.model.TestRunV2PostShortModel;
import ru.testit.client.model.TestRunV2PutModel;
import java.util.UUID;
import ru.testit.client.model.ValidationProblemDetails;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TestRunsApi
 */
public class TestRunsApiTest {

    private final TestRunsApi api = new TestRunsApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2TestRunsIdTestPointsResultsGetTest() throws ApiException {
        //UUID id = null;
        //List<TestPointResultModel> response = api.apiV2TestRunsIdTestPointsResultsGet(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2TestRunsIdTestResultsLastModifiedModificationDateGetTest() throws ApiException {
        //UUID id = null;
        //OffsetDateTime response = api.apiV2TestRunsIdTestResultsLastModifiedModificationDateGet(id);
        // TODO: test validations
    }

    /**
     * Complete TestRun
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets test run identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System completes test run  &lt;br&gt;System returns no content response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void completeTestRunTest() throws ApiException {
        //UUID id = null;
        //api.completeTestRun(id);
        // TODO: test validations
    }

    /**
     * Create test runs based on autotests and configurations
     *
     * This method creates a test run based on an autotest and a configuration.  The difference between the &#x60;POST /api/v2/testRuns/byWorkItems&#x60; and &#x60;POST /api/v2/testRuns/byConfigurations&#x60; methods is  that in this method there is no need to create a test plan and work items (test cases and checklists).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAndFillByAutoTestsTest() throws ApiException {
        //TestRunFillByAutoTestsPostModel testRunFillByAutoTestsPostModel = null;
        //TestRunV2GetModel response = api.createAndFillByAutoTests(testRunFillByAutoTestsPostModel);
        // TODO: test validations
    }

    /**
     * Create test runs picking the needed test points
     *
     * This method creates a test run based on a combination of a configuration and a work item(test case or checklist).  Before you create a test run using this method, make sure to create a test plan. Work items must be automated.  This method is different from the &#x60;POST /api/v2/testRuns/byWorkItems&#x60; method because of the ability to send a  jagged array within the \&quot;&lt;b&gt;testPointSelectors&lt;/b&gt;\&quot; parameter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAndFillByConfigurationsTest() throws ApiException {
        //TestRunFillByConfigurationsPostModel testRunFillByConfigurationsPostModel = null;
        //TestRunV2GetModel response = api.createAndFillByConfigurations(testRunFillByConfigurationsPostModel);
        // TODO: test validations
    }

    /**
     * Create test run based on configurations and work items
     *
     * This method creates a test run based on a combination of configuration and work item (test case or checklist).  Before you create a test run using this method, make sure to create a test plan.  Work items must be automated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAndFillByWorkItemsTest() throws ApiException {
        //TestRunFillByWorkItemsPostModel testRunFillByWorkItemsPostModel = null;
        //TestRunV2GetModel response = api.createAndFillByWorkItems(testRunFillByWorkItemsPostModel);
        // TODO: test validations
    }

    /**
     * Create empty TestRun
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets test run model (listed in the request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System creates test run  &lt;br&gt;System returns test run model
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEmptyTest() throws ApiException {
        //TestRunV2PostShortModel testRunV2PostShortModel = null;
        //TestRunV2GetModel response = api.createEmpty(testRunV2PostShortModel);
        // TODO: test validations
    }

    /**
     * Get TestRun by Id
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets test run identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System finds test run  &lt;br&gt;System returns test run
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTestRunByIdTest() throws ApiException {
        //UUID id = null;
        //TestRunV2GetModel response = api.getTestRunById(id);
        // TODO: test validations
    }

    /**
     * Send test results to the test runs in the system
     *
     * This method sends test results to the test management system.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setAutoTestResultsForTestRunTest() throws ApiException {
        //UUID id = null;
        //List<AutoTestResultsForTestRunModel> autoTestResultsForTestRunModel = null;
        //List<UUID> response = api.setAutoTestResultsForTestRun(id, autoTestResultsForTestRunModel);
        // TODO: test validations
    }

    /**
     * Start TestRun
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets test run identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System starts test run  &lt;br&gt;System returns no content response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startTestRunTest() throws ApiException {
        //UUID id = null;
        //api.startTestRun(id);
        // TODO: test validations
    }

    /**
     * Stop TestRun
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets test run identifier  &lt;br&gt;User runs method execution  &lt;br&gt;System stops test run  &lt;br&gt;System returns no content response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopTestRunTest() throws ApiException {
        //UUID id = null;
        //api.stopTestRun(id);
        // TODO: test validations
    }

    /**
     * Update empty TestRun
     *
     * &lt;br&gt;Use case  &lt;br&gt;User sets test run properties (listed in the request example)  &lt;br&gt;User runs method execution  &lt;br&gt;System updates test run  &lt;br&gt;System returns returns no content response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEmptyTest() throws ApiException {
        //TestRunV2PutModel testRunV2PutModel = null;
        //api.updateEmpty(testRunV2PutModel);
        // TODO: test validations
    }

}
