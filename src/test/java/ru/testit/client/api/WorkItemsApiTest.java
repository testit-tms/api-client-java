/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.testit.client.api;

import ru.testit.client.invoker.ApiException;
import ru.testit.client.model.ApiV2ProjectsProjectIdWorkItemsSearchPostRequest;
import ru.testit.client.model.ApiV2WorkItemsMovePostRequest;
import ru.testit.client.model.ApiV2WorkItemsSharedStepIdReferencesSectionsPostRequest;
import ru.testit.client.model.ApiV2WorkItemsSharedStepIdReferencesWorkItemsPostRequest;
import ru.testit.client.model.AutoTestModel;
import ru.testit.client.model.CreateWorkItemRequest;
import java.io.File;
import ru.testit.client.model.IterationModel;
import java.time.OffsetDateTime;
import ru.testit.client.model.ProblemDetails;
import ru.testit.client.model.SharedStepReferenceModel;
import ru.testit.client.model.SharedStepReferenceSectionModel;
import ru.testit.client.model.TestResultChronologyModel;
import ru.testit.client.model.TestResultHistoryReportModel;
import java.util.UUID;
import ru.testit.client.model.UpdateWorkItemRequest;
import ru.testit.client.model.ValidationProblemDetails;
import ru.testit.client.model.WorkItemChangeModel;
import ru.testit.client.model.WorkItemLikeModel;
import ru.testit.client.model.WorkItemModel;
import ru.testit.client.model.WorkItemShortModel;
import ru.testit.client.model.WorkItemVersionModel;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WorkItemsApi
 */
@Disabled
public class WorkItemsApiTest {

    private final WorkItemsApi api = new WorkItemsApi();

    /**
     * Upload and link attachment to WorkItem
     *
     *  Use case   User sets workItemId   User attaches a file   System creates attachment and links it to the work item   System returns attachment identifier
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2WorkItemsIdAttachmentsPostTest() throws ApiException {
        UUID id = null;
        File _file = null;
        api.apiV2WorkItemsIdAttachmentsPost(id, _file);
        // TODO: test validations
    }

    /**
     * Transform CheckList to TestCase
     *
     *  Use case   User sets checklist identifier   User runs method execution   System transform CheckList to TestCase
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2WorkItemsIdCheckListTransformToTestCasePostTest() throws ApiException {
        UUID id = null;
        WorkItemModel response = api.apiV2WorkItemsIdCheckListTransformToTestCasePost(id);
        // TODO: test validations
    }

    /**
     * Get change history of WorkItem
     *
     *  Use case   User sets work item identifier   User runs method execution   System return change history of WorkItem
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2WorkItemsIdHistoryGetTest() throws ApiException {
        UUID id = null;
        Integer skip = null;
        Integer take = null;
        String orderBy = null;
        String searchField = null;
        String searchValue = null;
        List<WorkItemChangeModel> response = api.apiV2WorkItemsIdHistoryGet(id, skip, take, orderBy, searchField, searchValue);
        // TODO: test validations
    }

    /**
     * Delete like from WorkItem
     *
     *  Use case   User sets WorkItem identifier   User runs method execution   System delete like from WorkItem
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2WorkItemsIdLikeDeleteTest() throws ApiException {
        UUID id = null;
        api.apiV2WorkItemsIdLikeDelete(id);
        // TODO: test validations
    }

    /**
     * Set like to WorkItem
     *
     *  Use case   User sets WorkItem identifier   User runs method execution   System set like to WorkItem
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2WorkItemsIdLikePostTest() throws ApiException {
        UUID id = null;
        api.apiV2WorkItemsIdLikePost(id);
        // TODO: test validations
    }

    /**
     * Get likes count of WorkItem
     *
     *  Use case   User sets WorkItem identifier   User runs method execution   System return likes count of WorkItem
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2WorkItemsIdLikesCountGetTest() throws ApiException {
        UUID id = null;
        Integer response = api.apiV2WorkItemsIdLikesCountGet(id);
        // TODO: test validations
    }

    /**
     * Get likes of WorkItem
     *
     *  Use case   User sets WorkItem identifier   User runs method execution   System return likes of WorkItem
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2WorkItemsIdLikesGetTest() throws ApiException {
        UUID id = null;
        List<WorkItemLikeModel> response = api.apiV2WorkItemsIdLikesGet(id);
        // TODO: test validations
    }

    /**
     * Get test results history of WorkItem
     *
     *  Use case   User sets WorkItem identifier   User runs method execution   System return test results history of WorkItem
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2WorkItemsIdTestResultsHistoryGetTest() throws ApiException {
        UUID id = null;
        OffsetDateTime from = null;
        OffsetDateTime to = null;
        List<UUID> configurationIds = null;
        List<UUID> testPlanIds = null;
        List<UUID> userIds = null;
        List<String> outcomes = null;
        Boolean isAutomated = null;
        Boolean automated = null;
        List<UUID> testRunIds = null;
        Integer skip = null;
        Integer take = null;
        String orderBy = null;
        String searchField = null;
        String searchValue = null;
        List<TestResultHistoryReportModel> response = api.apiV2WorkItemsIdTestResultsHistoryGet(id, from, to, configurationIds, testPlanIds, userIds, outcomes, isAutomated, automated, testRunIds, skip, take, orderBy, searchField, searchValue);
        // TODO: test validations
    }

    /**
     * Set WorkItem as actual
     *
     *  Use case   User sets work item identifier   User runs method execution   System set WorkItem as actual
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2WorkItemsIdVersionVersionIdActualPostTest() throws ApiException {
        UUID id = null;
        UUID versionId = null;
        WorkItemModel response = api.apiV2WorkItemsIdVersionVersionIdActualPost(id, versionId);
        // TODO: test validations
    }

    /**
     * Move WorkItem to another section
     *
     *  Use case   User sets WorkItem identifier   User runs method execution   System move WorkItem to another section
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2WorkItemsMovePostTest() throws ApiException {
        ApiV2WorkItemsMovePostRequest apiV2WorkItemsMovePostRequest = null;
        WorkItemShortModel response = api.apiV2WorkItemsMovePost(apiV2WorkItemsMovePostRequest);
        // TODO: test validations
    }

    /**
     * Search for work items
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2WorkItemsSearchPostTest() throws ApiException {
        Integer skip = null;
        Integer take = null;
        String orderBy = null;
        String searchField = null;
        String searchValue = null;
        ApiV2ProjectsProjectIdWorkItemsSearchPostRequest apiV2ProjectsProjectIdWorkItemsSearchPostRequest = null;
        List<WorkItemShortModel> response = api.apiV2WorkItemsSearchPost(skip, take, orderBy, searchField, searchValue, apiV2ProjectsProjectIdWorkItemsSearchPostRequest);
        // TODO: test validations
    }

    /**
     * Get SharedStep references in sections
     *
     *  Use case   User sets SharedStep identifier   User runs method execution   System return SharedStep references
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2WorkItemsSharedStepIdReferencesSectionsPostTest() throws ApiException {
        UUID sharedStepId = null;
        Integer skip = null;
        Integer take = null;
        String orderBy = null;
        String searchField = null;
        String searchValue = null;
        ApiV2WorkItemsSharedStepIdReferencesSectionsPostRequest apiV2WorkItemsSharedStepIdReferencesSectionsPostRequest = null;
        List<SharedStepReferenceSectionModel> response = api.apiV2WorkItemsSharedStepIdReferencesSectionsPost(sharedStepId, skip, take, orderBy, searchField, searchValue, apiV2WorkItemsSharedStepIdReferencesSectionsPostRequest);
        // TODO: test validations
    }

    /**
     * Get SharedStep references in work items
     *
     *  Use case   User sets SharedStep identifier   User runs method execution   System return SharedStep references
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2WorkItemsSharedStepIdReferencesWorkItemsPostTest() throws ApiException {
        UUID sharedStepId = null;
        Integer skip = null;
        Integer take = null;
        String orderBy = null;
        String searchField = null;
        String searchValue = null;
        ApiV2WorkItemsSharedStepIdReferencesWorkItemsPostRequest apiV2WorkItemsSharedStepIdReferencesWorkItemsPostRequest = null;
        List<SharedStepReferenceModel> response = api.apiV2WorkItemsSharedStepIdReferencesWorkItemsPost(sharedStepId, skip, take, orderBy, searchField, searchValue, apiV2WorkItemsSharedStepIdReferencesWorkItemsPostRequest);
        // TODO: test validations
    }

    /**
     * Get SharedStep references
     *
     *  Use case   User sets SharedStep identifier   User runs method execution   System return SharedStep references
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2WorkItemsSharedStepsSharedStepIdReferencesGetTest() throws ApiException {
        UUID sharedStepId = null;
        List<SharedStepReferenceModel> response = api.apiV2WorkItemsSharedStepsSharedStepIdReferencesGet(sharedStepId);
        // TODO: test validations
    }

    /**
     * Create Test Case, Checklist or Shared Step
     *
     *  Use case   User sets work item properties (listed in request parameters)   User runs method execution   System creates work item by identifier   System returns work item model (listed in response parameters)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWorkItemTest() throws ApiException {
        CreateWorkItemRequest createWorkItemRequest = null;
        WorkItemModel response = api.createWorkItem(createWorkItemRequest);
        // TODO: test validations
    }

    /**
     * Delete all links AutoTests from WorkItem by Id or GlobalId
     *
     *  Use case   User sets work item identifier   User runs method execution   System search work item by identifier   System search and delete all autotests, related to found work item   System returns no content response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAllWorkItemsFromAutoTestTest() throws ApiException {
        String id = null;
        api.deleteAllWorkItemsFromAutoTest(id);
        // TODO: test validations
    }

    /**
     * Delete Test Case, Checklist or Shared Step by Id or GlobalId
     *
     *  Use case   User sets work item identifier   User runs method execution   System deletes work item   System returns no content response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWorkItemTest() throws ApiException {
        String id = null;
        api.deleteWorkItem(id);
        // TODO: test validations
    }

    /**
     * Get all AutoTests linked to WorkItem by Id or GlobalId
     *
     *  Use case   User sets work item identifier   User runs method execution   System search work item by identifier   System search all autotests, related to found work item   System returns list of found autotests
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAutoTestsForWorkItemTest() throws ApiException {
        String id = null;
        List<AutoTestModel> response = api.getAutoTestsForWorkItem(id);
        // TODO: test validations
    }

    /**
     * Get iterations by work item Id or GlobalId
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIterationsTest() throws ApiException {
        String id = null;
        UUID versionId = null;
        Integer versionNumber = null;
        List<IterationModel> response = api.getIterations(id, versionId, versionNumber);
        // TODO: test validations
    }

    /**
     * Get Test Case, Checklist or Shared Step by Id or GlobalId
     *
     *  Use case   User sets work item identifier   [Optional] User sets work item version identifier   [Optional] User sets work item version number   User runs method execution   System search work item by identifier   [Optional] if User sets work item version identifier, system search work item version by identifier.   [Optional] if user sets work item version number, system search work item version by number   Otherwise, system search last work item version   System returns work item 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkItemByIdTest() throws ApiException {
        String id = null;
        UUID versionId = null;
        Integer versionNumber = null;
        WorkItemModel response = api.getWorkItemById(id, versionId, versionNumber);
        // TODO: test validations
    }

    /**
     * Get WorkItem chronology by Id or GlobalId
     *
     *  Use case   User sets work item identifier   User runs method execution   System search work item by identifier   System search test results of all autotests, related to found work item   System sort results by CompletedOn ascending, then by CreatedDate ascending   System returns sorted collection of test results
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkItemChronologyTest() throws ApiException {
        String id = null;
        List<TestResultChronologyModel> response = api.getWorkItemChronology(id);
        // TODO: test validations
    }

    /**
     * Get WorkItem versions
     *
     *  Use case   User sets work item identifier   [Optional] User sets work item version identifier   User runs method execution   System search work item by identifier                         [Optional] If User set work item version identifier, System search work item version by version identifier                      Otherwise, system search all version of work item                     System returns array of work item version models (listed in response example)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkItemVersionsTest() throws ApiException {
        String id = null;
        UUID workItemVersionId = null;
        Integer versionNumber = null;
        List<WorkItemVersionModel> response = api.getWorkItemVersions(id, workItemVersionId, versionNumber);
        // TODO: test validations
    }

    /**
     * Permanently delete test case, checklist or shared steps from archive
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void purgeWorkItemTest() throws ApiException {
        String id = null;
        api.purgeWorkItem(id);
        // TODO: test validations
    }

    /**
     * Restore test case, checklist or shared steps from archive
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restoreWorkItemTest() throws ApiException {
        String id = null;
        api.restoreWorkItem(id);
        // TODO: test validations
    }

    /**
     * Update Test Case, Checklist or Shared Step
     *
     *  Use case   User sets work item properties (listed in request parameters)   User runs method execution   System updates work item by identifier   System returns updated work item model (listed in response parameters)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWorkItemTest() throws ApiException {
        UpdateWorkItemRequest updateWorkItemRequest = null;
        api.updateWorkItem(updateWorkItemRequest);
        // TODO: test validations
    }

}
